
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d0c  08006d0c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d14  08006d14  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000009f0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000172e1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003114  00000000  00000000  000373bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f8  00000000  00000000  0003a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f93  00000000  00000000  0003b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027dc1  00000000  00000000  0003c85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000178d7  00000000  00000000  0006461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f140e  00000000  00000000  0007bef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cfc  00000000  00000000  0016d304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00173000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c08 	.word	0x08006c08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08006c08 	.word	0x08006c08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <app>:

DHT11_Data_TypeDef dht11_data;

// 애플리케이션 메인 함수
void app(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af02      	add	r7, sp, #8

	DHT11_Init();
 8000592:	f000 f907 	bl	80007a4 <DHT11_Init>

	// ADC를 DMA로 시작하여 ADC 값 가져오기
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_value, 4);
 8000596:	2204      	movs	r2, #4
 8000598:	491e      	ldr	r1, [pc, #120]	; (8000614 <app+0x88>)
 800059a:	481f      	ldr	r0, [pc, #124]	; (8000618 <app+0x8c>)
 800059c:	f001 f990 	bl	80018c0 <HAL_ADC_Start_DMA>

	for (;;) {
		HAL_Delay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f001 f814 	bl	80015d0 <HAL_Delay>
		// ADC 및 EXTI 값을 UART를 통해 출력
		printf("ExtUnitTemp = %d ExtUnitTemp = %d InternalTemp = %d Vref = %d ExtValue = %d\r\n",
		       adc_value[0], adc_value[1], adc_value[2], adc_value[3],
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <app+0x88>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
		printf("ExtUnitTemp = %d ExtUnitTemp = %d InternalTemp = %d Vref = %d ExtValue = %d\r\n",
 80005ae:	4619      	mov	r1, r3
		       adc_value[0], adc_value[1], adc_value[2], adc_value[3],
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <app+0x88>)
 80005b2:	885b      	ldrh	r3, [r3, #2]
 80005b4:	b29b      	uxth	r3, r3
		printf("ExtUnitTemp = %d ExtUnitTemp = %d InternalTemp = %d Vref = %d ExtValue = %d\r\n",
 80005b6:	4618      	mov	r0, r3
		       adc_value[0], adc_value[1], adc_value[2], adc_value[3],
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <app+0x88>)
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	b29b      	uxth	r3, r3
		printf("ExtUnitTemp = %d ExtUnitTemp = %d InternalTemp = %d Vref = %d ExtValue = %d\r\n",
 80005be:	461c      	mov	r4, r3
		       adc_value[0], adc_value[1], adc_value[2], adc_value[3],
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <app+0x88>)
 80005c2:	88db      	ldrh	r3, [r3, #6]
 80005c4:	b29b      	uxth	r3, r3
		printf("ExtUnitTemp = %d ExtUnitTemp = %d InternalTemp = %d Vref = %d ExtValue = %d\r\n",
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <app+0x90>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	4623      	mov	r3, r4
 80005d4:	4602      	mov	r2, r0
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <app+0x94>)
 80005d8:	f005 fc48 	bl	8005e6c <iprintf>
		       exti_value);

		if (DHT11_ReadData(&dht11_data)) {
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <app+0x98>)
 80005de:	f000 f8ed 	bl	80007bc <DHT11_ReadData>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d010      	beq.n	800060a <app+0x7e>
		    // 데이터 읽기에 성공했을 때
		    // dht11_data 구조체에 온도와 습도 데이터가 저장됩니다.
		    // 이 데이터를 원하는 방식으로 사용할 수 있습니다.
		    // 예를 들어 UART를 통해 출력하거나 다른 작업을 수행할 수 있습니다.
		    printf("Temperature: %d.%d°C, Humidity: %d.%d%%\n",
		           dht11_data.temperature_integer, dht11_data.temperature_decimal,
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <app+0x98>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
		    printf("Temperature: %d.%d°C, Humidity: %d.%d%%\n",
 80005ec:	4619      	mov	r1, r3
		           dht11_data.temperature_integer, dht11_data.temperature_decimal,
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <app+0x98>)
 80005f0:	78db      	ldrb	r3, [r3, #3]
		    printf("Temperature: %d.%d°C, Humidity: %d.%d%%\n",
 80005f2:	461a      	mov	r2, r3
		           dht11_data.humidity_integer, dht11_data.humidity_decimal);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <app+0x98>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
		    printf("Temperature: %d.%d°C, Humidity: %d.%d%%\n",
 80005f8:	4618      	mov	r0, r3
		           dht11_data.humidity_integer, dht11_data.humidity_decimal);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <app+0x98>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
		    printf("Temperature: %d.%d°C, Humidity: %d.%d%%\n",
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4603      	mov	r3, r0
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <app+0x9c>)
 8000604:	f005 fc32 	bl	8005e6c <iprintf>
 8000608:	e7ca      	b.n	80005a0 <app+0x14>
		} else {
		    // 데이터 읽기에 실패했을 때
		    printf("Failed to read DHT11 data\n");
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <app+0xa0>)
 800060c:	f005 fc94 	bl	8005f38 <puts>
		HAL_Delay(1000);
 8000610:	e7c6      	b.n	80005a0 <app+0x14>
 8000612:	bf00      	nop
 8000614:	20000084 	.word	0x20000084
 8000618:	2000020c 	.word	0x2000020c
 800061c:	2000008c 	.word	0x2000008c
 8000620:	08006c20 	.word	0x08006c20
 8000624:	20000090 	.word	0x20000090
 8000628:	08006c70 	.word	0x08006c70
 800062c:	08006c9c 	.word	0x08006c9c

08000630 <HAL_GPIO_EXTI_Callback>:
	}
}

// GPIO 외부 인터럽트 콜백 함수
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
	// 외부 인터럽트에서 읽은 값을 저장
	exti_value = GPIO_Pin;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_GPIO_EXTI_Callback+0x1c>)
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	8013      	strh	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	2000008c 	.word	0x2000008c

08000650 <__io_putchar>:

// UART 출력 함수
int __io_putchar(int ch)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	2201      	movs	r2, #1
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <__io_putchar+0x20>)
 8000662:	f004 f88a 	bl	800477a <HAL_UART_Transmit>
  return ch;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200003ac 	.word	0x200003ac

08000674 <DHT11_Delay>:
#include "dht11.h"
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim2;

static void DHT11_Delay(uint32_t us) {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <DHT11_Delay+0x2c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8000684:	bf00      	nop
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <DHT11_Delay+0x2c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d8f9      	bhi.n	8000686 <DHT11_Delay+0x12>
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	20000364 	.word	0x20000364

080006a4 <DHT11_Start>:

static void DHT11_Start(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2102      	movs	r1, #2
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <DHT11_Start+0x2c>)
 80006ae:	f002 fef9 	bl	80034a4 <HAL_GPIO_WritePin>
    DHT11_Delay(18000); // 최소 18ms의 LOW 신호를 유지
 80006b2:	f244 6050 	movw	r0, #18000	; 0x4650
 80006b6:	f7ff ffdd 	bl	8000674 <DHT11_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2102      	movs	r1, #2
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <DHT11_Start+0x2c>)
 80006c0:	f002 fef0 	bl	80034a4 <HAL_GPIO_WritePin>
    DHT11_Delay(30); // HIGH 신호 후 대기 시간
 80006c4:	201e      	movs	r0, #30
 80006c6:	f7ff ffd5 	bl	8000674 <DHT11_Delay>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400

080006d4 <DHT11_Check_Response>:

static uint8_t DHT11_Check_Response(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    // DHT11 센서가 LOW 신호를 보내고 HIGH 신호를 받으면 센서가 응답한 것
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 80006d8:	2102      	movs	r1, #2
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <DHT11_Check_Response+0x38>)
 80006dc:	f002 feca 	bl	8003474 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10e      	bne.n	8000704 <DHT11_Check_Response+0x30>
        DHT11_Delay(80); // LOW 신호 유지
 80006e6:	2050      	movs	r0, #80	; 0x50
 80006e8:	f7ff ffc4 	bl	8000674 <DHT11_Delay>
        if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 80006ec:	2102      	movs	r1, #2
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <DHT11_Check_Response+0x38>)
 80006f0:	f002 fec0 	bl	8003474 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <DHT11_Check_Response+0x30>
            DHT11_Delay(50); // HIGH 신호 유지
 80006fa:	2032      	movs	r0, #50	; 0x32
 80006fc:	f7ff ffba 	bl	8000674 <DHT11_Delay>
            return 1;
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <DHT11_Check_Response+0x32>
        }
    }
    return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020400 	.word	0x40020400

08000710 <DHT11_Read_Bit>:

static uint8_t DHT11_Read_Bit(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]
    while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // HIGH 신호까지 대기
 800071a:	bf00      	nop
 800071c:	2102      	movs	r1, #2
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <DHT11_Read_Bit+0x4c>)
 8000720:	f002 fea8 	bl	8003474 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f8      	beq.n	800071c <DHT11_Read_Bit+0xc>
    DHT11_Delay(40); // HIGH 신호 유지 후, LOW 신호까지 대기
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f7ff ffa2 	bl	8000674 <DHT11_Delay>
    if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) {
 8000730:	2102      	movs	r1, #2
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <DHT11_Read_Bit+0x4c>)
 8000734:	f002 fe9e 	bl	8003474 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <DHT11_Read_Bit+0x32>
        result = 1; // HIGH 신호 감지됨
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // LOW 신호까지 대기
 8000742:	bf00      	nop
 8000744:	2102      	movs	r1, #2
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <DHT11_Read_Bit+0x4c>)
 8000748:	f002 fe94 	bl	8003474 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f8      	bne.n	8000744 <DHT11_Read_Bit+0x34>
    return result;
 8000752:	79fb      	ldrb	r3, [r7, #7]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020400 	.word	0x40020400

08000760 <DHT11_Read_Byte>:

static uint8_t DHT11_Read_Byte(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	e011      	b.n	8000794 <DHT11_Read_Byte+0x34>
        byte |= (DHT11_Read_Bit() << (7 - i));
 8000770:	f7ff ffce 	bl	8000710 <DHT11_Read_Bit>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	b25a      	sxtb	r2, r3
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	4313      	orrs	r3, r2
 800078a:	b25b      	sxtb	r3, r3
 800078c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2b07      	cmp	r3, #7
 8000798:	ddea      	ble.n	8000770 <DHT11_Read_Byte+0x10>
    }
    return byte;
 800079a:	79fb      	ldrb	r3, [r7, #7]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <DHT11_Init>:

void DHT11_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET); // 초기에 HIGH로 설정
 80007a8:	2201      	movs	r2, #1
 80007aa:	2102      	movs	r1, #2
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <DHT11_Init+0x14>)
 80007ae:	f002 fe79 	bl	80034a4 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020400 	.word	0x40020400

080007bc <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11_Data_TypeDef* data) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    uint8_t data_buffer[5];

    DHT11_Start();
 80007c4:	f7ff ff6e 	bl	80006a4 <DHT11_Start>
    if (!DHT11_Check_Response()) {
 80007c8:	f7ff ff84 	bl	80006d4 <DHT11_Check_Response>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <DHT11_ReadData+0x1a>
        return 0; // 응답이 없으면 실패
 80007d2:	2300      	movs	r3, #0
 80007d4:	e030      	b.n	8000838 <DHT11_ReadData+0x7c>
    }

    // 센서로부터 40비트 데이터를 읽음
    for (int i = 0; i < 5; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e00c      	b.n	80007f6 <DHT11_ReadData+0x3a>
        data_buffer[i] = DHT11_Read_Byte();
 80007dc:	f7ff ffc0 	bl	8000760 <DHT11_Read_Byte>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4619      	mov	r1, r3
 80007e4:	f107 020c 	add.w	r2, r7, #12
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	4413      	add	r3, r2
 80007ec:	460a      	mov	r2, r1
 80007ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	ddef      	ble.n	80007dc <DHT11_ReadData+0x20>
    }

    // 데이터 디코딩
    data->humidity_integer = data_buffer[0];
 80007fc:	7b3a      	ldrb	r2, [r7, #12]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	701a      	strb	r2, [r3, #0]
    data->humidity_decimal = data_buffer[1];
 8000802:	7b7a      	ldrb	r2, [r7, #13]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	705a      	strb	r2, [r3, #1]
    data->temperature_integer = data_buffer[2];
 8000808:	7bba      	ldrb	r2, [r7, #14]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	709a      	strb	r2, [r3, #2]
    data->temperature_decimal = data_buffer[3];
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	70da      	strb	r2, [r3, #3]

    // 체크섬 검사
    if (data->humidity_integer + data->humidity_decimal + data->temperature_integer + data->temperature_decimal == data_buffer[4]) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	785b      	ldrb	r3, [r3, #1]
 800081e:	4413      	add	r3, r2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	7892      	ldrb	r2, [r2, #2]
 8000824:	4413      	add	r3, r2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	78d2      	ldrb	r2, [r2, #3]
 800082a:	4413      	add	r3, r2
 800082c:	7c3a      	ldrb	r2, [r7, #16]
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <DHT11_ReadData+0x7a>
        return 1; // 성공적으로 데이터를 읽었음
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <DHT11_ReadData+0x7c>
    }
    return 0; // 데이터 읽기 실패
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fe52 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f816 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 fa0e 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000850:	f000 f9ec 	bl	8000c2c <MX_DMA_Init>
  MX_ETH_Init();
 8000854:	f000 f8f8 	bl	8000a48 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000858:	f000 f9ba 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800085c:	f000 f876 	bl	800094c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000860:	f000 f940 	bl	8000ae4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000864:	f000 f98a 	bl	8000b7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <main+0x34>)
 800086a:	f003 fc53 	bl	8004114 <HAL_TIM_Base_Start>
  app();
 800086e:	f7ff fe8d 	bl	800058c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x32>
 8000874:	20000364 	.word	0x20000364

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fc36 	bl	80060f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <SystemClock_Config+0xcc>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008ec:	23a8      	movs	r3, #168	; 0xa8
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f4:	2307      	movs	r3, #7
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 ff21 	bl	8003744 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000908:	f000 fa7a 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2105      	movs	r1, #5
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f982 	bl	8003c34 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000936:	f000 fa63 	bl	8000e00 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095e:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000960:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <MX_ADC1_Init+0xf0>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000964:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000966:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800096a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <MX_ADC1_Init+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_ADC1_Init+0xec>)
 800097a:	2201      	movs	r2, #1
 800097c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_ADC1_Init+0xec>)
 800098e:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <MX_ADC1_Init+0xf4>)
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_ADC1_Init+0xec>)
 800099a:	2204      	movs	r2, #4
 800099c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ac:	4822      	ldr	r0, [pc, #136]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009ae:	f000 fe33 	bl	8001618 <HAL_ADC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 fa22 	bl	8000e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009bc:	2305      	movs	r3, #5
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80009c4:	2304      	movs	r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009ce:	f001 f8af 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d8:	f000 fa12 	bl	8000e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009dc:	2306      	movs	r3, #6
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <MX_ADC1_Init+0xec>)
 80009ea:	f001 f8a1 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f4:	f000 fa04 	bl	8000e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_ADC1_Init+0xf8>)
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009fc:	2303      	movs	r3, #3
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000a06:	f001 f893 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a10:	f000 f9f6 	bl	8000e00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a14:	2311      	movs	r3, #17
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC1_Init+0xec>)
 8000a22:	f001 f885 	bl	8001b30 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a2c:	f000 f9e8 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000020c 	.word	0x2000020c
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	0f000001 	.word	0x0f000001
 8000a44:	10000012 	.word	0x10000012

08000a48 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_ETH_Init+0x84>)
 8000a4e:	4a20      	ldr	r2, [pc, #128]	; (8000ad0 <MX_ETH_Init+0x88>)
 8000a50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a60:	22e1      	movs	r2, #225	; 0xe1
 8000a62:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_ETH_Init+0x84>)
 8000a78:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MX_ETH_Init+0x8c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_ETH_Init+0x84>)
 8000a7e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a82:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_ETH_Init+0x84>)
 8000a86:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <MX_ETH_Init+0x90>)
 8000a88:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_ETH_Init+0x84>)
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_ETH_Init+0x94>)
 8000a8e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_ETH_Init+0x84>)
 8000a92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a96:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <MX_ETH_Init+0x84>)
 8000a9a:	f002 f817 	bl	8002acc <HAL_ETH_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000aa4:	f000 f9ac 	bl	8000e00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aa8:	2238      	movs	r2, #56	; 0x38
 8000aaa:	2100      	movs	r1, #0
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_ETH_Init+0x98>)
 8000aae:	f005 fb23 	bl	80060f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_ETH_Init+0x98>)
 8000ab4:	2221      	movs	r2, #33	; 0x21
 8000ab6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_ETH_Init+0x98>)
 8000aba:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000abe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_ETH_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002b4 	.word	0x200002b4
 8000ad0:	40028000 	.word	0x40028000
 8000ad4:	200008fc 	.word	0x200008fc
 8000ad8:	2000016c 	.word	0x2000016c
 8000adc:	200000cc 	.word	0x200000cc
 8000ae0:	20000094 	.word	0x20000094

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b2a:	f003 faa3 	bl	8004074 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b34:	f000 f964 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b46:	f003 fb4d 	bl	80041e4 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b50:	f000 f956 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM2_Init+0x94>)
 8000b62:	f003 fd41 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f948 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000364 	.word	0x20000364

08000b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART3_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	f003 fd94 	bl	80046e0 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f91f 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200003ac 	.word	0x200003ac
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	f002 fc78 	bl	8003508 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f8ef 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200003f0 	.word	0x200003f0

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2038      	movs	r0, #56	; 0x38
 8000c54:	f001 fb01 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c58:	2038      	movs	r0, #56	; 0x38
 8000c5a:	f001 fb1a 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	4b5a      	ldr	r3, [pc, #360]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a59      	ldr	r2, [pc, #356]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a52      	ldr	r2, [pc, #328]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b50      	ldr	r3, [pc, #320]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b45      	ldr	r3, [pc, #276]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a44      	ldr	r2, [pc, #272]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b3b      	ldr	r3, [pc, #236]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a36      	ldr	r2, [pc, #216]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <MX_GPIO_Init+0x184>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f244 0183 	movw	r1, #16515	; 0x4083
 8000d30:	4830      	ldr	r0, [pc, #192]	; (8000df4 <MX_GPIO_Init+0x188>)
 8000d32:	f002 fbb7 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <MX_GPIO_Init+0x18c>)
 8000d3c:	f002 fbb2 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4829      	ldr	r0, [pc, #164]	; (8000dfc <MX_GPIO_Init+0x190>)
 8000d58:	f002 f9e0 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|LD3_Pin|LD2_Pin;
 8000d5c:	f244 0383 	movw	r3, #16515	; 0x4083
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481f      	ldr	r0, [pc, #124]	; (8000df4 <MX_GPIO_Init+0x188>)
 8000d76:	f002 f9d1 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4819      	ldr	r0, [pc, #100]	; (8000df8 <MX_GPIO_Init+0x18c>)
 8000d92:	f002 f9c3 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <MX_GPIO_Init+0x18c>)
 8000daa:	f002 f9b7 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <MX_GPIO_Init+0x190>)
 8000dc4:	f002 f9aa 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2017      	movs	r0, #23
 8000dce:	f001 fa44 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dd2:	2017      	movs	r0, #23
 8000dd4:	f001 fa5d 	bl	8002292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2028      	movs	r0, #40	; 0x28
 8000dde:	f001 fa3c 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f001 fa55 	bl	8002292 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40020800 	.word	0x40020800

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <HAL_ADC_MspInit+0xec>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d15f      	bne.n	8000f3e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a2a      	ldr	r2, [pc, #168]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <HAL_ADC_MspInit+0xf0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000eb6:	2360      	movs	r3, #96	; 0x60
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4821      	ldr	r0, [pc, #132]	; (8000f50 <HAL_ADC_MspInit+0xf4>)
 8000eca:	f002 f927 	bl	800311c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <HAL_ADC_MspInit+0xfc>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f14:	f001 f9d8 	bl	80022c8 <HAL_DMA_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f1e:	f7ff ff6f 	bl	8000e00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_ADC_MspInit+0xf8>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2012      	movs	r0, #18
 8000f34:	f001 f991 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f38:	2012      	movs	r0, #18
 8000f3a:	f001 f9aa 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	20000254 	.word	0x20000254
 8000f58:	40026410 	.word	0x40026410

08000f5c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <HAL_ETH_MspInit+0x174>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	f040 80a4 	bne.w	80010c8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	4a36      	ldr	r2, [pc, #216]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 8001032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_ETH_MspInit+0x178>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001044:	2332      	movs	r3, #50	; 0x32
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	481e      	ldr	r0, [pc, #120]	; (80010d8 <HAL_ETH_MspInit+0x17c>)
 8001060:	f002 f85c 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001064:	2386      	movs	r3, #134	; 0x86
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4817      	ldr	r0, [pc, #92]	; (80010dc <HAL_ETH_MspInit+0x180>)
 8001080:	f002 f84c 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001096:	230b      	movs	r3, #11
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	480f      	ldr	r0, [pc, #60]	; (80010e0 <HAL_ETH_MspInit+0x184>)
 80010a2:	f002 f83b 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4808      	ldr	r0, [pc, #32]	; (80010e4 <HAL_ETH_MspInit+0x188>)
 80010c4:	f002 f82a 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40028000 	.word	0x40028000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40021800 	.word	0x40021800

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d10d      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x3c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_TIM_Base_MspInit+0x3c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_TIM_Base_MspInit+0x3c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_UART_MspInit+0x94>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d134      	bne.n	80011b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_UART_MspInit+0x98>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0x98>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001194:	2307      	movs	r3, #7
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_UART_MspInit+0x9c>)
 80011a0:	f001 ffbc 	bl	800311c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2027      	movs	r0, #39	; 0x27
 80011aa:	f001 f856 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ae:	2027      	movs	r0, #39	; 0x27
 80011b0:	f001 f86f 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004800 	.word	0x40004800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e8:	d13f      	bne.n	800126a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_PCD_MspInit+0xac>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <HAL_PCD_MspInit+0xac>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_PCD_MspInit+0xac>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001206:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001218:	230a      	movs	r3, #10
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <HAL_PCD_MspInit+0xb0>)
 8001224:	f001 ff7a 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <HAL_PCD_MspInit+0xb0>)
 800123e:	f001 ff6d 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_PCD_MspInit+0xac>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_PCD_MspInit+0xac>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	6353      	str	r3, [r2, #52]	; 0x34
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_PCD_MspInit+0xac>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_PCD_MspInit+0xac>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_PCD_MspInit+0xac>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f962 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <ADC_IRQHandler+0x10>)
 80012d6:	f000 f9e2 	bl	800169e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000020c 	.word	0x2000020c

080012e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012e8:	2040      	movs	r0, #64	; 0x40
 80012ea:	f002 f8f5 	bl	80034d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USART3_IRQHandler+0x10>)
 80012fa:	f003 fad1 	bl	80048a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200003ac 	.word	0x200003ac

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001310:	f002 f8e2 	bl	80034d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <DMA2_Stream0_IRQHandler+0x10>)
 800131e:	f001 f96b 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000254 	.word	0x20000254

0800132c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00a      	b.n	8001354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133e:	f3af 8000 	nop.w
 8001342:	4601      	mov	r1, r0
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf0      	blt.n	800133e <_read+0x12>
  }

  return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f965 	bl	8000650 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf1      	blt.n	8001378 <_write+0x12>
  }
  return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_close>:

int _close(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c6:	605a      	str	r2, [r3, #4]
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_isatty>:

int _isatty(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f004 feac 	bl	8006194 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20030000 	.word	0x20030000
 8001468:	00000400 	.word	0x00000400
 800146c:	20000904 	.word	0x20000904
 8001470:	20000a58 	.word	0x20000a58

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b4:	4c0b      	ldr	r4, [pc, #44]	; (80014e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014c2:	f7ff ffd7 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f004 fe6b 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ca:	f7ff f9b9 	bl	8000840 <main>
  bx  lr    
 80014ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014dc:	08006d1c 	.word	0x08006d1c
  ldr r2, =_sbss
 80014e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014e4:	20000a58 	.word	0x20000a58

080014e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <CAN1_RX0_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_Init+0x40>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_Init+0x40>)
 8001502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x40>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fe95 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fc74 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fead 	bl	80022ae <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 fe75 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000908 	.word	0x20000908

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000908 	.word	0x20000908

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff ffee 	bl	80015b8 <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffde 	bl	80015b8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e033      	b.n	8001696 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fc10 	bl	8000e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800165e:	f023 0302 	bic.w	r3, r3, #2
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fb92 	bl	8001d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
 8001686:	e001      	b.n	800168c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d049      	beq.n	8001768 <HAL_ADC_IRQHandler+0xca>
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d046      	beq.n	8001768 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d12b      	bne.n	8001758 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d127      	bne.n	8001758 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001720:	2b00      	cmp	r3, #0
 8001722:	d119      	bne.n	8001758 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0220 	bic.w	r2, r2, #32
 8001732:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f9c1 	bl	8001ae0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0212 	mvn.w	r2, #18
 8001766:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d057      	beq.n	800182e <HAL_ADC_IRQHandler+0x190>
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d054      	beq.n	800182e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d139      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d12b      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d124      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d11d      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d105      	bne.n	800181e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fc36 	bl	8002090 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 020c 	mvn.w	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d017      	beq.n	8001874 <HAL_ADC_IRQHandler+0x1d6>
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d014      	beq.n	8001874 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	d10d      	bne.n	8001874 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f94f 	bl	8001b08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f06f 0201 	mvn.w	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001882:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d015      	beq.n	80018b6 <HAL_ADC_IRQHandler+0x218>
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0202 	orr.w	r2, r3, #2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0220 	mvn.w	r2, #32
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f938 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0220 	mvn.w	r2, #32
 80018b4:	601a      	str	r2, [r3, #0]
  }
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Start_DMA+0x1e>
 80018da:	2302      	movs	r3, #2
 80018dc:	e0e9      	b.n	8001ab2 <HAL_ADC_Start_DMA+0x1f2>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d018      	beq.n	8001926 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_ADC_Start_DMA+0x1fc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6d      	ldr	r2, [pc, #436]	; (8001ac0 <HAL_ADC_Start_DMA+0x200>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9a      	lsrs	r2, r3, #18
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001918:	e002      	b.n	8001920 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	3b01      	subs	r3, #1
 800191e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f9      	bne.n	800191a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001934:	d107      	bne.n	8001946 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 80a1 	bne.w	8001a98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001980:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001994:	d106      	bne.n	80019a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f023 0206 	bic.w	r2, r3, #6
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <HAL_ADC_Start_DMA+0x204>)
 80019b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ba:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_ADC_Start_DMA+0x208>)
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_ADC_Start_DMA+0x20c>)
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <HAL_ADC_Start_DMA+0x210>)
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80019e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	334c      	adds	r3, #76	; 0x4c
 8001a02:	4619      	mov	r1, r3
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f000 fd0c 	bl	8002424 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d12a      	bne.n	8001a6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <HAL_ADC_Start_DMA+0x214>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d015      	beq.n	8001a4e <HAL_ADC_Start_DMA+0x18e>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <HAL_ADC_Start_DMA+0x218>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_Start_DMA+0x178>
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_ADC_Start_DMA+0x204>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_ADC_Start_DMA+0x21c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d136      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_ADC_Start_DMA+0x204>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d130      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d129      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e020      	b.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_ADC_Start_DMA+0x214>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d11b      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d114      	bne.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	e00b      	b.n	8001ab0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	08001f8d 	.word	0x08001f8d
 8001acc:	08002047 	.word	0x08002047
 8001ad0:	08002063 	.word	0x08002063
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	40012100 	.word	0x40012100
 8001adc:	40012200 	.word	0x40012200

08001ae0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e113      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x244>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d925      	bls.n	8001ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b05      	subs	r3, #5
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b23      	subs	r3, #35	; 0x23
 8001c5a:	221f      	movs	r2, #31
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	; 0x23
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b41      	subs	r3, #65	; 0x41
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	; 0x41
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_ADC_ConfigChannel+0x250>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a28      	ldr	r2, [pc, #160]	; (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d10f      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d10b      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_ADC_ConfigChannel+0x254>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x1f4>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d122      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_ADC_ConfigChannel+0x258>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x25c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_ADC_ConfigChannel+0x260>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	10000012 	.word	0x10000012
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <ADC_Init+0x1f0>)
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <ADC_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e00f      	b.n	8001e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0202 	bic.w	r2, r2, #2
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7e1b      	ldrb	r3, [r3, #24]
 8001eac:	005a      	lsls	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	035a      	lsls	r2, r3, #13
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	e007      	b.n	8001f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	051a      	lsls	r2, r3, #20
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4a:	025a      	lsls	r2, r3, #9
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	029a      	lsls	r2, r3, #10
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012300 	.word	0x40012300
 8001f88:	0f000001 	.word	0x0f000001

08001f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d13c      	bne.n	8002020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d12b      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d127      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d119      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0220 	bic.w	r2, r2, #32
 8001ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff fd61 	bl	8001ae0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800201e:	e00e      	b.n	800203e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff fd75 	bl	8001b1c <HAL_ADC_ErrorCallback>
}
 8002032:	e004      	b.n	800203e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f7ff fd4d 	bl	8001af4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f043 0204 	orr.w	r2, r3, #4
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fd4a 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff f970 	bl	80015b8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e099      	b.n	8002418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002304:	e00f      	b.n	8002326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002306:	f7ff f957 	bl	80015b8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b05      	cmp	r3, #5
 8002312:	d908      	bls.n	8002326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e078      	b.n	8002418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e8      	bne.n	8002306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_DMA_Init+0x158>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f023 0307 	bic.w	r3, r3, #7
 80023a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d117      	bne.n	80023ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fb01 	bl	80029d4 <DMA_CheckFifoParam>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e6:	2301      	movs	r3, #1
 80023e8:	e016      	b.n	8002418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fab8 	bl	8002968 <DMA_CalcBaseAndBitshift>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f010803f 	.word	0xf010803f

08002424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_DMA_Start_IT+0x26>
 8002446:	2302      	movs	r3, #2
 8002448:	e040      	b.n	80024cc <HAL_DMA_Start_IT+0xa8>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12f      	bne.n	80024be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fa4a 	bl	800290c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0216 	orr.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e005      	b.n	80024ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f7ff f869 	bl	80015b8 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d008      	beq.n	8002506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e052      	b.n	80025ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_Abort+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002556:	e013      	b.n	8002580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002558:	f7ff f82e 	bl	80015b8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b05      	cmp	r3, #5
 8002564:	d90c      	bls.n	8002580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2203      	movs	r2, #3
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e015      	b.n	80025ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e4      	bne.n	8002558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	223f      	movs	r2, #63	; 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00c      	b.n	80025ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002604:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_DMA_IRQHandler+0x248>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8e      	ldr	r2, [pc, #568]	; (8002844 <HAL_DMA_IRQHandler+0x24c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2208      	movs	r2, #8
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2208      	movs	r2, #8
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2201      	movs	r2, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2210      	movs	r2, #16
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03c      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2210      	movs	r2, #16
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e01f      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e016      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2220      	movs	r2, #32
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808f 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8087 	beq.w	8002898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2220      	movs	r2, #32
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d136      	bne.n	8002810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0216 	bic.w	r2, r2, #22
 80027b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x1da>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0208 	bic.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	223f      	movs	r2, #63	; 0x3f
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d07e      	beq.n	8002904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
        }
        return;
 800280e:	e079      	b.n	8002904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01d      	beq.n	800285a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	2b00      	cmp	r3, #0
 8002832:	d031      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e02c      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000
 8002844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e01e      	b.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0210 	bic.w	r2, r2, #16
 8002876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	2b00      	cmp	r3, #0
 800289e:	d032      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2205      	movs	r2, #5
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3301      	adds	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d307      	bcc.n	80028e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f2      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x2cc>
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002904:	bf00      	nop
    }
  }
}
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d108      	bne.n	800294c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800294a:	e007      	b.n	800295c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3b10      	subs	r3, #16
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <DMA_CalcBaseAndBitshift+0x64>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d909      	bls.n	80029aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	1d1a      	adds	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	659a      	str	r2, [r3, #88]	; 0x58
 80029a8:	e007      	b.n	80029ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	aaaaaaab 	.word	0xaaaaaaab
 80029d0:	08006cd0 	.word	0x08006cd0

080029d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11f      	bne.n	8002a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d856      	bhi.n	8002aa2 <DMA_CheckFifoParam+0xce>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <DMA_CheckFifoParam+0x28>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a1f 	.word	0x08002a1f
 8002a04:	08002a0d 	.word	0x08002a0d
 8002a08:	08002aa3 	.word	0x08002aa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d046      	beq.n	8002aa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1c:	e043      	b.n	8002aa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a26:	d140      	bne.n	8002aaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2c:	e03d      	b.n	8002aaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	d121      	bne.n	8002a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d837      	bhi.n	8002aae <DMA_CheckFifoParam+0xda>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x70>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a5b 	.word	0x08002a5b
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002a6d 	.word	0x08002a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e030      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d025      	beq.n	8002ab2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6a:	e022      	b.n	8002ab2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a74:	d11f      	bne.n	8002ab6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a7a:	e01c      	b.n	8002ab6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d903      	bls.n	8002a8a <DMA_CheckFifoParam+0xb6>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d003      	beq.n	8002a90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a88:	e018      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8e:	e015      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00e      	beq.n	8002aba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e00b      	b.n	8002aba <DMA_CheckFifoParam+0xe6>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e00a      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e008      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e006      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e004      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
    }
  } 
  
  return status; 
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06c      	b.n	8002bb8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2223      	movs	r2, #35	; 0x23
 8002aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fa33 	bl	8000f5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_ETH_Init+0xf4>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <HAL_ETH_Init+0xf4>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_ETH_Init+0xf4>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_ETH_Init+0xf8>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <HAL_ETH_Init+0xf8>)
 8002b18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b1c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b1e:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_ETH_Init+0xf8>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4927      	ldr	r1, [pc, #156]	; (8002bc4 <HAL_ETH_Init+0xf8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_ETH_Init+0xf8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7fe fd36 	bl	80015b8 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b4e:	e011      	b.n	8002b74 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b50:	f7fe fd32 	bl	80015b8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b5e:	d909      	bls.n	8002b74 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2204      	movs	r2, #4
 8002b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	22e0      	movs	r2, #224	; 0xe0
 8002b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e021      	b.n	8002bb8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e4      	bne.n	8002b50 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f958 	bl	8002e3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9ff 	bl	8002f90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fa55 	bl	8003042 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f9bd 	bl	8002f20 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40013800 	.word	0x40013800

08002bc8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <ETH_SetMACConfig+0x15c>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7c1b      	ldrb	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <ETH_SetMACConfig+0x28>
 8002bea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bee:	e000      	b.n	8002bf2 <ETH_SetMACConfig+0x2a>
 8002bf0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7c5b      	ldrb	r3, [r3, #17]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <ETH_SetMACConfig+0x38>
 8002bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bfe:	e000      	b.n	8002c02 <ETH_SetMACConfig+0x3a>
 8002c00:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	7fdb      	ldrb	r3, [r3, #31]
 8002c0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	7f92      	ldrb	r2, [r2, #30]
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d102      	bne.n	8002c26 <ETH_SetMACConfig+0x5e>
 8002c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c24:	e000      	b.n	8002c28 <ETH_SetMACConfig+0x60>
 8002c26:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7f1b      	ldrb	r3, [r3, #28]
 8002c2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	791b      	ldrb	r3, [r3, #4]
 8002c3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d102      	bne.n	8002c50 <ETH_SetMACConfig+0x88>
 8002c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4e:	e000      	b.n	8002c52 <ETH_SetMACConfig+0x8a>
 8002c50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	7bdb      	ldrb	r3, [r3, #15]
 8002c58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe fca4 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d101      	bne.n	8002cb6 <ETH_SetMACConfig+0xee>
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	e000      	b.n	8002cb8 <ETH_SetMACConfig+0xf0>
 8002cb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cb8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002cc6:	2a01      	cmp	r2, #1
 8002cc8:	d101      	bne.n	8002cce <ETH_SetMACConfig+0x106>
 8002cca:	2208      	movs	r2, #8
 8002ccc:	e000      	b.n	8002cd0 <ETH_SetMACConfig+0x108>
 8002cce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002cd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002cd8:	2a01      	cmp	r2, #1
 8002cda:	d101      	bne.n	8002ce0 <ETH_SetMACConfig+0x118>
 8002cdc:	2204      	movs	r2, #4
 8002cde:	e000      	b.n	8002ce2 <ETH_SetMACConfig+0x11a>
 8002ce0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ce2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002cea:	2a01      	cmp	r2, #1
 8002cec:	d101      	bne.n	8002cf2 <ETH_SetMACConfig+0x12a>
 8002cee:	2202      	movs	r2, #2
 8002cf0:	e000      	b.n	8002cf4 <ETH_SetMACConfig+0x12c>
 8002cf2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7fe fc5f 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	619a      	str	r2, [r3, #24]
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	ff20810f 	.word	0xff20810f

08002d28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <ETH_SetDMAConfig+0x110>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7b1b      	ldrb	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <ETH_SetDMAConfig+0x2c>
 8002d4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d52:	e000      	b.n	8002d56 <ETH_SetDMAConfig+0x2e>
 8002d54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	7b5b      	ldrb	r3, [r3, #13]
 8002d5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	7f52      	ldrb	r2, [r2, #29]
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d102      	bne.n	8002d6c <ETH_SetDMAConfig+0x44>
 8002d66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d6a:	e000      	b.n	8002d6e <ETH_SetDMAConfig+0x46>
 8002d6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7b9b      	ldrb	r3, [r3, #14]
 8002d74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
 8002d82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	7f9b      	ldrb	r3, [r3, #30]
 8002d8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dac:	461a      	mov	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f7fe fc06 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	791b      	ldrb	r3, [r3, #4]
 8002dd6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ddc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002de2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002de8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002df0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002df2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002dfa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fe fbd7 	bl	80015d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	f8de3f23 	.word	0xf8de3f23

08002e3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0a6      	sub	sp, #152	; 0x98
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002eb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff fe86 	bl	8002bc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ef2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff08 	bl	8002d28 <ETH_SetDMAConfig>
}
 8002f18:	bf00      	nop
 8002f1a:	3798      	adds	r7, #152	; 0x98
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3305      	adds	r3, #5
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	3204      	adds	r2, #4
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <ETH_MACAddressConfig+0x68>)
 8002f42:	4413      	add	r3, r2
 8002f44:	461a      	mov	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3303      	adds	r3, #3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	061a      	lsls	r2, r3, #24
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3302      	adds	r3, #2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	4313      	orrs	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <ETH_MACAddressConfig+0x6c>)
 8002f72:	4413      	add	r3, r2
 8002f74:	461a      	mov	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6013      	str	r3, [r2, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40028040 	.word	0x40028040
 8002f8c:	40028044 	.word	0x40028044

08002f90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e03e      	b.n	800301c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	3206      	adds	r2, #6
 8002fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d80c      	bhi.n	8003000 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68d9      	ldr	r1, [r3, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	e004      	b.n	800300a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d9bd      	bls.n	8002f9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	611a      	str	r2, [r3, #16]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e046      	b.n	80030de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6919      	ldr	r1, [r3, #16]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800308c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003094:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	3212      	adds	r2, #18
 80030aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d80c      	bhi.n	80030ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6919      	ldr	r1, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	e004      	b.n	80030d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d9b5      	bls.n	8003050 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	60da      	str	r2, [r3, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e177      	b.n	8003428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8166 	bne.w	8003422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d005      	beq.n	800316e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	2b02      	cmp	r3, #2
 800316c:	d130      	bne.n	80031d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a4:	2201      	movs	r2, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0201 	and.w	r2, r3, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d017      	beq.n	800320c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d123      	bne.n	8003260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0203 	and.w	r2, r3, #3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80c0 	beq.w	8003422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_GPIO_Init+0x328>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d037      	beq.n	800335a <HAL_GPIO_Init+0x23e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_GPIO_Init+0x330>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_GPIO_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_GPIO_Init+0x334>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <HAL_GPIO_Init+0x236>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a55      	ldr	r2, [pc, #340]	; (8003454 <HAL_GPIO_Init+0x338>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d025      	beq.n	800334e <HAL_GPIO_Init+0x232>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_GPIO_Init+0x33c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_GPIO_Init+0x340>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x22a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x344>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_Init+0x348>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x350>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x21a>
 8003332:	2309      	movs	r3, #9
 8003334:	e012      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003336:	230a      	movs	r3, #10
 8003338:	e010      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333a:	2308      	movs	r3, #8
 800333c:	e00e      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333e:	2307      	movs	r3, #7
 8003340:	e00c      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003342:	2306      	movs	r3, #6
 8003344:	e00a      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003346:	2305      	movs	r3, #5
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334a:	2304      	movs	r3, #4
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x240>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	; (8003444 <HAL_GPIO_Init+0x328>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_GPIO_Init+0x354>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a34      	ldr	r2, [pc, #208]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_GPIO_Init+0x354>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f ae84 	bls.w	8003138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40021400 	.word	0x40021400
 8003460:	40021800 	.word	0x40021800
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40022000 	.word	0x40022000
 800346c:	40022400 	.word	0x40022400
 8003470:	40013c00 	.word	0x40013c00

08003474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e001      	b.n	8003496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
 80034b0:	4613      	mov	r3, r2
 80034b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b4:	787b      	ldrb	r3, [r7, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c0:	e003      	b.n	80034ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ee:	4a05      	ldr	r2, [pc, #20]	; (8003504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f89a 	bl	8000630 <HAL_GPIO_EXTI_Callback>
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40013c00 	.word	0x40013c00

08003508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350a:	b08f      	sub	sp, #60	; 0x3c
 800350c:	af0a      	add	r7, sp, #40	; 0x28
 800350e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e10f      	b.n	800373a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7fd fe47 	bl	80011c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2203      	movs	r2, #3
 800353e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f002 f936 	bl	80057ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	687e      	ldr	r6, [r7, #4]
 8003566:	466d      	mov	r5, sp
 8003568:	f106 0410 	add.w	r4, r6, #16
 800356c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003578:	e885 0003 	stmia.w	r5, {r0, r1}
 800357c:	1d33      	adds	r3, r6, #4
 800357e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f002 f8c1 	bl	8005708 <USB_CoreInit>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 f924 	bl	80057ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e04a      	b.n	8003640 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	333d      	adds	r3, #61	; 0x3d
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	; 0x3c
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	b298      	uxth	r0, r3
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	4602      	mov	r2, r0
 80035e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3340      	adds	r3, #64	; 0x40
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3348      	adds	r3, #72	; 0x48
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	334c      	adds	r3, #76	; 0x4c
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3354      	adds	r3, #84	; 0x54
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3301      	adds	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3af      	bcc.n	80035aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e044      	b.n	80036da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3b5      	bcc.n	8003650 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	687e      	ldr	r6, [r7, #4]
 80036ec:	466d      	mov	r5, sp
 80036ee:	f106 0410 	add.w	r4, r6, #16
 80036f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003702:	1d33      	adds	r3, r6, #4
 8003704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003706:	6838      	ldr	r0, [r7, #0]
 8003708:	f002 f8bc 	bl	8005884 <USB_DevInit>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e00d      	b.n	800373a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fa87 	bl	8005c46 <USB_DevDisconnect>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e267      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d075      	beq.n	800384e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003762:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d00c      	beq.n	8003788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b85      	ldr	r3, [pc, #532]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003776:	2b08      	cmp	r3, #8
 8003778:	d112      	bne.n	80037a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377a:	4b82      	ldr	r3, [pc, #520]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003786:	d10b      	bne.n	80037a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d05b      	beq.n	800384c <HAL_RCC_OscConfig+0x108>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d157      	bne.n	800384c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e242      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d106      	bne.n	80037b8 <HAL_RCC_OscConfig+0x74>
 80037aa:	4b76      	ldr	r3, [pc, #472]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e01d      	b.n	80037f4 <HAL_RCC_OscConfig+0xb0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x98>
 80037c2:	4b70      	ldr	r3, [pc, #448]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6f      	ldr	r2, [pc, #444]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6c      	ldr	r2, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0xb0>
 80037dc:	4b69      	ldr	r3, [pc, #420]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a68      	ldr	r2, [pc, #416]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b66      	ldr	r3, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a65      	ldr	r2, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd fedc 	bl	80015b8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd fed8 	bl	80015b8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e207      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0xc0>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fd fec8 	bl	80015b8 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fd fec4 	bl	80015b8 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1f3      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0xe8>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d063      	beq.n	8003922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385a:	4b4a      	ldr	r3, [pc, #296]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386e:	2b08      	cmp	r3, #8
 8003870:	d11c      	bne.n	80038ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003872:	4b44      	ldr	r3, [pc, #272]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d116      	bne.n	80038ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_RCC_OscConfig+0x152>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e1c7      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4937      	ldr	r1, [pc, #220]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	e03a      	b.n	8003922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCC_OscConfig+0x244>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fe7d 	bl	80015b8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fd fe79 	bl	80015b8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1a8      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4925      	ldr	r1, [pc, #148]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
 80038f4:	e015      	b.n	8003922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x244>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fe5c 	bl	80015b8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fd fe58 	bl	80015b8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e187      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d016      	beq.n	8003964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_RCC_OscConfig+0x248>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fd fe3c 	bl	80015b8 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003944:	f7fd fe38 	bl	80015b8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e167      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x240>)
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x200>
 8003962:	e01b      	b.n	800399c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003964:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_OscConfig+0x248>)
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fd fe25 	bl	80015b8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	e00e      	b.n	8003990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd fe21 	bl	80015b8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d907      	bls.n	8003990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e150      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
 8003984:	40023800 	.word	0x40023800
 8003988:	42470000 	.word	0x42470000
 800398c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ea      	bne.n	8003972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8097 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ae:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4b7d      	ldr	r3, [pc, #500]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a7c      	ldr	r2, [pc, #496]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e6:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a73      	ldr	r2, [pc, #460]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f2:	f7fd fde1 	bl	80015b8 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fd fddd 	bl	80015b8 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e10c      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	; (8003bb8 <HAL_RCC_OscConfig+0x474>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x2ea>
 8003a20:	4b64      	ldr	r3, [pc, #400]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a63      	ldr	r2, [pc, #396]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x324>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x30c>
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5e      	ldr	r2, [pc, #376]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a5b      	ldr	r2, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0x324>
 8003a50:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a57      	ldr	r2, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5c:	4b55      	ldr	r3, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a54      	ldr	r2, [pc, #336]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f023 0304 	bic.w	r3, r3, #4
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fda2 	bl	80015b8 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd fd9e 	bl	80015b8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0cb      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8e:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ee      	beq.n	8003a78 <HAL_RCC_OscConfig+0x334>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fd8c 	bl	80015b8 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fd88 	bl	80015b8 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0b5      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aba:	4b3e      	ldr	r3, [pc, #248]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a1 	beq.w	8003c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae2:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d05c      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d141      	bne.n	8003b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd fd5c 	bl	80015b8 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fd58 	bl	80015b8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e087      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	019b      	lsls	r3, r3, #6
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	491b      	ldr	r1, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd fd31 	bl	80015b8 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd fd2d 	bl	80015b8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e05c      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x416>
 8003b78:	e054      	b.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd fd1a 	bl	80015b8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fd fd16 	bl	80015b8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e045      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x444>
 8003ba6:	e03d      	b.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e038      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x4ec>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d028      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d121      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d11a      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d111      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0cc      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c48:	4b68      	ldr	r3, [pc, #416]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d90c      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0b8      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c88:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca0:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	4a52      	ldr	r2, [pc, #328]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	494d      	ldr	r1, [pc, #308]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d044      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d119      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e06f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e067      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d12:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0203 	bic.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4934      	ldr	r1, [pc, #208]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d24:	f7fd fc48 	bl	80015b8 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fd fc44 	bl	80015b8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e04f      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 020c 	and.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1eb      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d20c      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e032      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4916      	ldr	r1, [pc, #88]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	490e      	ldr	r1, [pc, #56]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dba:	f000 f821 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	5ccb      	ldrb	r3, [r1, r3]
 8003dce:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_ClockConfig+0x1c8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd fba8 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023c00 	.word	0x40023c00
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08006cb8 	.word	0x08006cb8
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	20000004 	.word	0x20000004

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b094      	sub	sp, #80	; 0x50
 8003e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	2300      	movs	r3, #0
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d00d      	beq.n	8003e40 <HAL_RCC_GetSysClockFreq+0x40>
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	f200 80e1 	bhi.w	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x34>
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d003      	beq.n	8003e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e32:	e0db      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b73      	ldr	r3, [pc, #460]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e38:	e0db      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e3e:	e0d8      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e40:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d063      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	0159      	lsls	r1, r3, #5
 8003e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e84:	0150      	lsls	r0, r2, #5
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	1a51      	subs	r1, r2, r1
 8003e8e:	6139      	str	r1, [r7, #16]
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb63 0301 	sbc.w	r3, r3, r1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	018b      	lsls	r3, r1, #6
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eae:	4651      	mov	r1, sl
 8003eb0:	018a      	lsls	r2, r1, #6
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb8:	4659      	mov	r1, fp
 8003eba:	eb63 0901 	sbc.w	r9, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb18 0303 	adds.w	r3, r8, r3
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	462b      	mov	r3, r5
 8003ee0:	eb49 0303 	adc.w	r3, r9, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	024b      	lsls	r3, r1, #9
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003efc:	4621      	mov	r1, r4
 8003efe:	024a      	lsls	r2, r1, #9
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	2200      	movs	r2, #0
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f10:	f7fc f9be 	bl	8000290 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4613      	mov	r3, r2
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	e058      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	4611      	mov	r1, r2
 8003f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f38:	4642      	mov	r2, r8
 8003f3a:	464b      	mov	r3, r9
 8003f3c:	f04f 0000 	mov.w	r0, #0
 8003f40:	f04f 0100 	mov.w	r1, #0
 8003f44:	0159      	lsls	r1, r3, #5
 8003f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4a:	0150      	lsls	r0, r2, #5
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4641      	mov	r1, r8
 8003f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f70:	ebb2 040a 	subs.w	r4, r2, sl
 8003f74:	eb63 050b 	sbc.w	r5, r3, fp
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	00eb      	lsls	r3, r5, #3
 8003f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f86:	00e2      	lsls	r2, r4, #3
 8003f88:	4614      	mov	r4, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	18e3      	adds	r3, r4, r3
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	464b      	mov	r3, r9
 8003f94:	eb45 0303 	adc.w	r3, r5, r3
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	028b      	lsls	r3, r1, #10
 8003faa:	4621      	mov	r1, r4
 8003fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	028a      	lsls	r2, r1, #10
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	61fa      	str	r2, [r7, #28]
 8003fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc4:	f7fc f964 	bl	8000290 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4613      	mov	r3, r2
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3750      	adds	r7, #80	; 0x50
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_GetHCLKFreq+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000

08004024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004028:	f7ff fff0 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	08006cc8 	.word	0x08006cc8

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004050:	f7ff ffdc 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0b5b      	lsrs	r3, r3, #13
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	08006cc8 	.word	0x08006cc8

08004074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd f824 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f000 f95e 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e046      	b.n	80041ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <HAL_TIM_Base_Start+0xb4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004146:	d01d      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_TIM_Base_Start+0xb8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_TIM_Base_Start+0xbc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_TIM_Base_Start+0xc0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_TIM_Base_Start+0xc4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_TIM_Base_Start+0xc8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIM_Base_Start+0x70>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIM_Base_Start+0xcc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d111      	bne.n	80041a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b06      	cmp	r3, #6
 8004194:	d010      	beq.n	80041b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a6:	e007      	b.n	80041b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40010400 	.word	0x40010400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40001800 	.word	0x40001800

080041e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_TIM_ConfigClockSource+0x1c>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e0b4      	b.n	800436a <HAL_TIM_ConfigClockSource+0x186>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800421e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d03e      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0xd4>
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	f200 8087 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	f000 8086 	beq.w	8004356 <HAL_TIM_ConfigClockSource+0x172>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d87f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d01a      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xa6>
 8004254:	2b70      	cmp	r3, #112	; 0x70
 8004256:	d87b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d050      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x11a>
 800425c:	2b60      	cmp	r3, #96	; 0x60
 800425e:	d877      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d03c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0xfa>
 8004264:	2b50      	cmp	r3, #80	; 0x50
 8004266:	d873      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d058      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x13a>
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d86f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d064      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d86b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d060      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 800427c:	2b20      	cmp	r3, #32
 800427e:	d867      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05c      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004284:	2b10      	cmp	r3, #16
 8004286:	d05a      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004288:	e062      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f000 f985 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
      break;
 80042b6:	e04f      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6899      	ldr	r1, [r3, #8]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f000 f96e 	bl	80045a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042da:	609a      	str	r2, [r3, #8]
      break;
 80042dc:	e03c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 f8e2 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2150      	movs	r1, #80	; 0x50
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f93b 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 80042fc:	e02c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	461a      	mov	r2, r3
 800430c:	f000 f901 	bl	8004512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2160      	movs	r1, #96	; 0x60
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f92b 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 800431c:	e01c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	461a      	mov	r2, r3
 800432c:	f000 f8c2 	bl	80044b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2140      	movs	r1, #64	; 0x40
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f91b 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 800433c:	e00c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f000 f912 	bl	8004572 <TIM_ITRx_SetConfig>
      break;
 800434e:	e003      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	e000      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a40      	ldr	r2, [pc, #256]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <TIM_Base_SetConfig+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2f      	ldr	r2, [pc, #188]	; (8004488 <TIM_Base_SetConfig+0x114>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	; (800448c <TIM_Base_SetConfig+0x118>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a28      	ldr	r2, [pc, #160]	; (800449c <TIM_Base_SetConfig+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <TIM_Base_SetConfig+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <TIM_Base_SetConfig+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <TIM_Base_SetConfig+0x134>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <TIM_Base_SetConfig+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <TIM_Base_SetConfig+0x13c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d103      	bne.n	8004474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	615a      	str	r2, [r3, #20]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	40001800 	.word	0x40001800
 80044ac:	40001c00 	.word	0x40001c00
 80044b0:	40002000 	.word	0x40002000

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800454e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	f043 0307 	orr.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e05a      	b.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d022      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d01d      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10c      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40010400 	.word	0x40010400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40001800 	.word	0x40001800

080046e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e03f      	b.n	8004772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fd0e 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fd7b 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af02      	add	r7, sp, #8
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d17c      	bne.n	8004894 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit+0x2c>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e075      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x3e>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e06e      	b.n	8004896 <HAL_UART_Transmit+0x11c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fc fef3 	bl	80015b8 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d108      	bne.n	80047fc <HAL_UART_Transmit+0x82>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e003      	b.n	8004804 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800480c:	e02a      	b.n	8004864 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 faf9 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e036      	b.n	8004896 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e007      	b.n	8004856 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	3301      	adds	r3, #1
 8004854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1cf      	bne.n	800480e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fac9 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b0ba      	sub	sp, #232	; 0xe8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_UART_IRQHandler+0x66>
 80048f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fbd3 	bl	80050aa <UART_Receive_IT>
      return;
 8004904:	e256      	b.n	8004db4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80de 	beq.w	8004acc <HAL_UART_IRQHandler+0x22c>
 8004910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800491c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80d1 	beq.w	8004acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_UART_IRQHandler+0xae>
 8004936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_UART_IRQHandler+0xd2>
 800495a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0202 	orr.w	r2, r3, #2
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_UART_IRQHandler+0xf6>
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <HAL_UART_IRQHandler+0x126>
 80049a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d105      	bne.n	80049ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0208 	orr.w	r2, r3, #8
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 81ed 	beq.w	8004daa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_UART_IRQHandler+0x14e>
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb5e 	bl	80050aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d103      	bne.n	8004a1a <HAL_UART_IRQHandler+0x17a>
 8004a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d04f      	beq.n	8004aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa66 	bl	8004eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d141      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3314      	adds	r3, #20
 8004a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1d9      	bne.n	8004a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d013      	beq.n	8004aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	4a7d      	ldr	r2, [pc, #500]	; (8004c7c <HAL_UART_IRQHandler+0x3dc>)
 8004a88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fd fd90 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	e00e      	b.n	8004ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f99a 	bl	8004de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f996 	bl	8004de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e006      	b.n	8004ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f992 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ac6:	e170      	b.n	8004daa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	bf00      	nop
    return;
 8004aca:	e16e      	b.n	8004daa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	f040 814a 	bne.w	8004d6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8143 	beq.w	8004d6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 813c 	beq.w	8004d6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	f040 80b4 	bne.w	8004c80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8140 	beq.w	8004dae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b36:	429a      	cmp	r2, r3
 8004b38:	f080 8139 	bcs.w	8004dae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	f000 8088 	beq.w	8004c62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1d9      	bne.n	8004b52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e1      	bne.n	8004b9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3314      	adds	r3, #20
 8004be0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e3      	bne.n	8004bda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c32:	f023 0310 	bic.w	r3, r3, #16
 8004c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e3      	bne.n	8004c20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd fc39 	bl	80024d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8c0 	bl	8004df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c78:	e099      	b.n	8004dae <HAL_UART_IRQHandler+0x50e>
 8004c7a:	bf00      	nop
 8004c7c:	08004fb3 	.word	0x08004fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 808b 	beq.w	8004db2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8086 	beq.w	8004db2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cca:	647a      	str	r2, [r7, #68]	; 0x44
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e3      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3314      	adds	r3, #20
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	623b      	str	r3, [r7, #32]
   return(result);
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3314      	adds	r3, #20
 8004cfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d02:	633a      	str	r2, [r7, #48]	; 0x30
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0310 	bic.w	r3, r3, #16
 8004d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d48:	61fa      	str	r2, [r7, #28]
 8004d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	69b9      	ldr	r1, [r7, #24]
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	e841 2300 	strex	r3, r2, [r1]
 8004d54:	617b      	str	r3, [r7, #20]
   return(result);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e3      	bne.n	8004d24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f848 	bl	8004df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d68:	e023      	b.n	8004db2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_UART_IRQHandler+0x4ea>
 8004d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f929 	bl	8004fda <UART_Transmit_IT>
    return;
 8004d88:	e014      	b.n	8004db4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00e      	beq.n	8004db4 <HAL_UART_IRQHandler+0x514>
 8004d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f969 	bl	800507a <UART_EndTransmit_IT>
    return;
 8004da8:	e004      	b.n	8004db4 <HAL_UART_IRQHandler+0x514>
    return;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <HAL_UART_IRQHandler+0x514>
      return;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <HAL_UART_IRQHandler+0x514>
      return;
 8004db2:	bf00      	nop
  }
}
 8004db4:	37e8      	adds	r7, #232	; 0xe8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop

08004dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b090      	sub	sp, #64	; 0x40
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	e050      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d04c      	beq.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e30:	f7fc fbc2 	bl	80015b8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d241      	bcs.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e60:	637a      	str	r2, [r7, #52]	; 0x34
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3314      	adds	r3, #20
 8004e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e94:	623a      	str	r2, [r7, #32]
 8004e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e00f      	b.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d09f      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3740      	adds	r7, #64	; 0x40
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b095      	sub	sp, #84	; 0x54
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f14:	643a      	str	r2, [r7, #64]	; 0x40
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e5      	bne.n	8004ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d119      	bne.n	8004f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f84:	61ba      	str	r2, [r7, #24]
 8004f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6979      	ldr	r1, [r7, #20]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	613b      	str	r3, [r7, #16]
   return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fa6:	bf00      	nop
 8004fa8:	3754      	adds	r7, #84	; 0x54
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff ff09 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b21      	cmp	r3, #33	; 0x21
 8004fec:	d13e      	bne.n	800506c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d114      	bne.n	8005022 <UART_Transmit_IT+0x48>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	1c9a      	adds	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	621a      	str	r2, [r3, #32]
 8005020:	e008      	b.n	8005034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6211      	str	r1, [r2, #32]
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29b      	uxth	r3, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4619      	mov	r1, r3
 8005042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fe8e 	bl	8004dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b08c      	sub	sp, #48	; 0x30
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b22      	cmp	r3, #34	; 0x22
 80050bc:	f040 80ab 	bne.w	8005216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d117      	bne.n	80050fa <UART_Receive_IT+0x50>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
 80050f8:	e026      	b.n	8005148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d007      	beq.n	800511e <UART_Receive_IT+0x74>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <UART_Receive_IT+0x82>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e008      	b.n	800513e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4619      	mov	r1, r3
 8005156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005158:	2b00      	cmp	r3, #0
 800515a:	d15a      	bne.n	8005212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0220 	bic.w	r2, r2, #32
 800516a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	2b01      	cmp	r3, #1
 800519a:	d135      	bne.n	8005208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	613b      	str	r3, [r7, #16]
   return(result);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f023 0310 	bic.w	r3, r3, #16
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	623a      	str	r2, [r7, #32]
 80051c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e5      	bne.n	80051a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10a      	bne.n	80051fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fdf9 	bl	8004df8 <HAL_UARTEx_RxEventCallback>
 8005206:	e002      	b.n	800520e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fde1 	bl	8004dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e002      	b.n	8005218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3730      	adds	r7, #48	; 0x30
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005224:	b0c0      	sub	sp, #256	; 0x100
 8005226:	af00      	add	r7, sp, #0
 8005228:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	68d9      	ldr	r1, [r3, #12]
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	431a      	orrs	r2, r3
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005278:	f021 010c 	bic.w	r1, r1, #12
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005286:	430b      	orrs	r3, r1
 8005288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	6999      	ldr	r1, [r3, #24]
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	ea40 0301 	orr.w	r3, r0, r1
 80052a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b8f      	ldr	r3, [pc, #572]	; (80054ec <UART_SetConfig+0x2cc>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d005      	beq.n	80052c0 <UART_SetConfig+0xa0>
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <UART_SetConfig+0x2d0>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d104      	bne.n	80052ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe fec4 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 80052c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052c8:	e003      	b.n	80052d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fe feab 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 80052ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	f040 810c 	bne.w	80054f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052fa:	415b      	adcs	r3, r3
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005302:	4621      	mov	r1, r4
 8005304:	eb12 0801 	adds.w	r8, r2, r1
 8005308:	4629      	mov	r1, r5
 800530a:	eb43 0901 	adc.w	r9, r3, r1
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800531a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005322:	4690      	mov	r8, r2
 8005324:	4699      	mov	r9, r3
 8005326:	4623      	mov	r3, r4
 8005328:	eb18 0303 	adds.w	r3, r8, r3
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005330:	462b      	mov	r3, r5
 8005332:	eb49 0303 	adc.w	r3, r9, r3
 8005336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005346:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800534a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800534e:	460b      	mov	r3, r1
 8005350:	18db      	adds	r3, r3, r3
 8005352:	653b      	str	r3, [r7, #80]	; 0x50
 8005354:	4613      	mov	r3, r2
 8005356:	eb42 0303 	adc.w	r3, r2, r3
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
 800535c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005364:	f7fa ff94 	bl	8000290 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4b61      	ldr	r3, [pc, #388]	; (80054f4 <UART_SetConfig+0x2d4>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	011c      	lsls	r4, r3, #4
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005380:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005390:	415b      	adcs	r3, r3
 8005392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005398:	4641      	mov	r1, r8
 800539a:	eb12 0a01 	adds.w	sl, r2, r1
 800539e:	4649      	mov	r1, r9
 80053a0:	eb43 0b01 	adc.w	fp, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b8:	4692      	mov	sl, r2
 80053ba:	469b      	mov	fp, r3
 80053bc:	4643      	mov	r3, r8
 80053be:	eb1a 0303 	adds.w	r3, sl, r3
 80053c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c6:	464b      	mov	r3, r9
 80053c8:	eb4b 0303 	adc.w	r3, fp, r3
 80053cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053e4:	460b      	mov	r3, r1
 80053e6:	18db      	adds	r3, r3, r3
 80053e8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ea:	4613      	mov	r3, r2
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	647b      	str	r3, [r7, #68]	; 0x44
 80053f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053fa:	f7fa ff49 	bl	8000290 <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4611      	mov	r1, r2
 8005404:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <UART_SetConfig+0x2d4>)
 8005406:	fba3 2301 	umull	r2, r3, r3, r1
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	1acb      	subs	r3, r1, r3
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800541a:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <UART_SetConfig+0x2d4>)
 800541c:	fba3 2302 	umull	r2, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005428:	441c      	add	r4, r3
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	63b9      	str	r1, [r7, #56]	; 0x38
 8005444:	415b      	adcs	r3, r3
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800544c:	4641      	mov	r1, r8
 800544e:	1851      	adds	r1, r2, r1
 8005450:	6339      	str	r1, [r7, #48]	; 0x30
 8005452:	4649      	mov	r1, r9
 8005454:	414b      	adcs	r3, r1
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005464:	4659      	mov	r1, fp
 8005466:	00cb      	lsls	r3, r1, #3
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546e:	4651      	mov	r1, sl
 8005470:	00ca      	lsls	r2, r1, #3
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	4603      	mov	r3, r0
 8005478:	4642      	mov	r2, r8
 800547a:	189b      	adds	r3, r3, r2
 800547c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005480:	464b      	mov	r3, r9
 8005482:	460a      	mov	r2, r1
 8005484:	eb42 0303 	adc.w	r3, r2, r3
 8005488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005498:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800549c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054a0:	460b      	mov	r3, r1
 80054a2:	18db      	adds	r3, r3, r3
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a6:	4613      	mov	r3, r2
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054b6:	f7fa feeb 	bl	8000290 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <UART_SetConfig+0x2d4>)
 80054c0:	fba3 1302 	umull	r1, r3, r3, r2
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	2164      	movs	r1, #100	; 0x64
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	3332      	adds	r3, #50	; 0x32
 80054d2:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <UART_SetConfig+0x2d4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	f003 0207 	and.w	r2, r3, #7
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4422      	add	r2, r4
 80054e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e8:	e106      	b.n	80056f8 <UART_SetConfig+0x4d8>
 80054ea:	bf00      	nop
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40011400 	.word	0x40011400
 80054f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005502:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800550a:	4642      	mov	r2, r8
 800550c:	464b      	mov	r3, r9
 800550e:	1891      	adds	r1, r2, r2
 8005510:	6239      	str	r1, [r7, #32]
 8005512:	415b      	adcs	r3, r3
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800551a:	4641      	mov	r1, r8
 800551c:	1854      	adds	r4, r2, r1
 800551e:	4649      	mov	r1, r9
 8005520:	eb43 0501 	adc.w	r5, r3, r1
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	00eb      	lsls	r3, r5, #3
 800552e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005532:	00e2      	lsls	r2, r4, #3
 8005534:	4614      	mov	r4, r2
 8005536:	461d      	mov	r5, r3
 8005538:	4643      	mov	r3, r8
 800553a:	18e3      	adds	r3, r4, r3
 800553c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005540:	464b      	mov	r3, r9
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005566:	4629      	mov	r1, r5
 8005568:	008b      	lsls	r3, r1, #2
 800556a:	4621      	mov	r1, r4
 800556c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005570:	4621      	mov	r1, r4
 8005572:	008a      	lsls	r2, r1, #2
 8005574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005578:	f7fa fe8a 	bl	8000290 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b60      	ldr	r3, [pc, #384]	; (8005704 <UART_SetConfig+0x4e4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	61b9      	str	r1, [r7, #24]
 80055a4:	415b      	adcs	r3, r3
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ac:	4641      	mov	r1, r8
 80055ae:	1851      	adds	r1, r2, r1
 80055b0:	6139      	str	r1, [r7, #16]
 80055b2:	4649      	mov	r1, r9
 80055b4:	414b      	adcs	r3, r1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c4:	4659      	mov	r1, fp
 80055c6:	00cb      	lsls	r3, r1, #3
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ce:	4651      	mov	r1, sl
 80055d0:	00ca      	lsls	r2, r1, #3
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	4642      	mov	r2, r8
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055e0:	464b      	mov	r3, r9
 80055e2:	460a      	mov	r2, r1
 80055e4:	eb42 0303 	adc.w	r3, r2, r3
 80055e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005604:	4649      	mov	r1, r9
 8005606:	008b      	lsls	r3, r1, #2
 8005608:	4641      	mov	r1, r8
 800560a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560e:	4641      	mov	r1, r8
 8005610:	008a      	lsls	r2, r1, #2
 8005612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005616:	f7fa fe3b 	bl	8000290 <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4611      	mov	r1, r2
 8005620:	4b38      	ldr	r3, [pc, #224]	; (8005704 <UART_SetConfig+0x4e4>)
 8005622:	fba3 2301 	umull	r2, r3, r3, r1
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	2264      	movs	r2, #100	; 0x64
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	1acb      	subs	r3, r1, r3
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	3332      	adds	r3, #50	; 0x32
 8005634:	4a33      	ldr	r2, [pc, #204]	; (8005704 <UART_SetConfig+0x4e4>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005640:	441c      	add	r4, r3
 8005642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005646:	2200      	movs	r2, #0
 8005648:	673b      	str	r3, [r7, #112]	; 0x70
 800564a:	677a      	str	r2, [r7, #116]	; 0x74
 800564c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	415b      	adcs	r3, r3
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	66bb      	str	r3, [r7, #104]	; 0x68
 8005692:	464b      	mov	r3, r9
 8005694:	460a      	mov	r2, r1
 8005696:	eb42 0303 	adc.w	r3, r2, r3
 800569a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	663b      	str	r3, [r7, #96]	; 0x60
 80056a6:	667a      	str	r2, [r7, #100]	; 0x64
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056b4:	4649      	mov	r1, r9
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	4641      	mov	r1, r8
 80056ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056be:	4641      	mov	r1, r8
 80056c0:	008a      	lsls	r2, r1, #2
 80056c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056c6:	f7fa fde3 	bl	8000290 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0d      	ldr	r3, [pc, #52]	; (8005704 <UART_SetConfig+0x4e4>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	; 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	3332      	adds	r3, #50	; 0x32
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <UART_SetConfig+0x4e4>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056fe:	46bd      	mov	sp, r7
 8005700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005708:	b084      	sub	sp, #16
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	f107 001c 	add.w	r0, r7, #28
 8005716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	d122      	bne.n	8005766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d105      	bne.n	800575a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 faa2 	bl	8005ca4 <USB_CoreReset>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e01a      	b.n	800579c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa96 	bl	8005ca4 <USB_CoreReset>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
 800578e:	e005      	b.n	800579c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10b      	bne.n	80057ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f043 0206 	orr.w	r2, r3, #6
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c6:	b004      	add	sp, #16
 80057c8:	4770      	bx	lr

080057ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d115      	bne.n	800583a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800581a:	2001      	movs	r0, #1
 800581c:	f7fb fed8 	bl	80015d0 <HAL_Delay>
      ms++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa2e 	bl	8005c88 <USB_GetMode>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d01e      	beq.n	8005870 <USB_SetCurrentMode+0x84>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b31      	cmp	r3, #49	; 0x31
 8005836:	d9f0      	bls.n	800581a <USB_SetCurrentMode+0x2e>
 8005838:	e01a      	b.n	8005870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800584c:	2001      	movs	r0, #1
 800584e:	f7fb febf 	bl	80015d0 <HAL_Delay>
      ms++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fa15 	bl	8005c88 <USB_GetMode>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <USB_SetCurrentMode+0x84>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b31      	cmp	r3, #49	; 0x31
 8005868:	d9f0      	bls.n	800584c <USB_SetCurrentMode+0x60>
 800586a:	e001      	b.n	8005870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e005      	b.n	800587c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b32      	cmp	r3, #50	; 0x32
 8005874:	d101      	bne.n	800587a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005884:	b084      	sub	sp, #16
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800589e:	2300      	movs	r3, #0
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e009      	b.n	80058b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3340      	adds	r3, #64	; 0x40
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3301      	adds	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b0e      	cmp	r3, #14
 80058bc:	d9f2      	bls.n	80058a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11c      	bne.n	80058fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d2:	f043 0302 	orr.w	r3, r3, #2
 80058d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
 80058fc:	e00b      	b.n	8005916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	4619      	mov	r1, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	461a      	mov	r2, r3
 8005932:	680b      	ldr	r3, [r1, #0]
 8005934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10c      	bne.n	8005956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005942:	2100      	movs	r1, #0
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f965 	bl	8005c14 <USB_SetDevSpeed>
 800594a:	e008      	b.n	800595e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800594c:	2101      	movs	r1, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f960 	bl	8005c14 <USB_SetDevSpeed>
 8005954:	e003      	b.n	800595e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005956:	2103      	movs	r1, #3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f95b 	bl	8005c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800595e:	2110      	movs	r1, #16
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f8f3 	bl	8005b4c <USB_FlushTxFifo>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f91f 	bl	8005bb4 <USB_FlushRxFifo>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	461a      	mov	r2, r3
 8005988:	2300      	movs	r3, #0
 800598a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	461a      	mov	r2, r3
 8005994:	2300      	movs	r3, #0
 8005996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e043      	b.n	8005a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c0:	d118      	bne.n	80059f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	461a      	mov	r2, r3
 80059d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e013      	b.n	8005a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	461a      	mov	r2, r3
 80059ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e008      	b.n	8005a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	461a      	mov	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	461a      	mov	r2, r3
 8005a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3b7      	bcc.n	80059aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e043      	b.n	8005ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a56:	d118      	bne.n	8005a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e013      	b.n	8005a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	461a      	mov	r2, r3
 8005a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e008      	b.n	8005a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d3b7      	bcc.n	8005a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f043 0210 	orr.w	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <USB_DevInit+0x2c4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	803c3800 	.word	0x803c3800

08005b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01b      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	daf2      	bge.n	8005b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e006      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d0f0      	beq.n	8005b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	00030d40 	.word	0x00030d40

08005bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a11      	ldr	r2, [pc, #68]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e018      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	daf2      	bge.n	8005bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2210      	movs	r2, #16
 8005be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e006      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d0f0      	beq.n	8005be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <USB_CoreReset+0x64>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e01b      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	daf2      	bge.n	8005cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <USB_CoreReset+0x64>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d0f0      	beq.n	8005cda <USB_CoreReset+0x36>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	00030d40 	.word	0x00030d40

08005d0c <std>:
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	4604      	mov	r4, r0
 8005d12:	e9c0 3300 	strd	r3, r3, [r0]
 8005d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1a:	6083      	str	r3, [r0, #8]
 8005d1c:	8181      	strh	r1, [r0, #12]
 8005d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d20:	81c2      	strh	r2, [r0, #14]
 8005d22:	6183      	str	r3, [r0, #24]
 8005d24:	4619      	mov	r1, r3
 8005d26:	2208      	movs	r2, #8
 8005d28:	305c      	adds	r0, #92	; 0x5c
 8005d2a:	f000 f9e5 	bl	80060f8 <memset>
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x38>)
 8005d30:	6263      	str	r3, [r4, #36]	; 0x24
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x3c>)
 8005d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x40>)
 8005d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <std+0x44>)
 8005d3c:	6224      	str	r4, [r4, #32]
 8005d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	bf00      	nop
 8005d44:	08005f49 	.word	0x08005f49
 8005d48:	08005f6b 	.word	0x08005f6b
 8005d4c:	08005fa3 	.word	0x08005fa3
 8005d50:	08005fc7 	.word	0x08005fc7

08005d54 <stdio_exit_handler>:
 8005d54:	4a02      	ldr	r2, [pc, #8]	; (8005d60 <stdio_exit_handler+0xc>)
 8005d56:	4903      	ldr	r1, [pc, #12]	; (8005d64 <stdio_exit_handler+0x10>)
 8005d58:	4803      	ldr	r0, [pc, #12]	; (8005d68 <stdio_exit_handler+0x14>)
 8005d5a:	f000 b869 	b.w	8005e30 <_fwalk_sglue>
 8005d5e:	bf00      	nop
 8005d60:	2000000c 	.word	0x2000000c
 8005d64:	08006a91 	.word	0x08006a91
 8005d68:	20000018 	.word	0x20000018

08005d6c <cleanup_stdio>:
 8005d6c:	6841      	ldr	r1, [r0, #4]
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <cleanup_stdio+0x34>)
 8005d70:	4299      	cmp	r1, r3
 8005d72:	b510      	push	{r4, lr}
 8005d74:	4604      	mov	r4, r0
 8005d76:	d001      	beq.n	8005d7c <cleanup_stdio+0x10>
 8005d78:	f000 fe8a 	bl	8006a90 <_fflush_r>
 8005d7c:	68a1      	ldr	r1, [r4, #8]
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <cleanup_stdio+0x38>)
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <cleanup_stdio+0x1e>
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fe83 	bl	8006a90 <_fflush_r>
 8005d8a:	68e1      	ldr	r1, [r4, #12]
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <cleanup_stdio+0x3c>)
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	d004      	beq.n	8005d9c <cleanup_stdio+0x30>
 8005d92:	4620      	mov	r0, r4
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 be7a 	b.w	8006a90 <_fflush_r>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	2000090c 	.word	0x2000090c
 8005da4:	20000974 	.word	0x20000974
 8005da8:	200009dc 	.word	0x200009dc

08005dac <global_stdio_init.part.0>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <global_stdio_init.part.0+0x30>)
 8005db0:	4c0b      	ldr	r4, [pc, #44]	; (8005de0 <global_stdio_init.part.0+0x34>)
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <global_stdio_init.part.0+0x38>)
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	4620      	mov	r0, r4
 8005db8:	2200      	movs	r2, #0
 8005dba:	2104      	movs	r1, #4
 8005dbc:	f7ff ffa6 	bl	8005d0c <std>
 8005dc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2109      	movs	r1, #9
 8005dc8:	f7ff ffa0 	bl	8005d0c <std>
 8005dcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd6:	2112      	movs	r1, #18
 8005dd8:	f7ff bf98 	b.w	8005d0c <std>
 8005ddc:	20000a44 	.word	0x20000a44
 8005de0:	2000090c 	.word	0x2000090c
 8005de4:	08005d55 	.word	0x08005d55

08005de8 <__sfp_lock_acquire>:
 8005de8:	4801      	ldr	r0, [pc, #4]	; (8005df0 <__sfp_lock_acquire+0x8>)
 8005dea:	f000 b9fd 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 8005dee:	bf00      	nop
 8005df0:	20000a4d 	.word	0x20000a4d

08005df4 <__sfp_lock_release>:
 8005df4:	4801      	ldr	r0, [pc, #4]	; (8005dfc <__sfp_lock_release+0x8>)
 8005df6:	f000 b9f8 	b.w	80061ea <__retarget_lock_release_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	20000a4d 	.word	0x20000a4d

08005e00 <__sinit>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	f7ff fff0 	bl	8005de8 <__sfp_lock_acquire>
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	b11b      	cbz	r3, 8005e14 <__sinit+0x14>
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f7ff bff0 	b.w	8005df4 <__sfp_lock_release>
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <__sinit+0x28>)
 8005e16:	6223      	str	r3, [r4, #32]
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <__sinit+0x2c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f5      	bne.n	8005e0c <__sinit+0xc>
 8005e20:	f7ff ffc4 	bl	8005dac <global_stdio_init.part.0>
 8005e24:	e7f2      	b.n	8005e0c <__sinit+0xc>
 8005e26:	bf00      	nop
 8005e28:	08005d6d 	.word	0x08005d6d
 8005e2c:	20000a44 	.word	0x20000a44

08005e30 <_fwalk_sglue>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4607      	mov	r7, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e40:	f1b9 0901 	subs.w	r9, r9, #1
 8005e44:	d505      	bpl.n	8005e52 <_fwalk_sglue+0x22>
 8005e46:	6824      	ldr	r4, [r4, #0]
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	d1f7      	bne.n	8005e3c <_fwalk_sglue+0xc>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d907      	bls.n	8005e68 <_fwalk_sglue+0x38>
 8005e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	d003      	beq.n	8005e68 <_fwalk_sglue+0x38>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	4306      	orrs	r6, r0
 8005e68:	3568      	adds	r5, #104	; 0x68
 8005e6a:	e7e9      	b.n	8005e40 <_fwalk_sglue+0x10>

08005e6c <iprintf>:
 8005e6c:	b40f      	push	{r0, r1, r2, r3}
 8005e6e:	b507      	push	{r0, r1, r2, lr}
 8005e70:	4906      	ldr	r1, [pc, #24]	; (8005e8c <iprintf+0x20>)
 8005e72:	ab04      	add	r3, sp, #16
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7a:	6881      	ldr	r1, [r0, #8]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	f000 fad7 	bl	8006430 <_vfiprintf_r>
 8005e82:	b003      	add	sp, #12
 8005e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e88:	b004      	add	sp, #16
 8005e8a:	4770      	bx	lr
 8005e8c:	20000064 	.word	0x20000064

08005e90 <_puts_r>:
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	b570      	push	{r4, r5, r6, lr}
 8005e94:	6884      	ldr	r4, [r0, #8]
 8005e96:	4605      	mov	r5, r0
 8005e98:	460e      	mov	r6, r1
 8005e9a:	b90b      	cbnz	r3, 8005ea0 <_puts_r+0x10>
 8005e9c:	f7ff ffb0 	bl	8005e00 <__sinit>
 8005ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d405      	bmi.n	8005eb2 <_puts_r+0x22>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	0598      	lsls	r0, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_puts_r+0x22>
 8005eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eae:	f000 f99b 	bl	80061e8 <__retarget_lock_acquire_recursive>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0719      	lsls	r1, r3, #28
 8005eb6:	d513      	bpl.n	8005ee0 <_puts_r+0x50>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	b18b      	cbz	r3, 8005ee0 <_puts_r+0x50>
 8005ebc:	3e01      	subs	r6, #1
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	b9e9      	cbnz	r1, 8005f06 <_puts_r+0x76>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da2e      	bge.n	8005f2c <_puts_r+0x9c>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f87b 	bl	8005fce <__swbuf_r>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d007      	beq.n	8005eec <_puts_r+0x5c>
 8005edc:	250a      	movs	r5, #10
 8005ede:	e007      	b.n	8005ef0 <_puts_r+0x60>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f8b0 	bl	8006048 <__swsetup_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d0e7      	beq.n	8005ebc <_puts_r+0x2c>
 8005eec:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d405      	bmi.n	8005f02 <_puts_r+0x72>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	d402      	bmi.n	8005f02 <_puts_r+0x72>
 8005efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efe:	f000 f974 	bl	80061ea <__retarget_lock_release_recursive>
 8005f02:	4628      	mov	r0, r5
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da04      	bge.n	8005f14 <_puts_r+0x84>
 8005f0a:	69a2      	ldr	r2, [r4, #24]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dc06      	bgt.n	8005f1e <_puts_r+0x8e>
 8005f10:	290a      	cmp	r1, #10
 8005f12:	d004      	beq.n	8005f1e <_puts_r+0x8e>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	7019      	strb	r1, [r3, #0]
 8005f1c:	e7cf      	b.n	8005ebe <_puts_r+0x2e>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f854 	bl	8005fce <__swbuf_r>
 8005f26:	3001      	adds	r0, #1
 8005f28:	d1c9      	bne.n	8005ebe <_puts_r+0x2e>
 8005f2a:	e7df      	b.n	8005eec <_puts_r+0x5c>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	250a      	movs	r5, #10
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	701d      	strb	r5, [r3, #0]
 8005f36:	e7db      	b.n	8005ef0 <_puts_r+0x60>

08005f38 <puts>:
 8005f38:	4b02      	ldr	r3, [pc, #8]	; (8005f44 <puts+0xc>)
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	f7ff bfa7 	b.w	8005e90 <_puts_r>
 8005f42:	bf00      	nop
 8005f44:	20000064 	.word	0x20000064

08005f48 <__sread>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	f000 f8fc 	bl	800614c <_read_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	bfab      	itete	ge
 8005f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f5c:	181b      	addge	r3, r3, r0
 8005f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f62:	bfac      	ite	ge
 8005f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f66:	81a3      	strhlt	r3, [r4, #12]
 8005f68:	bd10      	pop	{r4, pc}

08005f6a <__swrite>:
 8005f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	461f      	mov	r7, r3
 8005f70:	898b      	ldrh	r3, [r1, #12]
 8005f72:	05db      	lsls	r3, r3, #23
 8005f74:	4605      	mov	r5, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	4616      	mov	r6, r2
 8005f7a:	d505      	bpl.n	8005f88 <__swrite+0x1e>
 8005f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f80:	2302      	movs	r3, #2
 8005f82:	2200      	movs	r2, #0
 8005f84:	f000 f8d0 	bl	8006128 <_lseek_r>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	4632      	mov	r2, r6
 8005f96:	463b      	mov	r3, r7
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9e:	f000 b8e7 	b.w	8006170 <_write_r>

08005fa2 <__sseek>:
 8005fa2:	b510      	push	{r4, lr}
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005faa:	f000 f8bd 	bl	8006128 <_lseek_r>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	bf15      	itete	ne
 8005fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fbe:	81a3      	strheq	r3, [r4, #12]
 8005fc0:	bf18      	it	ne
 8005fc2:	81a3      	strhne	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__sclose>:
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 b89d 	b.w	8006108 <_close_r>

08005fce <__swbuf_r>:
 8005fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	b118      	cbz	r0, 8005fe0 <__swbuf_r+0x12>
 8005fd8:	6a03      	ldr	r3, [r0, #32]
 8005fda:	b90b      	cbnz	r3, 8005fe0 <__swbuf_r+0x12>
 8005fdc:	f7ff ff10 	bl	8005e00 <__sinit>
 8005fe0:	69a3      	ldr	r3, [r4, #24]
 8005fe2:	60a3      	str	r3, [r4, #8]
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	071a      	lsls	r2, r3, #28
 8005fe8:	d525      	bpl.n	8006036 <__swbuf_r+0x68>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	b31b      	cbz	r3, 8006036 <__swbuf_r+0x68>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6922      	ldr	r2, [r4, #16]
 8005ff2:	1a98      	subs	r0, r3, r2
 8005ff4:	6963      	ldr	r3, [r4, #20]
 8005ff6:	b2f6      	uxtb	r6, r6
 8005ff8:	4283      	cmp	r3, r0
 8005ffa:	4637      	mov	r7, r6
 8005ffc:	dc04      	bgt.n	8006008 <__swbuf_r+0x3a>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 fd45 	bl	8006a90 <_fflush_r>
 8006006:	b9e0      	cbnz	r0, 8006042 <__swbuf_r+0x74>
 8006008:	68a3      	ldr	r3, [r4, #8]
 800600a:	3b01      	subs	r3, #1
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	701e      	strb	r6, [r3, #0]
 8006016:	6962      	ldr	r2, [r4, #20]
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	429a      	cmp	r2, r3
 800601c:	d004      	beq.n	8006028 <__swbuf_r+0x5a>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	07db      	lsls	r3, r3, #31
 8006022:	d506      	bpl.n	8006032 <__swbuf_r+0x64>
 8006024:	2e0a      	cmp	r6, #10
 8006026:	d104      	bne.n	8006032 <__swbuf_r+0x64>
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f000 fd30 	bl	8006a90 <_fflush_r>
 8006030:	b938      	cbnz	r0, 8006042 <__swbuf_r+0x74>
 8006032:	4638      	mov	r0, r7
 8006034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 f805 	bl	8006048 <__swsetup_r>
 800603e:	2800      	cmp	r0, #0
 8006040:	d0d5      	beq.n	8005fee <__swbuf_r+0x20>
 8006042:	f04f 37ff 	mov.w	r7, #4294967295
 8006046:	e7f4      	b.n	8006032 <__swbuf_r+0x64>

08006048 <__swsetup_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <__swsetup_r+0xac>)
 800604c:	4605      	mov	r5, r0
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	460c      	mov	r4, r1
 8006052:	b118      	cbz	r0, 800605c <__swsetup_r+0x14>
 8006054:	6a03      	ldr	r3, [r0, #32]
 8006056:	b90b      	cbnz	r3, 800605c <__swsetup_r+0x14>
 8006058:	f7ff fed2 	bl	8005e00 <__sinit>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006062:	0718      	lsls	r0, r3, #28
 8006064:	d422      	bmi.n	80060ac <__swsetup_r+0x64>
 8006066:	06d9      	lsls	r1, r3, #27
 8006068:	d407      	bmi.n	800607a <__swsetup_r+0x32>
 800606a:	2309      	movs	r3, #9
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e034      	b.n	80060e4 <__swsetup_r+0x9c>
 800607a:	0758      	lsls	r0, r3, #29
 800607c:	d512      	bpl.n	80060a4 <__swsetup_r+0x5c>
 800607e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006080:	b141      	cbz	r1, 8006094 <__swsetup_r+0x4c>
 8006082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006086:	4299      	cmp	r1, r3
 8006088:	d002      	beq.n	8006090 <__swsetup_r+0x48>
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f8ae 	bl	80061ec <_free_r>
 8006090:	2300      	movs	r3, #0
 8006092:	6363      	str	r3, [r4, #52]	; 0x34
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	2300      	movs	r3, #0
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	f043 0308 	orr.w	r3, r3, #8
 80060aa:	81a3      	strh	r3, [r4, #12]
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	b94b      	cbnz	r3, 80060c4 <__swsetup_r+0x7c>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ba:	d003      	beq.n	80060c4 <__swsetup_r+0x7c>
 80060bc:	4621      	mov	r1, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fd34 	bl	8006b2c <__smakebuf_r>
 80060c4:	89a0      	ldrh	r0, [r4, #12]
 80060c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060ca:	f010 0301 	ands.w	r3, r0, #1
 80060ce:	d00a      	beq.n	80060e6 <__swsetup_r+0x9e>
 80060d0:	2300      	movs	r3, #0
 80060d2:	60a3      	str	r3, [r4, #8]
 80060d4:	6963      	ldr	r3, [r4, #20]
 80060d6:	425b      	negs	r3, r3
 80060d8:	61a3      	str	r3, [r4, #24]
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	b943      	cbnz	r3, 80060f0 <__swsetup_r+0xa8>
 80060de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060e2:	d1c4      	bne.n	800606e <__swsetup_r+0x26>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	0781      	lsls	r1, r0, #30
 80060e8:	bf58      	it	pl
 80060ea:	6963      	ldrpl	r3, [r4, #20]
 80060ec:	60a3      	str	r3, [r4, #8]
 80060ee:	e7f4      	b.n	80060da <__swsetup_r+0x92>
 80060f0:	2000      	movs	r0, #0
 80060f2:	e7f7      	b.n	80060e4 <__swsetup_r+0x9c>
 80060f4:	20000064 	.word	0x20000064

080060f8 <memset>:
 80060f8:	4402      	add	r2, r0
 80060fa:	4603      	mov	r3, r0
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d100      	bne.n	8006102 <memset+0xa>
 8006100:	4770      	bx	lr
 8006102:	f803 1b01 	strb.w	r1, [r3], #1
 8006106:	e7f9      	b.n	80060fc <memset+0x4>

08006108 <_close_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	; (8006124 <_close_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fb f943 	bl	800139e <_close>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_close_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_close_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20000a48 	.word	0x20000a48

08006128 <_lseek_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d07      	ldr	r5, [pc, #28]	; (8006148 <_lseek_r+0x20>)
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fb f958 	bl	80013ec <_lseek>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_lseek_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_lseek_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000a48 	.word	0x20000a48

0800614c <_read_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d07      	ldr	r5, [pc, #28]	; (800616c <_read_r+0x20>)
 8006150:	4604      	mov	r4, r0
 8006152:	4608      	mov	r0, r1
 8006154:	4611      	mov	r1, r2
 8006156:	2200      	movs	r2, #0
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fb f8e6 	bl	800132c <_read>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_read_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_read_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000a48 	.word	0x20000a48

08006170 <_write_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d07      	ldr	r5, [pc, #28]	; (8006190 <_write_r+0x20>)
 8006174:	4604      	mov	r4, r0
 8006176:	4608      	mov	r0, r1
 8006178:	4611      	mov	r1, r2
 800617a:	2200      	movs	r2, #0
 800617c:	602a      	str	r2, [r5, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f7fb f8f1 	bl	8001366 <_write>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_write_r+0x1e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_write_r+0x1e>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000a48 	.word	0x20000a48

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000064 	.word	0x20000064

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4d0d      	ldr	r5, [pc, #52]	; (80061d8 <__libc_init_array+0x38>)
 80061a4:	4c0d      	ldr	r4, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a6:	1b64      	subs	r4, r4, r5
 80061a8:	10a4      	asrs	r4, r4, #2
 80061aa:	2600      	movs	r6, #0
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	4d0b      	ldr	r5, [pc, #44]	; (80061e0 <__libc_init_array+0x40>)
 80061b2:	4c0c      	ldr	r4, [pc, #48]	; (80061e4 <__libc_init_array+0x44>)
 80061b4:	f000 fd28 	bl	8006c08 <_init>
 80061b8:	1b64      	subs	r4, r4, r5
 80061ba:	10a4      	asrs	r4, r4, #2
 80061bc:	2600      	movs	r6, #0
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	08006d14 	.word	0x08006d14
 80061dc:	08006d14 	.word	0x08006d14
 80061e0:	08006d14 	.word	0x08006d14
 80061e4:	08006d18 	.word	0x08006d18

080061e8 <__retarget_lock_acquire_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_release_recursive>:
 80061ea:	4770      	bx	lr

080061ec <_free_r>:
 80061ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ee:	2900      	cmp	r1, #0
 80061f0:	d044      	beq.n	800627c <_free_r+0x90>
 80061f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f6:	9001      	str	r0, [sp, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f1a1 0404 	sub.w	r4, r1, #4
 80061fe:	bfb8      	it	lt
 8006200:	18e4      	addlt	r4, r4, r3
 8006202:	f000 f8df 	bl	80063c4 <__malloc_lock>
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <_free_r+0x94>)
 8006208:	9801      	ldr	r0, [sp, #4]
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	b933      	cbnz	r3, 800621c <_free_r+0x30>
 800620e:	6063      	str	r3, [r4, #4]
 8006210:	6014      	str	r4, [r2, #0]
 8006212:	b003      	add	sp, #12
 8006214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006218:	f000 b8da 	b.w	80063d0 <__malloc_unlock>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d908      	bls.n	8006232 <_free_r+0x46>
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	1961      	adds	r1, r4, r5
 8006224:	428b      	cmp	r3, r1
 8006226:	bf01      	itttt	eq
 8006228:	6819      	ldreq	r1, [r3, #0]
 800622a:	685b      	ldreq	r3, [r3, #4]
 800622c:	1949      	addeq	r1, r1, r5
 800622e:	6021      	streq	r1, [r4, #0]
 8006230:	e7ed      	b.n	800620e <_free_r+0x22>
 8006232:	461a      	mov	r2, r3
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	b10b      	cbz	r3, 800623c <_free_r+0x50>
 8006238:	42a3      	cmp	r3, r4
 800623a:	d9fa      	bls.n	8006232 <_free_r+0x46>
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	1855      	adds	r5, r2, r1
 8006240:	42a5      	cmp	r5, r4
 8006242:	d10b      	bne.n	800625c <_free_r+0x70>
 8006244:	6824      	ldr	r4, [r4, #0]
 8006246:	4421      	add	r1, r4
 8006248:	1854      	adds	r4, r2, r1
 800624a:	42a3      	cmp	r3, r4
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	d1e0      	bne.n	8006212 <_free_r+0x26>
 8006250:	681c      	ldr	r4, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	6053      	str	r3, [r2, #4]
 8006256:	440c      	add	r4, r1
 8006258:	6014      	str	r4, [r2, #0]
 800625a:	e7da      	b.n	8006212 <_free_r+0x26>
 800625c:	d902      	bls.n	8006264 <_free_r+0x78>
 800625e:	230c      	movs	r3, #12
 8006260:	6003      	str	r3, [r0, #0]
 8006262:	e7d6      	b.n	8006212 <_free_r+0x26>
 8006264:	6825      	ldr	r5, [r4, #0]
 8006266:	1961      	adds	r1, r4, r5
 8006268:	428b      	cmp	r3, r1
 800626a:	bf04      	itt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	bf04      	itt	eq
 8006274:	1949      	addeq	r1, r1, r5
 8006276:	6021      	streq	r1, [r4, #0]
 8006278:	6054      	str	r4, [r2, #4]
 800627a:	e7ca      	b.n	8006212 <_free_r+0x26>
 800627c:	b003      	add	sp, #12
 800627e:	bd30      	pop	{r4, r5, pc}
 8006280:	20000a50 	.word	0x20000a50

08006284 <sbrk_aligned>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	4e0e      	ldr	r6, [pc, #56]	; (80062c0 <sbrk_aligned+0x3c>)
 8006288:	460c      	mov	r4, r1
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	4605      	mov	r5, r0
 800628e:	b911      	cbnz	r1, 8006296 <sbrk_aligned+0x12>
 8006290:	f000 fcaa 	bl	8006be8 <_sbrk_r>
 8006294:	6030      	str	r0, [r6, #0]
 8006296:	4621      	mov	r1, r4
 8006298:	4628      	mov	r0, r5
 800629a:	f000 fca5 	bl	8006be8 <_sbrk_r>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d00a      	beq.n	80062b8 <sbrk_aligned+0x34>
 80062a2:	1cc4      	adds	r4, r0, #3
 80062a4:	f024 0403 	bic.w	r4, r4, #3
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d007      	beq.n	80062bc <sbrk_aligned+0x38>
 80062ac:	1a21      	subs	r1, r4, r0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 fc9a 	bl	8006be8 <_sbrk_r>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d101      	bne.n	80062bc <sbrk_aligned+0x38>
 80062b8:	f04f 34ff 	mov.w	r4, #4294967295
 80062bc:	4620      	mov	r0, r4
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	20000a54 	.word	0x20000a54

080062c4 <_malloc_r>:
 80062c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c8:	1ccd      	adds	r5, r1, #3
 80062ca:	f025 0503 	bic.w	r5, r5, #3
 80062ce:	3508      	adds	r5, #8
 80062d0:	2d0c      	cmp	r5, #12
 80062d2:	bf38      	it	cc
 80062d4:	250c      	movcc	r5, #12
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	4607      	mov	r7, r0
 80062da:	db01      	blt.n	80062e0 <_malloc_r+0x1c>
 80062dc:	42a9      	cmp	r1, r5
 80062de:	d905      	bls.n	80062ec <_malloc_r+0x28>
 80062e0:	230c      	movs	r3, #12
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	2600      	movs	r6, #0
 80062e6:	4630      	mov	r0, r6
 80062e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063c0 <_malloc_r+0xfc>
 80062f0:	f000 f868 	bl	80063c4 <__malloc_lock>
 80062f4:	f8d8 3000 	ldr.w	r3, [r8]
 80062f8:	461c      	mov	r4, r3
 80062fa:	bb5c      	cbnz	r4, 8006354 <_malloc_r+0x90>
 80062fc:	4629      	mov	r1, r5
 80062fe:	4638      	mov	r0, r7
 8006300:	f7ff ffc0 	bl	8006284 <sbrk_aligned>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	4604      	mov	r4, r0
 8006308:	d155      	bne.n	80063b6 <_malloc_r+0xf2>
 800630a:	f8d8 4000 	ldr.w	r4, [r8]
 800630e:	4626      	mov	r6, r4
 8006310:	2e00      	cmp	r6, #0
 8006312:	d145      	bne.n	80063a0 <_malloc_r+0xdc>
 8006314:	2c00      	cmp	r4, #0
 8006316:	d048      	beq.n	80063aa <_malloc_r+0xe6>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	4631      	mov	r1, r6
 800631c:	4638      	mov	r0, r7
 800631e:	eb04 0903 	add.w	r9, r4, r3
 8006322:	f000 fc61 	bl	8006be8 <_sbrk_r>
 8006326:	4581      	cmp	r9, r0
 8006328:	d13f      	bne.n	80063aa <_malloc_r+0xe6>
 800632a:	6821      	ldr	r1, [r4, #0]
 800632c:	1a6d      	subs	r5, r5, r1
 800632e:	4629      	mov	r1, r5
 8006330:	4638      	mov	r0, r7
 8006332:	f7ff ffa7 	bl	8006284 <sbrk_aligned>
 8006336:	3001      	adds	r0, #1
 8006338:	d037      	beq.n	80063aa <_malloc_r+0xe6>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	442b      	add	r3, r5
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	f8d8 3000 	ldr.w	r3, [r8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d038      	beq.n	80063ba <_malloc_r+0xf6>
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	42a2      	cmp	r2, r4
 800634c:	d12b      	bne.n	80063a6 <_malloc_r+0xe2>
 800634e:	2200      	movs	r2, #0
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	e00f      	b.n	8006374 <_malloc_r+0xb0>
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	1b52      	subs	r2, r2, r5
 8006358:	d41f      	bmi.n	800639a <_malloc_r+0xd6>
 800635a:	2a0b      	cmp	r2, #11
 800635c:	d917      	bls.n	800638e <_malloc_r+0xca>
 800635e:	1961      	adds	r1, r4, r5
 8006360:	42a3      	cmp	r3, r4
 8006362:	6025      	str	r5, [r4, #0]
 8006364:	bf18      	it	ne
 8006366:	6059      	strne	r1, [r3, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	bf08      	it	eq
 800636c:	f8c8 1000 	streq.w	r1, [r8]
 8006370:	5162      	str	r2, [r4, r5]
 8006372:	604b      	str	r3, [r1, #4]
 8006374:	4638      	mov	r0, r7
 8006376:	f104 060b 	add.w	r6, r4, #11
 800637a:	f000 f829 	bl	80063d0 <__malloc_unlock>
 800637e:	f026 0607 	bic.w	r6, r6, #7
 8006382:	1d23      	adds	r3, r4, #4
 8006384:	1af2      	subs	r2, r6, r3
 8006386:	d0ae      	beq.n	80062e6 <_malloc_r+0x22>
 8006388:	1b9b      	subs	r3, r3, r6
 800638a:	50a3      	str	r3, [r4, r2]
 800638c:	e7ab      	b.n	80062e6 <_malloc_r+0x22>
 800638e:	42a3      	cmp	r3, r4
 8006390:	6862      	ldr	r2, [r4, #4]
 8006392:	d1dd      	bne.n	8006350 <_malloc_r+0x8c>
 8006394:	f8c8 2000 	str.w	r2, [r8]
 8006398:	e7ec      	b.n	8006374 <_malloc_r+0xb0>
 800639a:	4623      	mov	r3, r4
 800639c:	6864      	ldr	r4, [r4, #4]
 800639e:	e7ac      	b.n	80062fa <_malloc_r+0x36>
 80063a0:	4634      	mov	r4, r6
 80063a2:	6876      	ldr	r6, [r6, #4]
 80063a4:	e7b4      	b.n	8006310 <_malloc_r+0x4c>
 80063a6:	4613      	mov	r3, r2
 80063a8:	e7cc      	b.n	8006344 <_malloc_r+0x80>
 80063aa:	230c      	movs	r3, #12
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	4638      	mov	r0, r7
 80063b0:	f000 f80e 	bl	80063d0 <__malloc_unlock>
 80063b4:	e797      	b.n	80062e6 <_malloc_r+0x22>
 80063b6:	6025      	str	r5, [r4, #0]
 80063b8:	e7dc      	b.n	8006374 <_malloc_r+0xb0>
 80063ba:	605b      	str	r3, [r3, #4]
 80063bc:	deff      	udf	#255	; 0xff
 80063be:	bf00      	nop
 80063c0:	20000a50 	.word	0x20000a50

080063c4 <__malloc_lock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_lock+0x8>)
 80063c6:	f7ff bf0f 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 80063ca:	bf00      	nop
 80063cc:	20000a4c 	.word	0x20000a4c

080063d0 <__malloc_unlock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__malloc_unlock+0x8>)
 80063d2:	f7ff bf0a 	b.w	80061ea <__retarget_lock_release_recursive>
 80063d6:	bf00      	nop
 80063d8:	20000a4c 	.word	0x20000a4c

080063dc <__sfputc_r>:
 80063dc:	6893      	ldr	r3, [r2, #8]
 80063de:	3b01      	subs	r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	b410      	push	{r4}
 80063e4:	6093      	str	r3, [r2, #8]
 80063e6:	da08      	bge.n	80063fa <__sfputc_r+0x1e>
 80063e8:	6994      	ldr	r4, [r2, #24]
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	db01      	blt.n	80063f2 <__sfputc_r+0x16>
 80063ee:	290a      	cmp	r1, #10
 80063f0:	d103      	bne.n	80063fa <__sfputc_r+0x1e>
 80063f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f6:	f7ff bdea 	b.w	8005fce <__swbuf_r>
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	1c58      	adds	r0, r3, #1
 80063fe:	6010      	str	r0, [r2, #0]
 8006400:	7019      	strb	r1, [r3, #0]
 8006402:	4608      	mov	r0, r1
 8006404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006408:	4770      	bx	lr

0800640a <__sfputs_r>:
 800640a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640c:	4606      	mov	r6, r0
 800640e:	460f      	mov	r7, r1
 8006410:	4614      	mov	r4, r2
 8006412:	18d5      	adds	r5, r2, r3
 8006414:	42ac      	cmp	r4, r5
 8006416:	d101      	bne.n	800641c <__sfputs_r+0x12>
 8006418:	2000      	movs	r0, #0
 800641a:	e007      	b.n	800642c <__sfputs_r+0x22>
 800641c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006420:	463a      	mov	r2, r7
 8006422:	4630      	mov	r0, r6
 8006424:	f7ff ffda 	bl	80063dc <__sfputc_r>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d1f3      	bne.n	8006414 <__sfputs_r+0xa>
 800642c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006430 <_vfiprintf_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	460d      	mov	r5, r1
 8006436:	b09d      	sub	sp, #116	; 0x74
 8006438:	4614      	mov	r4, r2
 800643a:	4698      	mov	r8, r3
 800643c:	4606      	mov	r6, r0
 800643e:	b118      	cbz	r0, 8006448 <_vfiprintf_r+0x18>
 8006440:	6a03      	ldr	r3, [r0, #32]
 8006442:	b90b      	cbnz	r3, 8006448 <_vfiprintf_r+0x18>
 8006444:	f7ff fcdc 	bl	8005e00 <__sinit>
 8006448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644a:	07d9      	lsls	r1, r3, #31
 800644c:	d405      	bmi.n	800645a <_vfiprintf_r+0x2a>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	059a      	lsls	r2, r3, #22
 8006452:	d402      	bmi.n	800645a <_vfiprintf_r+0x2a>
 8006454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006456:	f7ff fec7 	bl	80061e8 <__retarget_lock_acquire_recursive>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	071b      	lsls	r3, r3, #28
 800645e:	d501      	bpl.n	8006464 <_vfiprintf_r+0x34>
 8006460:	692b      	ldr	r3, [r5, #16]
 8006462:	b99b      	cbnz	r3, 800648c <_vfiprintf_r+0x5c>
 8006464:	4629      	mov	r1, r5
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff fdee 	bl	8006048 <__swsetup_r>
 800646c:	b170      	cbz	r0, 800648c <_vfiprintf_r+0x5c>
 800646e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006470:	07dc      	lsls	r4, r3, #31
 8006472:	d504      	bpl.n	800647e <_vfiprintf_r+0x4e>
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	b01d      	add	sp, #116	; 0x74
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	0598      	lsls	r0, r3, #22
 8006482:	d4f7      	bmi.n	8006474 <_vfiprintf_r+0x44>
 8006484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006486:	f7ff feb0 	bl	80061ea <__retarget_lock_release_recursive>
 800648a:	e7f3      	b.n	8006474 <_vfiprintf_r+0x44>
 800648c:	2300      	movs	r3, #0
 800648e:	9309      	str	r3, [sp, #36]	; 0x24
 8006490:	2320      	movs	r3, #32
 8006492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006496:	f8cd 800c 	str.w	r8, [sp, #12]
 800649a:	2330      	movs	r3, #48	; 0x30
 800649c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006650 <_vfiprintf_r+0x220>
 80064a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064a4:	f04f 0901 	mov.w	r9, #1
 80064a8:	4623      	mov	r3, r4
 80064aa:	469a      	mov	sl, r3
 80064ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b0:	b10a      	cbz	r2, 80064b6 <_vfiprintf_r+0x86>
 80064b2:	2a25      	cmp	r2, #37	; 0x25
 80064b4:	d1f9      	bne.n	80064aa <_vfiprintf_r+0x7a>
 80064b6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ba:	d00b      	beq.n	80064d4 <_vfiprintf_r+0xa4>
 80064bc:	465b      	mov	r3, fp
 80064be:	4622      	mov	r2, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ffa1 	bl	800640a <__sfputs_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f000 80a9 	beq.w	8006620 <_vfiprintf_r+0x1f0>
 80064ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d0:	445a      	add	r2, fp
 80064d2:	9209      	str	r2, [sp, #36]	; 0x24
 80064d4:	f89a 3000 	ldrb.w	r3, [sl]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a1 	beq.w	8006620 <_vfiprintf_r+0x1f0>
 80064de:	2300      	movs	r3, #0
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e8:	f10a 0a01 	add.w	sl, sl, #1
 80064ec:	9304      	str	r3, [sp, #16]
 80064ee:	9307      	str	r3, [sp, #28]
 80064f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f4:	931a      	str	r3, [sp, #104]	; 0x68
 80064f6:	4654      	mov	r4, sl
 80064f8:	2205      	movs	r2, #5
 80064fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064fe:	4854      	ldr	r0, [pc, #336]	; (8006650 <_vfiprintf_r+0x220>)
 8006500:	f7f9 fe76 	bl	80001f0 <memchr>
 8006504:	9a04      	ldr	r2, [sp, #16]
 8006506:	b9d8      	cbnz	r0, 8006540 <_vfiprintf_r+0x110>
 8006508:	06d1      	lsls	r1, r2, #27
 800650a:	bf44      	itt	mi
 800650c:	2320      	movmi	r3, #32
 800650e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006512:	0713      	lsls	r3, r2, #28
 8006514:	bf44      	itt	mi
 8006516:	232b      	movmi	r3, #43	; 0x2b
 8006518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651c:	f89a 3000 	ldrb.w	r3, [sl]
 8006520:	2b2a      	cmp	r3, #42	; 0x2a
 8006522:	d015      	beq.n	8006550 <_vfiprintf_r+0x120>
 8006524:	9a07      	ldr	r2, [sp, #28]
 8006526:	4654      	mov	r4, sl
 8006528:	2000      	movs	r0, #0
 800652a:	f04f 0c0a 	mov.w	ip, #10
 800652e:	4621      	mov	r1, r4
 8006530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006534:	3b30      	subs	r3, #48	; 0x30
 8006536:	2b09      	cmp	r3, #9
 8006538:	d94d      	bls.n	80065d6 <_vfiprintf_r+0x1a6>
 800653a:	b1b0      	cbz	r0, 800656a <_vfiprintf_r+0x13a>
 800653c:	9207      	str	r2, [sp, #28]
 800653e:	e014      	b.n	800656a <_vfiprintf_r+0x13a>
 8006540:	eba0 0308 	sub.w	r3, r0, r8
 8006544:	fa09 f303 	lsl.w	r3, r9, r3
 8006548:	4313      	orrs	r3, r2
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	46a2      	mov	sl, r4
 800654e:	e7d2      	b.n	80064f6 <_vfiprintf_r+0xc6>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	1d19      	adds	r1, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	9103      	str	r1, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	bfbb      	ittet	lt
 800655c:	425b      	neglt	r3, r3
 800655e:	f042 0202 	orrlt.w	r2, r2, #2
 8006562:	9307      	strge	r3, [sp, #28]
 8006564:	9307      	strlt	r3, [sp, #28]
 8006566:	bfb8      	it	lt
 8006568:	9204      	strlt	r2, [sp, #16]
 800656a:	7823      	ldrb	r3, [r4, #0]
 800656c:	2b2e      	cmp	r3, #46	; 0x2e
 800656e:	d10c      	bne.n	800658a <_vfiprintf_r+0x15a>
 8006570:	7863      	ldrb	r3, [r4, #1]
 8006572:	2b2a      	cmp	r3, #42	; 0x2a
 8006574:	d134      	bne.n	80065e0 <_vfiprintf_r+0x1b0>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	1d1a      	adds	r2, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	9203      	str	r2, [sp, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bfb8      	it	lt
 8006582:	f04f 33ff 	movlt.w	r3, #4294967295
 8006586:	3402      	adds	r4, #2
 8006588:	9305      	str	r3, [sp, #20]
 800658a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006660 <_vfiprintf_r+0x230>
 800658e:	7821      	ldrb	r1, [r4, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	4650      	mov	r0, sl
 8006594:	f7f9 fe2c 	bl	80001f0 <memchr>
 8006598:	b138      	cbz	r0, 80065aa <_vfiprintf_r+0x17a>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	eba0 000a 	sub.w	r0, r0, sl
 80065a0:	2240      	movs	r2, #64	; 0x40
 80065a2:	4082      	lsls	r2, r0
 80065a4:	4313      	orrs	r3, r2
 80065a6:	3401      	adds	r4, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ae:	4829      	ldr	r0, [pc, #164]	; (8006654 <_vfiprintf_r+0x224>)
 80065b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065b4:	2206      	movs	r2, #6
 80065b6:	f7f9 fe1b 	bl	80001f0 <memchr>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d03f      	beq.n	800663e <_vfiprintf_r+0x20e>
 80065be:	4b26      	ldr	r3, [pc, #152]	; (8006658 <_vfiprintf_r+0x228>)
 80065c0:	bb1b      	cbnz	r3, 800660a <_vfiprintf_r+0x1da>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	3307      	adds	r3, #7
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	3308      	adds	r3, #8
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d0:	443b      	add	r3, r7
 80065d2:	9309      	str	r3, [sp, #36]	; 0x24
 80065d4:	e768      	b.n	80064a8 <_vfiprintf_r+0x78>
 80065d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065da:	460c      	mov	r4, r1
 80065dc:	2001      	movs	r0, #1
 80065de:	e7a6      	b.n	800652e <_vfiprintf_r+0xfe>
 80065e0:	2300      	movs	r3, #0
 80065e2:	3401      	adds	r4, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4620      	mov	r0, r4
 80065ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f2:	3a30      	subs	r2, #48	; 0x30
 80065f4:	2a09      	cmp	r2, #9
 80065f6:	d903      	bls.n	8006600 <_vfiprintf_r+0x1d0>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0c6      	beq.n	800658a <_vfiprintf_r+0x15a>
 80065fc:	9105      	str	r1, [sp, #20]
 80065fe:	e7c4      	b.n	800658a <_vfiprintf_r+0x15a>
 8006600:	fb0c 2101 	mla	r1, ip, r1, r2
 8006604:	4604      	mov	r4, r0
 8006606:	2301      	movs	r3, #1
 8006608:	e7f0      	b.n	80065ec <_vfiprintf_r+0x1bc>
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	462a      	mov	r2, r5
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <_vfiprintf_r+0x22c>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	4630      	mov	r0, r6
 8006616:	f3af 8000 	nop.w
 800661a:	4607      	mov	r7, r0
 800661c:	1c78      	adds	r0, r7, #1
 800661e:	d1d6      	bne.n	80065ce <_vfiprintf_r+0x19e>
 8006620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006622:	07d9      	lsls	r1, r3, #31
 8006624:	d405      	bmi.n	8006632 <_vfiprintf_r+0x202>
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	059a      	lsls	r2, r3, #22
 800662a:	d402      	bmi.n	8006632 <_vfiprintf_r+0x202>
 800662c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800662e:	f7ff fddc 	bl	80061ea <__retarget_lock_release_recursive>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	065b      	lsls	r3, r3, #25
 8006636:	f53f af1d 	bmi.w	8006474 <_vfiprintf_r+0x44>
 800663a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800663c:	e71c      	b.n	8006478 <_vfiprintf_r+0x48>
 800663e:	ab03      	add	r3, sp, #12
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	462a      	mov	r2, r5
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <_vfiprintf_r+0x22c>)
 8006646:	a904      	add	r1, sp, #16
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f879 	bl	8006740 <_printf_i>
 800664e:	e7e4      	b.n	800661a <_vfiprintf_r+0x1ea>
 8006650:	08006cd8 	.word	0x08006cd8
 8006654:	08006ce2 	.word	0x08006ce2
 8006658:	00000000 	.word	0x00000000
 800665c:	0800640b 	.word	0x0800640b
 8006660:	08006cde 	.word	0x08006cde

08006664 <_printf_common>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	4616      	mov	r6, r2
 800666a:	4699      	mov	r9, r3
 800666c:	688a      	ldr	r2, [r1, #8]
 800666e:	690b      	ldr	r3, [r1, #16]
 8006670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006674:	4293      	cmp	r3, r2
 8006676:	bfb8      	it	lt
 8006678:	4613      	movlt	r3, r2
 800667a:	6033      	str	r3, [r6, #0]
 800667c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006680:	4607      	mov	r7, r0
 8006682:	460c      	mov	r4, r1
 8006684:	b10a      	cbz	r2, 800668a <_printf_common+0x26>
 8006686:	3301      	adds	r3, #1
 8006688:	6033      	str	r3, [r6, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	0699      	lsls	r1, r3, #26
 800668e:	bf42      	ittt	mi
 8006690:	6833      	ldrmi	r3, [r6, #0]
 8006692:	3302      	addmi	r3, #2
 8006694:	6033      	strmi	r3, [r6, #0]
 8006696:	6825      	ldr	r5, [r4, #0]
 8006698:	f015 0506 	ands.w	r5, r5, #6
 800669c:	d106      	bne.n	80066ac <_printf_common+0x48>
 800669e:	f104 0a19 	add.w	sl, r4, #25
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	6832      	ldr	r2, [r6, #0]
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	42ab      	cmp	r3, r5
 80066aa:	dc26      	bgt.n	80066fa <_printf_common+0x96>
 80066ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066b0:	1e13      	subs	r3, r2, #0
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	bf18      	it	ne
 80066b6:	2301      	movne	r3, #1
 80066b8:	0692      	lsls	r2, r2, #26
 80066ba:	d42b      	bmi.n	8006714 <_printf_common+0xb0>
 80066bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066c0:	4649      	mov	r1, r9
 80066c2:	4638      	mov	r0, r7
 80066c4:	47c0      	blx	r8
 80066c6:	3001      	adds	r0, #1
 80066c8:	d01e      	beq.n	8006708 <_printf_common+0xa4>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	6922      	ldr	r2, [r4, #16]
 80066ce:	f003 0306 	and.w	r3, r3, #6
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	bf02      	ittt	eq
 80066d6:	68e5      	ldreq	r5, [r4, #12]
 80066d8:	6833      	ldreq	r3, [r6, #0]
 80066da:	1aed      	subeq	r5, r5, r3
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	bf0c      	ite	eq
 80066e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e4:	2500      	movne	r5, #0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bfc4      	itt	gt
 80066ea:	1a9b      	subgt	r3, r3, r2
 80066ec:	18ed      	addgt	r5, r5, r3
 80066ee:	2600      	movs	r6, #0
 80066f0:	341a      	adds	r4, #26
 80066f2:	42b5      	cmp	r5, r6
 80066f4:	d11a      	bne.n	800672c <_printf_common+0xc8>
 80066f6:	2000      	movs	r0, #0
 80066f8:	e008      	b.n	800670c <_printf_common+0xa8>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4652      	mov	r2, sl
 80066fe:	4649      	mov	r1, r9
 8006700:	4638      	mov	r0, r7
 8006702:	47c0      	blx	r8
 8006704:	3001      	adds	r0, #1
 8006706:	d103      	bne.n	8006710 <_printf_common+0xac>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006710:	3501      	adds	r5, #1
 8006712:	e7c6      	b.n	80066a2 <_printf_common+0x3e>
 8006714:	18e1      	adds	r1, r4, r3
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	2030      	movs	r0, #48	; 0x30
 800671a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800671e:	4422      	add	r2, r4
 8006720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006728:	3302      	adds	r3, #2
 800672a:	e7c7      	b.n	80066bc <_printf_common+0x58>
 800672c:	2301      	movs	r3, #1
 800672e:	4622      	mov	r2, r4
 8006730:	4649      	mov	r1, r9
 8006732:	4638      	mov	r0, r7
 8006734:	47c0      	blx	r8
 8006736:	3001      	adds	r0, #1
 8006738:	d0e6      	beq.n	8006708 <_printf_common+0xa4>
 800673a:	3601      	adds	r6, #1
 800673c:	e7d9      	b.n	80066f2 <_printf_common+0x8e>
	...

08006740 <_printf_i>:
 8006740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	7e0f      	ldrb	r7, [r1, #24]
 8006746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006748:	2f78      	cmp	r7, #120	; 0x78
 800674a:	4691      	mov	r9, r2
 800674c:	4680      	mov	r8, r0
 800674e:	460c      	mov	r4, r1
 8006750:	469a      	mov	sl, r3
 8006752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006756:	d807      	bhi.n	8006768 <_printf_i+0x28>
 8006758:	2f62      	cmp	r7, #98	; 0x62
 800675a:	d80a      	bhi.n	8006772 <_printf_i+0x32>
 800675c:	2f00      	cmp	r7, #0
 800675e:	f000 80d4 	beq.w	800690a <_printf_i+0x1ca>
 8006762:	2f58      	cmp	r7, #88	; 0x58
 8006764:	f000 80c0 	beq.w	80068e8 <_printf_i+0x1a8>
 8006768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800676c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006770:	e03a      	b.n	80067e8 <_printf_i+0xa8>
 8006772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006776:	2b15      	cmp	r3, #21
 8006778:	d8f6      	bhi.n	8006768 <_printf_i+0x28>
 800677a:	a101      	add	r1, pc, #4	; (adr r1, 8006780 <_printf_i+0x40>)
 800677c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006780:	080067d9 	.word	0x080067d9
 8006784:	080067ed 	.word	0x080067ed
 8006788:	08006769 	.word	0x08006769
 800678c:	08006769 	.word	0x08006769
 8006790:	08006769 	.word	0x08006769
 8006794:	08006769 	.word	0x08006769
 8006798:	080067ed 	.word	0x080067ed
 800679c:	08006769 	.word	0x08006769
 80067a0:	08006769 	.word	0x08006769
 80067a4:	08006769 	.word	0x08006769
 80067a8:	08006769 	.word	0x08006769
 80067ac:	080068f1 	.word	0x080068f1
 80067b0:	08006819 	.word	0x08006819
 80067b4:	080068ab 	.word	0x080068ab
 80067b8:	08006769 	.word	0x08006769
 80067bc:	08006769 	.word	0x08006769
 80067c0:	08006913 	.word	0x08006913
 80067c4:	08006769 	.word	0x08006769
 80067c8:	08006819 	.word	0x08006819
 80067cc:	08006769 	.word	0x08006769
 80067d0:	08006769 	.word	0x08006769
 80067d4:	080068b3 	.word	0x080068b3
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	602a      	str	r2, [r5, #0]
 80067e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e8:	2301      	movs	r3, #1
 80067ea:	e09f      	b.n	800692c <_printf_i+0x1ec>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	682b      	ldr	r3, [r5, #0]
 80067f0:	0607      	lsls	r7, r0, #24
 80067f2:	f103 0104 	add.w	r1, r3, #4
 80067f6:	6029      	str	r1, [r5, #0]
 80067f8:	d501      	bpl.n	80067fe <_printf_i+0xbe>
 80067fa:	681e      	ldr	r6, [r3, #0]
 80067fc:	e003      	b.n	8006806 <_printf_i+0xc6>
 80067fe:	0646      	lsls	r6, r0, #25
 8006800:	d5fb      	bpl.n	80067fa <_printf_i+0xba>
 8006802:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006806:	2e00      	cmp	r6, #0
 8006808:	da03      	bge.n	8006812 <_printf_i+0xd2>
 800680a:	232d      	movs	r3, #45	; 0x2d
 800680c:	4276      	negs	r6, r6
 800680e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006812:	485a      	ldr	r0, [pc, #360]	; (800697c <_printf_i+0x23c>)
 8006814:	230a      	movs	r3, #10
 8006816:	e012      	b.n	800683e <_printf_i+0xfe>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	6029      	str	r1, [r5, #0]
 8006820:	0605      	lsls	r5, r0, #24
 8006822:	d501      	bpl.n	8006828 <_printf_i+0xe8>
 8006824:	681e      	ldr	r6, [r3, #0]
 8006826:	e002      	b.n	800682e <_printf_i+0xee>
 8006828:	0641      	lsls	r1, r0, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0xe4>
 800682c:	881e      	ldrh	r6, [r3, #0]
 800682e:	4853      	ldr	r0, [pc, #332]	; (800697c <_printf_i+0x23c>)
 8006830:	2f6f      	cmp	r7, #111	; 0x6f
 8006832:	bf0c      	ite	eq
 8006834:	2308      	moveq	r3, #8
 8006836:	230a      	movne	r3, #10
 8006838:	2100      	movs	r1, #0
 800683a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800683e:	6865      	ldr	r5, [r4, #4]
 8006840:	60a5      	str	r5, [r4, #8]
 8006842:	2d00      	cmp	r5, #0
 8006844:	bfa2      	ittt	ge
 8006846:	6821      	ldrge	r1, [r4, #0]
 8006848:	f021 0104 	bicge.w	r1, r1, #4
 800684c:	6021      	strge	r1, [r4, #0]
 800684e:	b90e      	cbnz	r6, 8006854 <_printf_i+0x114>
 8006850:	2d00      	cmp	r5, #0
 8006852:	d04b      	beq.n	80068ec <_printf_i+0x1ac>
 8006854:	4615      	mov	r5, r2
 8006856:	fbb6 f1f3 	udiv	r1, r6, r3
 800685a:	fb03 6711 	mls	r7, r3, r1, r6
 800685e:	5dc7      	ldrb	r7, [r0, r7]
 8006860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006864:	4637      	mov	r7, r6
 8006866:	42bb      	cmp	r3, r7
 8006868:	460e      	mov	r6, r1
 800686a:	d9f4      	bls.n	8006856 <_printf_i+0x116>
 800686c:	2b08      	cmp	r3, #8
 800686e:	d10b      	bne.n	8006888 <_printf_i+0x148>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	07de      	lsls	r6, r3, #31
 8006874:	d508      	bpl.n	8006888 <_printf_i+0x148>
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	6861      	ldr	r1, [r4, #4]
 800687a:	4299      	cmp	r1, r3
 800687c:	bfde      	ittt	le
 800687e:	2330      	movle	r3, #48	; 0x30
 8006880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006888:	1b52      	subs	r2, r2, r5
 800688a:	6122      	str	r2, [r4, #16]
 800688c:	f8cd a000 	str.w	sl, [sp]
 8006890:	464b      	mov	r3, r9
 8006892:	aa03      	add	r2, sp, #12
 8006894:	4621      	mov	r1, r4
 8006896:	4640      	mov	r0, r8
 8006898:	f7ff fee4 	bl	8006664 <_printf_common>
 800689c:	3001      	adds	r0, #1
 800689e:	d14a      	bne.n	8006936 <_printf_i+0x1f6>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b004      	add	sp, #16
 80068a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	f043 0320 	orr.w	r3, r3, #32
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	4833      	ldr	r0, [pc, #204]	; (8006980 <_printf_i+0x240>)
 80068b4:	2778      	movs	r7, #120	; 0x78
 80068b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	6829      	ldr	r1, [r5, #0]
 80068be:	061f      	lsls	r7, r3, #24
 80068c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068c4:	d402      	bmi.n	80068cc <_printf_i+0x18c>
 80068c6:	065f      	lsls	r7, r3, #25
 80068c8:	bf48      	it	mi
 80068ca:	b2b6      	uxthmi	r6, r6
 80068cc:	07df      	lsls	r7, r3, #31
 80068ce:	bf48      	it	mi
 80068d0:	f043 0320 	orrmi.w	r3, r3, #32
 80068d4:	6029      	str	r1, [r5, #0]
 80068d6:	bf48      	it	mi
 80068d8:	6023      	strmi	r3, [r4, #0]
 80068da:	b91e      	cbnz	r6, 80068e4 <_printf_i+0x1a4>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	f023 0320 	bic.w	r3, r3, #32
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	2310      	movs	r3, #16
 80068e6:	e7a7      	b.n	8006838 <_printf_i+0xf8>
 80068e8:	4824      	ldr	r0, [pc, #144]	; (800697c <_printf_i+0x23c>)
 80068ea:	e7e4      	b.n	80068b6 <_printf_i+0x176>
 80068ec:	4615      	mov	r5, r2
 80068ee:	e7bd      	b.n	800686c <_printf_i+0x12c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	6826      	ldr	r6, [r4, #0]
 80068f4:	6961      	ldr	r1, [r4, #20]
 80068f6:	1d18      	adds	r0, r3, #4
 80068f8:	6028      	str	r0, [r5, #0]
 80068fa:	0635      	lsls	r5, r6, #24
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	d501      	bpl.n	8006904 <_printf_i+0x1c4>
 8006900:	6019      	str	r1, [r3, #0]
 8006902:	e002      	b.n	800690a <_printf_i+0x1ca>
 8006904:	0670      	lsls	r0, r6, #25
 8006906:	d5fb      	bpl.n	8006900 <_printf_i+0x1c0>
 8006908:	8019      	strh	r1, [r3, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	4615      	mov	r5, r2
 8006910:	e7bc      	b.n	800688c <_printf_i+0x14c>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	602a      	str	r2, [r5, #0]
 8006918:	681d      	ldr	r5, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	2100      	movs	r1, #0
 800691e:	4628      	mov	r0, r5
 8006920:	f7f9 fc66 	bl	80001f0 <memchr>
 8006924:	b108      	cbz	r0, 800692a <_printf_i+0x1ea>
 8006926:	1b40      	subs	r0, r0, r5
 8006928:	6060      	str	r0, [r4, #4]
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	2300      	movs	r3, #0
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	e7aa      	b.n	800688c <_printf_i+0x14c>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	462a      	mov	r2, r5
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	47d0      	blx	sl
 8006940:	3001      	adds	r0, #1
 8006942:	d0ad      	beq.n	80068a0 <_printf_i+0x160>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	d413      	bmi.n	8006972 <_printf_i+0x232>
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	4298      	cmp	r0, r3
 8006950:	bfb8      	it	lt
 8006952:	4618      	movlt	r0, r3
 8006954:	e7a6      	b.n	80068a4 <_printf_i+0x164>
 8006956:	2301      	movs	r3, #1
 8006958:	4632      	mov	r2, r6
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d09d      	beq.n	80068a0 <_printf_i+0x160>
 8006964:	3501      	adds	r5, #1
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	9903      	ldr	r1, [sp, #12]
 800696a:	1a5b      	subs	r3, r3, r1
 800696c:	42ab      	cmp	r3, r5
 800696e:	dcf2      	bgt.n	8006956 <_printf_i+0x216>
 8006970:	e7eb      	b.n	800694a <_printf_i+0x20a>
 8006972:	2500      	movs	r5, #0
 8006974:	f104 0619 	add.w	r6, r4, #25
 8006978:	e7f5      	b.n	8006966 <_printf_i+0x226>
 800697a:	bf00      	nop
 800697c:	08006ce9 	.word	0x08006ce9
 8006980:	08006cfa 	.word	0x08006cfa

08006984 <__sflush_r>:
 8006984:	898a      	ldrh	r2, [r1, #12]
 8006986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	4605      	mov	r5, r0
 800698c:	0710      	lsls	r0, r2, #28
 800698e:	460c      	mov	r4, r1
 8006990:	d458      	bmi.n	8006a44 <__sflush_r+0xc0>
 8006992:	684b      	ldr	r3, [r1, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc05      	bgt.n	80069a4 <__sflush_r+0x20>
 8006998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	dc02      	bgt.n	80069a4 <__sflush_r+0x20>
 800699e:	2000      	movs	r0, #0
 80069a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d0f9      	beq.n	800699e <__sflush_r+0x1a>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069b0:	682f      	ldr	r7, [r5, #0]
 80069b2:	6a21      	ldr	r1, [r4, #32]
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	d032      	beq.n	8006a1e <__sflush_r+0x9a>
 80069b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	075a      	lsls	r2, r3, #29
 80069be:	d505      	bpl.n	80069cc <__sflush_r+0x48>
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	1ac0      	subs	r0, r0, r3
 80069c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c6:	b10b      	cbz	r3, 80069cc <__sflush_r+0x48>
 80069c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ca:	1ac0      	subs	r0, r0, r3
 80069cc:	2300      	movs	r3, #0
 80069ce:	4602      	mov	r2, r0
 80069d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069d2:	6a21      	ldr	r1, [r4, #32]
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b0      	blx	r6
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	d106      	bne.n	80069ec <__sflush_r+0x68>
 80069de:	6829      	ldr	r1, [r5, #0]
 80069e0:	291d      	cmp	r1, #29
 80069e2:	d82b      	bhi.n	8006a3c <__sflush_r+0xb8>
 80069e4:	4a29      	ldr	r2, [pc, #164]	; (8006a8c <__sflush_r+0x108>)
 80069e6:	410a      	asrs	r2, r1
 80069e8:	07d6      	lsls	r6, r2, #31
 80069ea:	d427      	bmi.n	8006a3c <__sflush_r+0xb8>
 80069ec:	2200      	movs	r2, #0
 80069ee:	6062      	str	r2, [r4, #4]
 80069f0:	04d9      	lsls	r1, r3, #19
 80069f2:	6922      	ldr	r2, [r4, #16]
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	d504      	bpl.n	8006a02 <__sflush_r+0x7e>
 80069f8:	1c42      	adds	r2, r0, #1
 80069fa:	d101      	bne.n	8006a00 <__sflush_r+0x7c>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b903      	cbnz	r3, 8006a02 <__sflush_r+0x7e>
 8006a00:	6560      	str	r0, [r4, #84]	; 0x54
 8006a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a04:	602f      	str	r7, [r5, #0]
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d0c9      	beq.n	800699e <__sflush_r+0x1a>
 8006a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	d002      	beq.n	8006a18 <__sflush_r+0x94>
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fbea 	bl	80061ec <_free_r>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8006a1c:	e7c0      	b.n	80069a0 <__sflush_r+0x1c>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b0      	blx	r6
 8006a24:	1c41      	adds	r1, r0, #1
 8006a26:	d1c8      	bne.n	80069ba <__sflush_r+0x36>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0c5      	beq.n	80069ba <__sflush_r+0x36>
 8006a2e:	2b1d      	cmp	r3, #29
 8006a30:	d001      	beq.n	8006a36 <__sflush_r+0xb2>
 8006a32:	2b16      	cmp	r3, #22
 8006a34:	d101      	bne.n	8006a3a <__sflush_r+0xb6>
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	e7b1      	b.n	800699e <__sflush_r+0x1a>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	e7ad      	b.n	80069a0 <__sflush_r+0x1c>
 8006a44:	690f      	ldr	r7, [r1, #16]
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	d0a9      	beq.n	800699e <__sflush_r+0x1a>
 8006a4a:	0793      	lsls	r3, r2, #30
 8006a4c:	680e      	ldr	r6, [r1, #0]
 8006a4e:	bf08      	it	eq
 8006a50:	694b      	ldreq	r3, [r1, #20]
 8006a52:	600f      	str	r7, [r1, #0]
 8006a54:	bf18      	it	ne
 8006a56:	2300      	movne	r3, #0
 8006a58:	eba6 0807 	sub.w	r8, r6, r7
 8006a5c:	608b      	str	r3, [r1, #8]
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	dd9c      	ble.n	800699e <__sflush_r+0x1a>
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a68:	4643      	mov	r3, r8
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b0      	blx	r6
 8006a70:	2800      	cmp	r0, #0
 8006a72:	dc06      	bgt.n	8006a82 <__sflush_r+0xfe>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e78e      	b.n	80069a0 <__sflush_r+0x1c>
 8006a82:	4407      	add	r7, r0
 8006a84:	eba8 0800 	sub.w	r8, r8, r0
 8006a88:	e7e9      	b.n	8006a5e <__sflush_r+0xda>
 8006a8a:	bf00      	nop
 8006a8c:	dfbffffe 	.word	0xdfbffffe

08006a90 <_fflush_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	690b      	ldr	r3, [r1, #16]
 8006a94:	4605      	mov	r5, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	b913      	cbnz	r3, 8006aa0 <_fflush_r+0x10>
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	b118      	cbz	r0, 8006aaa <_fflush_r+0x1a>
 8006aa2:	6a03      	ldr	r3, [r0, #32]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <_fflush_r+0x1a>
 8006aa6:	f7ff f9ab 	bl	8005e00 <__sinit>
 8006aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f3      	beq.n	8006a9a <_fflush_r+0xa>
 8006ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab4:	07d0      	lsls	r0, r2, #31
 8006ab6:	d404      	bmi.n	8006ac2 <_fflush_r+0x32>
 8006ab8:	0599      	lsls	r1, r3, #22
 8006aba:	d402      	bmi.n	8006ac2 <_fflush_r+0x32>
 8006abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006abe:	f7ff fb93 	bl	80061e8 <__retarget_lock_acquire_recursive>
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	f7ff ff5d 	bl	8006984 <__sflush_r>
 8006aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006acc:	07da      	lsls	r2, r3, #31
 8006ace:	4605      	mov	r5, r0
 8006ad0:	d4e4      	bmi.n	8006a9c <_fflush_r+0xc>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	059b      	lsls	r3, r3, #22
 8006ad6:	d4e1      	bmi.n	8006a9c <_fflush_r+0xc>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ada:	f7ff fb86 	bl	80061ea <__retarget_lock_release_recursive>
 8006ade:	e7dd      	b.n	8006a9c <_fflush_r+0xc>

08006ae0 <__swhatbuf_r>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	b096      	sub	sp, #88	; 0x58
 8006aec:	4615      	mov	r5, r2
 8006aee:	461e      	mov	r6, r3
 8006af0:	da0d      	bge.n	8006b0e <__swhatbuf_r+0x2e>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006af8:	f04f 0100 	mov.w	r1, #0
 8006afc:	bf0c      	ite	eq
 8006afe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b02:	2340      	movne	r3, #64	; 0x40
 8006b04:	2000      	movs	r0, #0
 8006b06:	6031      	str	r1, [r6, #0]
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	b016      	add	sp, #88	; 0x58
 8006b0c:	bd70      	pop	{r4, r5, r6, pc}
 8006b0e:	466a      	mov	r2, sp
 8006b10:	f000 f848 	bl	8006ba4 <_fstat_r>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	dbec      	blt.n	8006af2 <__swhatbuf_r+0x12>
 8006b18:	9901      	ldr	r1, [sp, #4]
 8006b1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b22:	4259      	negs	r1, r3
 8006b24:	4159      	adcs	r1, r3
 8006b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b2a:	e7eb      	b.n	8006b04 <__swhatbuf_r+0x24>

08006b2c <__smakebuf_r>:
 8006b2c:	898b      	ldrh	r3, [r1, #12]
 8006b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b30:	079d      	lsls	r5, r3, #30
 8006b32:	4606      	mov	r6, r0
 8006b34:	460c      	mov	r4, r1
 8006b36:	d507      	bpl.n	8006b48 <__smakebuf_r+0x1c>
 8006b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	2301      	movs	r3, #1
 8006b42:	6163      	str	r3, [r4, #20]
 8006b44:	b002      	add	sp, #8
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	ab01      	add	r3, sp, #4
 8006b4a:	466a      	mov	r2, sp
 8006b4c:	f7ff ffc8 	bl	8006ae0 <__swhatbuf_r>
 8006b50:	9900      	ldr	r1, [sp, #0]
 8006b52:	4605      	mov	r5, r0
 8006b54:	4630      	mov	r0, r6
 8006b56:	f7ff fbb5 	bl	80062c4 <_malloc_r>
 8006b5a:	b948      	cbnz	r0, 8006b70 <__smakebuf_r+0x44>
 8006b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b60:	059a      	lsls	r2, r3, #22
 8006b62:	d4ef      	bmi.n	8006b44 <__smakebuf_r+0x18>
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	f043 0302 	orr.w	r3, r3, #2
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	e7e3      	b.n	8006b38 <__smakebuf_r+0xc>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	6020      	str	r0, [r4, #0]
 8006b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	9b00      	ldr	r3, [sp, #0]
 8006b7c:	6163      	str	r3, [r4, #20]
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	6120      	str	r0, [r4, #16]
 8006b82:	b15b      	cbz	r3, 8006b9c <__smakebuf_r+0x70>
 8006b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f81d 	bl	8006bc8 <_isatty_r>
 8006b8e:	b128      	cbz	r0, 8006b9c <__smakebuf_r+0x70>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	81a3      	strh	r3, [r4, #12]
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	431d      	orrs	r5, r3
 8006ba0:	81a5      	strh	r5, [r4, #12]
 8006ba2:	e7cf      	b.n	8006b44 <__smakebuf_r+0x18>

08006ba4 <_fstat_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	; (8006bc4 <_fstat_r+0x20>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	f7fa fc00 	bl	80013b6 <_fstat>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d102      	bne.n	8006bc0 <_fstat_r+0x1c>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	b103      	cbz	r3, 8006bc0 <_fstat_r+0x1c>
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000a48 	.word	0x20000a48

08006bc8 <_isatty_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	; (8006be4 <_isatty_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fa fbff 	bl	80013d6 <_isatty>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_isatty_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_isatty_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20000a48 	.word	0x20000a48

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d06      	ldr	r5, [pc, #24]	; (8006c04 <_sbrk_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fa fc08 	bl	8001408 <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20000a48 	.word	0x20000a48

08006c08 <_init>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr

08006c14 <_fini>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr
