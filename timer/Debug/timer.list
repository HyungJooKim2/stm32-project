
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005920  08005920  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005928  08005928  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000988  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f0  200009f0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014a97  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000299d  00000000  00000000  00034b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  00037510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e1c  00000000  00000000  00038720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262bd  00000000  00000000  0003953c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001476d  00000000  00000000  0005f7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4845  00000000  00000000  00073f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000053c0  00000000  00000000  001587ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0015db6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080058c0 	.word	0x080058c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	080058c0 	.word	0x080058c0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <app>:
bool exti_flag = false;

static void app_init(void);

void app(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  int16_t duty = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	81fb      	strh	r3, [r7, #14]
  volatile bool dir_flag = true;
 80004f2:	2301      	movs	r3, #1
 80004f4:	737b      	strb	r3, [r7, #13]
  volatile uint32_t prev, curr;

  printf("System started.....\r\n");
 80004f6:	481c      	ldr	r0, [pc, #112]	; (8000568 <app+0x80>)
 80004f8:	f004 fe4e 	bl	8005198 <puts>

  app_init();
 80004fc:	f000 f838 	bl	8000570 <app_init>

  prev = curr = HAL_GetTick();
 8000500:	f000 feb0 	bl	8001264 <HAL_GetTick>
 8000504:	4603      	mov	r3, r0
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	60bb      	str	r3, [r7, #8]

  while (1)
  {
#if 1  // 시간 방식
    curr = HAL_GetTick();
 800050a:	f000 feab 	bl	8001264 <HAL_GetTick>
 800050e:	4603      	mov	r3, r0
 8000510:	607b      	str	r3, [r7, #4]

    if (curr - prev > 25) {
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	2b19      	cmp	r3, #25
 800051a:	d9f6      	bls.n	800050a <app+0x22>
      if (dir_flag == true) {
 800051c:	7b7b      	ldrb	r3, [r7, #13]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d00e      	beq.n	8000542 <app+0x5a>
	duty+=50;
 8000524:	89fb      	ldrh	r3, [r7, #14]
 8000526:	3332      	adds	r3, #50	; 0x32
 8000528:	b29b      	uxth	r3, r3
 800052a:	81fb      	strh	r3, [r7, #14]
	if (duty > D_DUTY_MAX) {
 800052c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000534:	dd11      	ble.n	800055a <app+0x72>
	  dir_flag = false;
 8000536:	2300      	movs	r3, #0
 8000538:	737b      	strb	r3, [r7, #13]
	  duty = D_DUTY_MAX;
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	81fb      	strh	r3, [r7, #14]
 8000540:	e00b      	b.n	800055a <app+0x72>
	}
      } else {  // dir_flag = false
	duty-=50;
 8000542:	89fb      	ldrh	r3, [r7, #14]
 8000544:	3b32      	subs	r3, #50	; 0x32
 8000546:	b29b      	uxth	r3, r3
 8000548:	81fb      	strh	r3, [r7, #14]
	if (duty < 0) {
 800054a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800054e:	2b00      	cmp	r3, #0
 8000550:	da03      	bge.n	800055a <app+0x72>
	  dir_flag = true;
 8000552:	2301      	movs	r3, #1
 8000554:	737b      	strb	r3, [r7, #13]
	  duty = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	81fb      	strh	r3, [r7, #14]
	}
      }

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (uint16_t)duty);
 800055a:	89fa      	ldrh	r2, [r7, #14]
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <app+0x84>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	63da      	str	r2, [r3, #60]	; 0x3c

      prev = curr;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60bb      	str	r3, [r7, #8]
    curr = HAL_GetTick();
 8000566:	e7d0      	b.n	800050a <app+0x22>
 8000568:	080058d8 	.word	0x080058d8
 800056c:	200002fc 	.word	0x200002fc

08000570 <app_init>:
#endif
  }
}

static void app_init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  printf("Timer2,3 Base start\r\n");
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <app_init+0x24>)
 8000576:	f004 fe0f 	bl	8005198 <puts>

  HAL_TIM_Base_Start(&htim2);
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <app_init+0x28>)
 800057c:	f002 fb52 	bl	8002c24 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <app_init+0x2c>)
 8000582:	f002 fb4f 	bl	8002c24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000586:	2108      	movs	r1, #8
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <app_init+0x2c>)
 800058a:	f002 fc0d 	bl	8002da8 <HAL_TIM_PWM_Start>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	080058f0 	.word	0x080058f0
 8000598:	200002b4 	.word	0x200002b4
 800059c:	200002fc 	.word	0x200002fc

080005a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  static uint32_t prev;
  volatile uint32_t curr = HAL_GetTick();
 80005aa:	f000 fe5b 	bl	8001264 <HAL_GetTick>
 80005ae:	4603      	mov	r3, r0
 80005b0:	60fb      	str	r3, [r7, #12]

  if (curr - prev > 150 ) {
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2b96      	cmp	r3, #150	; 0x96
 80005bc:	d909      	bls.n	80005d2 <HAL_GPIO_EXTI_Callback+0x32>
    if (GPIO_Pin == GPIO_PIN_13) exti_flag = true;
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c4:	d102      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x2c>
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]

    prev = curr;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80005d0:	6013      	str	r3, [r2, #0]
  }
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000088 	.word	0x20000088
 80005e0:	20000084 	.word	0x20000084

080005e4 <__io_putchar>:

extern UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f003 fa02 	bl	80039fe <HAL_UART_Transmit>
  return ch;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000344 	.word	0x20000344

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fdc4 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f810 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f9e0 	bl	80009d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000618:	f000 f876 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f984 	bl	8000928 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000620:	f000 f9ac 	bl	800097c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000624:	f000 f8be 	bl	80007a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000628:	f000 f908 	bl	800083c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 800062c:	f7ff ff5c 	bl	80004e8 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x28>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fe88 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a8:	23a8      	movs	r3, #168	; 0xa8
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fdcb 	bl	8002254 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 fa3e 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f82c 	bl	8002744 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 fa27 	bl	8000b44 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ETH_Init+0x84>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <MX_ETH_Init+0x88>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ETH_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ETH_Init+0x8c>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ETH_Init+0x8c>)
 8000720:	22e1      	movs	r2, #225	; 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ETH_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ETH_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ETH_Init+0x84>)
 8000738:	4a16      	ldr	r2, [pc, #88]	; (8000794 <MX_ETH_Init+0x8c>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ETH_Init+0x84>)
 800073e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000742:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ETH_Init+0x84>)
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <MX_ETH_Init+0x90>)
 8000748:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ETH_Init+0x84>)
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_ETH_Init+0x94>)
 800074e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_ETH_Init+0x84>)
 8000752:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000756:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_ETH_Init+0x84>)
 800075a:	f000 ff57 	bl	800160c <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f9ee 	bl	8000b44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000768:	2238      	movs	r2, #56	; 0x38
 800076a:	2100      	movs	r1, #0
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_ETH_Init+0x98>)
 800076e:	f004 fdf3 	bl	8005358 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_ETH_Init+0x98>)
 8000774:	2221      	movs	r2, #33	; 0x21
 8000776:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_ETH_Init+0x98>)
 800077a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800077e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_ETH_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000204 	.word	0x20000204
 8000790:	40028000 	.word	0x40028000
 8000794:	20000894 	.word	0x20000894
 8000798:	20000164 	.word	0x20000164
 800079c:	200000c4 	.word	0x200000c4
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM2_Init+0x94>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ca:	2253      	movs	r2, #83	; 0x53
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x94>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ea:	f002 f9cb 	bl	8002b84 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007f4:	f000 f9a6 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM2_Init+0x94>)
 8000806:	f002 fc59 	bl	80030bc <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000810:	f000 f998 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x94>)
 8000822:	f003 f823 	bl	800386c <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f98a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002b4 	.word	0x200002b4

0800083c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <MX_TIM3_Init+0xe4>)
 800086e:	4a2d      	ldr	r2, [pc, #180]	; (8000924 <MX_TIM3_Init+0xe8>)
 8000870:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000874:	2253      	movs	r2, #83	; 0x53
 8000876:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <MX_TIM3_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000880:	f242 720f 	movw	r2, #9999	; 0x270f
 8000884:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_TIM3_Init+0xe4>)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000892:	4823      	ldr	r0, [pc, #140]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000894:	f002 f976 	bl	8002b84 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800089e:	f000 f951 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ac:	4619      	mov	r1, r3
 80008ae:	481c      	ldr	r0, [pc, #112]	; (8000920 <MX_TIM3_Init+0xe4>)
 80008b0:	f002 fc04 	bl	80030bc <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ba:	f000 f943 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <MX_TIM3_Init+0xe4>)
 80008c0:	f002 fa18 	bl	8002cf4 <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008ca:	f000 f93b 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <MX_TIM3_Init+0xe4>)
 80008de:	f002 ffc5 	bl	800386c <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008e8:	f000 f92c 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000904:	f002 fb18 	bl	8002f38 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800090e:	f000 f919 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <MX_TIM3_Init+0xe4>)
 8000914:	f000 fa40 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3738      	adds	r7, #56	; 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002fc 	.word	0x200002fc
 8000924:	40000400 	.word	0x40000400

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART3_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000960:	f003 f800 	bl	8003964 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f8eb 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000344 	.word	0x20000344
 8000978:	40004800 	.word	0x40004800

0800097c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000986:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2204      	movs	r2, #4
 800098c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2202      	movs	r2, #2
 8000992:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2202      	movs	r2, #2
 800099e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	f001 fb2a 	bl	8002018 <HAL_PCD_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f8bb 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000388 	.word	0x20000388

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <MX_GPIO_Init+0x15c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <MX_GPIO_Init+0x15c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	4b49      	ldr	r3, [pc, #292]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a48      	ldr	r2, [pc, #288]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a41      	ldr	r2, [pc, #260]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a3a      	ldr	r2, [pc, #232]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a33      	ldr	r2, [pc, #204]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_GPIO_Init+0x15c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a9c:	4826      	ldr	r0, [pc, #152]	; (8000b38 <MX_GPIO_Init+0x160>)
 8000a9e:	f001 fa89 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4825      	ldr	r0, [pc, #148]	; (8000b3c <MX_GPIO_Init+0x164>)
 8000aa8:	f001 fa84 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x168>)
 8000ac4:	f001 f8ca 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ac8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4815      	ldr	r0, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x160>)
 8000ae2:	f001 f8bb 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	480f      	ldr	r0, [pc, #60]	; (8000b3c <MX_GPIO_Init+0x164>)
 8000afe:	f001 f8ad 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_GPIO_Init+0x164>)
 8000b16:	f001 f8a1 	bl	8001c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f000 fcab 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f000 fcc4 	bl	80014b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	; 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40020800 	.word	0x40020800

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a55      	ldr	r2, [pc, #340]	; (8000d14 <HAL_ETH_MspInit+0x174>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f040 80a4 	bne.w	8000d0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a52      	ldr	r2, [pc, #328]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a4b      	ldr	r2, [pc, #300]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000bea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a36      	ldr	r2, [pc, #216]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <HAL_ETH_MspInit+0x178>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c88:	2332      	movs	r3, #50	; 0x32
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <HAL_ETH_MspInit+0x17c>)
 8000ca4:	f000 ffda 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ca8:	2386      	movs	r3, #134	; 0x86
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4817      	ldr	r0, [pc, #92]	; (8000d20 <HAL_ETH_MspInit+0x180>)
 8000cc4:	f000 ffca 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480f      	ldr	r0, [pc, #60]	; (8000d24 <HAL_ETH_MspInit+0x184>)
 8000ce6:	f000 ffb9 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfc:	230b      	movs	r3, #11
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <HAL_ETH_MspInit+0x188>)
 8000d08:	f000 ffa8 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40028000 	.word	0x40028000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40021800 	.word	0x40021800

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	d10e      	bne.n	8000d5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d5a:	e012      	b.n	8000d82 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x68>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10d      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_TIM_Base_MspInit+0x64>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40000400 	.word	0x40000400

08000d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_TIM_MspPostInit+0x68>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d11d      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_TIM_MspPostInit+0x6c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_TIM_MspPostInit+0x70>)
 8000df2:	f000 ff33 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40000400 	.word	0x40000400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <HAL_UART_MspInit+0x94>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d134      	bne.n	8000e98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_UART_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <HAL_UART_MspInit+0x9c>)
 8000e84:	f000 feea 	bl	8001c5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2027      	movs	r0, #39	; 0x27
 8000e8e:	f000 faf4 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e92:	2027      	movs	r0, #39	; 0x27
 8000e94:	f000 fb0d 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ecc:	d13f      	bne.n	8000f4e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000efc:	230a      	movs	r3, #10
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4815      	ldr	r0, [pc, #84]	; (8000f5c <HAL_PCD_MspInit+0xb0>)
 8000f08:	f000 fea8 	bl	8001c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <HAL_PCD_MspInit+0xb0>)
 8000f22:	f000 fe9b 	bl	8001c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f30:	6353      	str	r3, [r2, #52]	; 0x34
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_PCD_MspInit+0xac>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f946 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART3_IRQHandler+0x10>)
 8000fba:	f002 fdb3 	bl	8003b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000344 	.word	0x20000344

08000fc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd0:	f001 f80a 	bl	8001fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
  }

  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fad9 	bl	80005e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
  }
  return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	605a      	str	r2, [r3, #4]
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f004 f986 	bl	80053f4 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20030000 	.word	0x20030000
 8001114:	00000400 	.word	0x00000400
 8001118:	2000089c 	.word	0x2000089c
 800111c:	200009f0 	.word	0x200009f0

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001160:	4c0b      	ldr	r4, [pc, #44]	; (8001190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116e:	f7ff ffd7 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f004 f945 	bl	8005400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa47 	bl	8000608 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800117c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001188:	08005930 	.word	0x08005930
  ldr r2, =_sbss
 800118c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001190:	200009f0 	.word	0x200009f0

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f94f 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fcc0 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f967 	bl	80014ce <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f92f 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	200008a0 	.word	0x200008a0

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200008a0 	.word	0x200008a0

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff feb6 	bl	8001264 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d008      	beq.n	8001518 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e052      	b.n	80015be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0216 	bic.w	r2, r2, #22
 8001526:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001536:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <HAL_DMA_Abort+0x62>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0208 	bic.w	r2, r2, #8
 8001556:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001568:	e013      	b.n	8001592 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800156a:	f7ff fe7b 	bl	8001264 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b05      	cmp	r3, #5
 8001576:	d90c      	bls.n	8001592 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e015      	b.n	80015be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e4      	bne.n	800156a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	223f      	movs	r2, #63	; 0x3f
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d004      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00c      	b.n	80015fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2205      	movs	r2, #5
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06c      	b.n	80016f8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001624:	2b00      	cmp	r3, #0
 8001626:	d106      	bne.n	8001636 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2223      	movs	r2, #35	; 0x23
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fab5 	bl	8000ba0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_ETH_Init+0xf4>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a30      	ldr	r2, [pc, #192]	; (8001700 <HAL_ETH_Init+0xf4>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_ETH_Init+0xf4>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_ETH_Init+0xf8>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <HAL_ETH_Init+0xf8>)
 8001658:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800165c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_ETH_Init+0xf8>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4927      	ldr	r1, [pc, #156]	; (8001704 <HAL_ETH_Init+0xf8>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_ETH_Init+0xf8>)
 800166e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff fdec 	bl	8001264 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800168e:	e011      	b.n	80016b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001690:	f7ff fde8 	bl	8001264 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800169e:	d909      	bls.n	80016b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	22e0      	movs	r2, #224	; 0xe0
 80016ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e021      	b.n	80016f8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1e4      	bne.n	8001690 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f958 	bl	800197c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f9ff 	bl	8001ad0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fa55 	bl	8001b82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	461a      	mov	r2, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f9bd 	bl	8001a60 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2210      	movs	r2, #16
 80016f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800

08001708 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4b51      	ldr	r3, [pc, #324]	; (8001864 <ETH_SetMACConfig+0x15c>)
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <ETH_SetMACConfig+0x28>
 800172a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800172e:	e000      	b.n	8001732 <ETH_SetMACConfig+0x2a>
 8001730:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7c5b      	ldrb	r3, [r3, #17]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <ETH_SetMACConfig+0x38>
 800173a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800173e:	e000      	b.n	8001742 <ETH_SetMACConfig+0x3a>
 8001740:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001742:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001748:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	7fdb      	ldrb	r3, [r3, #31]
 800174e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001750:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001756:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	7f92      	ldrb	r2, [r2, #30]
 800175c:	2a00      	cmp	r2, #0
 800175e:	d102      	bne.n	8001766 <ETH_SetMACConfig+0x5e>
 8001760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001764:	e000      	b.n	8001768 <ETH_SetMACConfig+0x60>
 8001766:	2200      	movs	r2, #0
                        macconf->Speed |
 8001768:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7f1b      	ldrb	r3, [r3, #28]
 800176e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001770:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001776:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800177e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001786:	2a00      	cmp	r2, #0
 8001788:	d102      	bne.n	8001790 <ETH_SetMACConfig+0x88>
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	e000      	b.n	8001792 <ETH_SetMACConfig+0x8a>
 8001790:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001792:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7bdb      	ldrb	r3, [r3, #15]
 8001798:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800179a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017aa:	4313      	orrs	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fd5a 	bl	800127c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017de:	4013      	ands	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d101      	bne.n	80017f6 <ETH_SetMACConfig+0xee>
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	e000      	b.n	80017f8 <ETH_SetMACConfig+0xf0>
 80017f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80017fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001806:	2a01      	cmp	r2, #1
 8001808:	d101      	bne.n	800180e <ETH_SetMACConfig+0x106>
 800180a:	2208      	movs	r2, #8
 800180c:	e000      	b.n	8001810 <ETH_SetMACConfig+0x108>
 800180e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001810:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001818:	2a01      	cmp	r2, #1
 800181a:	d101      	bne.n	8001820 <ETH_SetMACConfig+0x118>
 800181c:	2204      	movs	r2, #4
 800181e:	e000      	b.n	8001822 <ETH_SetMACConfig+0x11a>
 8001820:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800182a:	2a01      	cmp	r2, #1
 800182c:	d101      	bne.n	8001832 <ETH_SetMACConfig+0x12a>
 800182e:	2202      	movs	r2, #2
 8001830:	e000      	b.n	8001834 <ETH_SetMACConfig+0x12c>
 8001832:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001834:	4313      	orrs	r3, r2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800184c:	2001      	movs	r0, #1
 800184e:	f7ff fd15 	bl	800127c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	ff20810f 	.word	0xff20810f

08001868 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <ETH_SetDMAConfig+0x110>)
 8001882:	4013      	ands	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7b1b      	ldrb	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <ETH_SetDMAConfig+0x2c>
 800188e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001892:	e000      	b.n	8001896 <ETH_SetDMAConfig+0x2e>
 8001894:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	7b5b      	ldrb	r3, [r3, #13]
 800189a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800189c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	7f52      	ldrb	r2, [r2, #29]
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	d102      	bne.n	80018ac <ETH_SetDMAConfig+0x44>
 80018a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018aa:	e000      	b.n	80018ae <ETH_SetDMAConfig+0x46>
 80018ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7b9b      	ldrb	r3, [r3, #14]
 80018b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80018b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80018bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7f1b      	ldrb	r3, [r3, #28]
 80018c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80018c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	7f9b      	ldrb	r3, [r3, #30]
 80018ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80018cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80018d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018dc:	4313      	orrs	r3, r2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff fcbc 	bl	800127c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	791b      	ldrb	r3, [r3, #4]
 8001916:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800191c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001922:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001928:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001930:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001932:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800193a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001940:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fc8d 	bl	800127c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	f8de3f23 	.word	0xf8de3f23

0800197c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0a6      	sub	sp, #152	; 0x98
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001990:	2300      	movs	r3, #0
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019b8:	2300      	movs	r3, #0
 80019ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fe86 	bl	8001708 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a00:	2301      	movs	r3, #1
 8001a02:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	4619      	mov	r1, r3
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff08 	bl	8001868 <ETH_SetDMAConfig>
}
 8001a58:	bf00      	nop
 8001a5a:	3798      	adds	r7, #152	; 0x98
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3305      	adds	r3, #5
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	3204      	adds	r2, #4
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <ETH_MACAddressConfig+0x68>)
 8001a82:	4413      	add	r3, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	061a      	lsls	r2, r3, #24
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3302      	adds	r3, #2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <ETH_MACAddressConfig+0x6c>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40028040 	.word	0x40028040
 8001acc:	40028044 	.word	0x40028044

08001ad0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e03e      	b.n	8001b5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68d9      	ldr	r1, [r3, #12]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	3206      	adds	r2, #6
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d80c      	bhi.n	8001b40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68d9      	ldr	r1, [r3, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	e004      	b.n	8001b4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d9bd      	bls.n	8001ade <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	611a      	str	r2, [r3, #16]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e046      	b.n	8001c1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6919      	ldr	r1, [r3, #16]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001bd4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	3212      	adds	r2, #18
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d80c      	bhi.n	8001c0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6919      	ldr	r1, [r3, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	440b      	add	r3, r1
 8001c06:	461a      	mov	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	e004      	b.n	8001c18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d9b5      	bls.n	8001b90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e177      	b.n	8001f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8166 	bne.w	8001f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d017      	beq.n	8001d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80c0 	beq.w	8001f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_GPIO_Init+0x324>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a61      	ldr	r2, [pc, #388]	; (8001f84 <HAL_GPIO_Init+0x328>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_GPIO_Init+0x32c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d037      	beq.n	8001e9a <HAL_GPIO_Init+0x23e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_GPIO_Init+0x330>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d031      	beq.n	8001e96 <HAL_GPIO_Init+0x23a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <HAL_GPIO_Init+0x334>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <HAL_GPIO_Init+0x236>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <HAL_GPIO_Init+0x338>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x232>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <HAL_GPIO_Init+0x33c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x22e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a53      	ldr	r2, [pc, #332]	; (8001f9c <HAL_GPIO_Init+0x340>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x22a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_GPIO_Init+0x344>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_GPIO_Init+0x348>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_GPIO_Init+0x34c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <HAL_GPIO_Init+0x350>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x21a>
 8001e72:	2309      	movs	r3, #9
 8001e74:	e012      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e76:	230a      	movs	r3, #10
 8001e78:	e010      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x240>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <HAL_GPIO_Init+0x328>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_GPIO_Init+0x354>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae84 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021c00 	.word	0x40021c00
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40022400 	.word	0x40022400
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe faca 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b08f      	sub	sp, #60	; 0x3c
 800201c:	af0a      	add	r7, sp, #40	; 0x28
 800201e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e10f      	b.n	800224a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe ff31 	bl	8000eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fcf0 	bl	8004a4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	687e      	ldr	r6, [r7, #4]
 8002076:	466d      	mov	r5, sp
 8002078:	f106 0410 	add.w	r4, r6, #16
 800207c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002084:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002088:	e885 0003 	stmia.w	r5, {r0, r1}
 800208c:	1d33      	adds	r3, r6, #4
 800208e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002090:	6838      	ldr	r0, [r7, #0]
 8002092:	f002 fc7b 	bl	800498c <USB_CoreInit>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0d0      	b.n	800224a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fcde 	bl	8004a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e04a      	b.n	8002150 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	333d      	adds	r3, #61	; 0x3d
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	333c      	adds	r3, #60	; 0x3c
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	b298      	uxth	r0, r3
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3344      	adds	r3, #68	; 0x44
 80020f6:	4602      	mov	r2, r0
 80020f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3340      	adds	r3, #64	; 0x40
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3348      	adds	r3, #72	; 0x48
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	334c      	adds	r3, #76	; 0x4c
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3354      	adds	r3, #84	; 0x54
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	3301      	adds	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d3af      	bcc.n	80020ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e044      	b.n	80021ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	3301      	adds	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d3b5      	bcc.n	8002160 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	687e      	ldr	r6, [r7, #4]
 80021fc:	466d      	mov	r5, sp
 80021fe:	f106 0410 	add.w	r4, r6, #16
 8002202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800220e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002212:	1d33      	adds	r3, r6, #4
 8002214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f002 fc76 	bl	8004b08 <USB_DevInit>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00d      	b.n	800224a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fe41 	bl	8004eca <USB_DevDisconnect>

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e267      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002272:	4b88      	ldr	r3, [pc, #544]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	2b08      	cmp	r3, #8
 8002288:	d112      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228a:	4b82      	ldr	r3, [pc, #520]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b7e      	ldr	r3, [pc, #504]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e242      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b76      	ldr	r3, [pc, #472]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b70      	ldr	r3, [pc, #448]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6f      	ldr	r2, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b6d      	ldr	r3, [pc, #436]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6c      	ldr	r2, [pc, #432]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b69      	ldr	r3, [pc, #420]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe ffaa 	bl	8001264 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe ffa6 	bl	8001264 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e207      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe ff96 	bl	8001264 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233c:	f7fe ff92 	bl	8001264 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1f3      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236a:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	2b08      	cmp	r3, #8
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002382:	4b44      	ldr	r3, [pc, #272]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d116      	bne.n	80023bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e1c7      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4937      	ldr	r1, [pc, #220]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ba:	e03a      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x244>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe ff4b 	bl	8001264 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe ff47 	bl	8001264 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1a8      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4925      	ldr	r1, [pc, #148]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x244>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe ff2a 	bl	8001264 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002414:	f7fe ff26 	bl	8001264 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e187      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d036      	beq.n	80024ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d016      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x248>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe ff0a 	bl	8001264 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe ff06 	bl	8001264 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e167      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x240>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
 8002472:	e01b      	b.n	80024ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_OscConfig+0x248>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fef3 	bl	8001264 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002480:	e00e      	b.n	80024a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe feef 	bl	8001264 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d907      	bls.n	80024a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e150      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
 8002494:	40023800 	.word	0x40023800
 8002498:	42470000 	.word	0x42470000
 800249c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ea      	bne.n	8002482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8097 	beq.w	80025e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b7d      	ldr	r3, [pc, #500]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a7c      	ldr	r2, [pc, #496]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b7a      	ldr	r3, [pc, #488]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b77      	ldr	r3, [pc, #476]	; (80026c8 <HAL_RCC_OscConfig+0x474>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b74      	ldr	r3, [pc, #464]	; (80026c8 <HAL_RCC_OscConfig+0x474>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a73      	ldr	r2, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x474>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7fe feaf 	bl	8001264 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe feab 	bl	8001264 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e10c      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x474>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x2ea>
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	4a63      	ldr	r2, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	; 0x70
 800253c:	e01c      	b.n	8002578 <HAL_RCC_OscConfig+0x324>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b05      	cmp	r3, #5
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x30c>
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a5e      	ldr	r2, [pc, #376]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	4a5b      	ldr	r2, [pc, #364]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0x324>
 8002560:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a57      	ldr	r2, [pc, #348]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a54      	ldr	r2, [pc, #336]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002572:	f023 0304 	bic.w	r3, r3, #4
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d015      	beq.n	80025ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe fe70 	bl	8001264 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe fe6c 	bl	8001264 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0cb      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259e:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ee      	beq.n	8002588 <HAL_RCC_OscConfig+0x334>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fe5a 	bl	8001264 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b4:	f7fe fe56 	bl	8001264 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e0b5      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ca:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ee      	bne.n	80025b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	4a38      	ldr	r2, [pc, #224]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a1 	beq.w	8002734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d05c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d141      	bne.n	800268a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_OscConfig+0x478>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fe2a 	bl	8001264 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fe26 	bl	8001264 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e087      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	019b      	lsls	r3, r3, #6
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	491b      	ldr	r1, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x478>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe fdff 	bl	8001264 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe fdfb 	bl	8001264 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e05c      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x416>
 8002688:	e054      	b.n	8002734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_RCC_OscConfig+0x478>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fde8 	bl	8001264 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fde4 	bl	8001264 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e045      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_OscConfig+0x470>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x444>
 80026b6:	e03d      	b.n	8002734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e038      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000
 80026cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x4ec>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d028      	beq.n	8002730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d121      	bne.n	8002730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d11a      	bne.n	8002730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002708:	4293      	cmp	r3, r2
 800270a:	d111      	bne.n	8002730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	3b01      	subs	r3, #1
 800271a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d107      	bne.n	8002730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cc      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0b8      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b59      	ldr	r3, [pc, #356]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a58      	ldr	r2, [pc, #352]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b0:	4b53      	ldr	r3, [pc, #332]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	494d      	ldr	r1, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d044      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e067      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4934      	ldr	r1, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe fd16 	bl	8001264 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fd12 	bl	8001264 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e04f      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d20c      	bcs.n	800288c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e032      	b.n	80028f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ca:	f000 f821 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	fa22 f303 	lsr.w	r3, r2, r3
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fc76 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00
 8002900:	40023800 	.word	0x40023800
 8002904:	08005908 	.word	0x08005908
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004

08002910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b094      	sub	sp, #80	; 0x50
 8002916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
 800291c:	2300      	movs	r3, #0
 800291e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002920:	2300      	movs	r3, #0
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002928:	4b79      	ldr	r3, [pc, #484]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d00d      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x40>
 8002934:	2b08      	cmp	r3, #8
 8002936:	f200 80e1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x34>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x3a>
 8002942:	e0db      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002948:	e0db      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800294c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800294e:	e0d8      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295a:	4b6d      	ldr	r3, [pc, #436]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d063      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
 800297e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002982:	4622      	mov	r2, r4
 8002984:	462b      	mov	r3, r5
 8002986:	f04f 0000 	mov.w	r0, #0
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	0159      	lsls	r1, r3, #5
 8002990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002994:	0150      	lsls	r0, r2, #5
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4621      	mov	r1, r4
 800299c:	1a51      	subs	r1, r2, r1
 800299e:	6139      	str	r1, [r7, #16]
 80029a0:	4629      	mov	r1, r5
 80029a2:	eb63 0301 	sbc.w	r3, r3, r1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029b4:	4659      	mov	r1, fp
 80029b6:	018b      	lsls	r3, r1, #6
 80029b8:	4651      	mov	r1, sl
 80029ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029be:	4651      	mov	r1, sl
 80029c0:	018a      	lsls	r2, r1, #6
 80029c2:	4651      	mov	r1, sl
 80029c4:	ebb2 0801 	subs.w	r8, r2, r1
 80029c8:	4659      	mov	r1, fp
 80029ca:	eb63 0901 	sbc.w	r9, r3, r1
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e2:	4690      	mov	r8, r2
 80029e4:	4699      	mov	r9, r3
 80029e6:	4623      	mov	r3, r4
 80029e8:	eb18 0303 	adds.w	r3, r8, r3
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	462b      	mov	r3, r5
 80029f0:	eb49 0303 	adc.w	r3, r9, r3
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a02:	4629      	mov	r1, r5
 8002a04:	024b      	lsls	r3, r1, #9
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	024a      	lsls	r2, r1, #9
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a20:	f7fd fbe4 	bl	80001ec <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2c:	e058      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	2200      	movs	r2, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	4611      	mov	r1, r2
 8002a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	0159      	lsls	r1, r3, #5
 8002a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a5a:	0150      	lsls	r0, r2, #5
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4641      	mov	r1, r8
 8002a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a66:	4649      	mov	r1, r9
 8002a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a80:	ebb2 040a 	subs.w	r4, r2, sl
 8002a84:	eb63 050b 	sbc.w	r5, r3, fp
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00eb      	lsls	r3, r5, #3
 8002a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	18e3      	adds	r3, r4, r3
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	eb45 0303 	adc.w	r3, r5, r3
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	028b      	lsls	r3, r1, #10
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	028a      	lsls	r2, r1, #10
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aca:	2200      	movs	r2, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	61fa      	str	r2, [r7, #28]
 8002ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad4:	f7fd fb8a 	bl	80001ec <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3750      	adds	r7, #80	; 0x50
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08005918 	.word	0x08005918

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffdc 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08005918 	.word	0x08005918

08002b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e041      	b.n	8002c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f8be 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 fb42 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e046      	b.n	8002cca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_TIM_Base_Start+0xb4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d022      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d01d      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_TIM_Base_Start+0xb8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d018      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_TIM_Base_Start+0xbc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_TIM_Base_Start+0xc0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_TIM_Base_Start+0xc4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_TIM_Base_Start+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIM_Base_Start+0x70>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_TIM_Base_Start+0xcc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d010      	beq.n	8002cc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb6:	e007      	b.n	8002cc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40010400 	.word	0x40010400
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40001800 	.word	0x40001800

08002cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e041      	b.n	8002d8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f839 	bl	8002d92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fa8a 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x24>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e022      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d109      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x3e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e015      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x58>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e008      	b.n	8002e12 <HAL_TIM_PWM_Start+0x6a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07c      	b.n	8002f14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x82>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e28:	e013      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x92>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fce0 	bl	8003820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <HAL_TIM_PWM_Start+0x174>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_TIM_PWM_Start+0xcc>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <HAL_TIM_PWM_Start+0x178>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_TIM_PWM_Start+0xd0>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_TIM_PWM_Start+0xd2>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_TIM_PWM_Start+0x174>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d01d      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_TIM_PWM_Start+0x17c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIM_PWM_Start+0x180>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIM_PWM_Start+0x184>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_TIM_PWM_Start+0x178>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIM_PWM_Start+0x188>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIM_PWM_Start+0x136>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_TIM_PWM_Start+0x18c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d111      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d010      	beq.n	8002f12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f00:	e007      	b.n	8002f12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40010400 	.word	0x40010400
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40001800 	.word	0x40001800

08002f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e0ae      	b.n	80030b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	f200 809f 	bhi.w	80030a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	080030a5 	.word	0x080030a5
 8002f74:	080030a5 	.word	0x080030a5
 8002f78:	080030a5 	.word	0x080030a5
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	080030a5 	.word	0x080030a5
 8002f84:	080030a5 	.word	0x080030a5
 8002f88:	080030a5 	.word	0x080030a5
 8002f8c:	08003023 	.word	0x08003023
 8002f90:	080030a5 	.word	0x080030a5
 8002f94:	080030a5 	.word	0x080030a5
 8002f98:	080030a5 	.word	0x080030a5
 8002f9c:	08003063 	.word	0x08003063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f9f0 	bl	800338c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0208 	orr.w	r2, r2, #8
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0204 	bic.w	r2, r2, #4
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	619a      	str	r2, [r3, #24]
      break;
 8002fde:	e064      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa40 	bl	800346c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6999      	ldr	r1, [r3, #24]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	619a      	str	r2, [r3, #24]
      break;
 8003020:	e043      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa95 	bl	8003558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0208 	orr.w	r2, r2, #8
 800303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0204 	bic.w	r2, r2, #4
 800304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	61da      	str	r2, [r3, #28]
      break;
 8003060:	e023      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fae9 	bl	8003640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69d9      	ldr	r1, [r3, #28]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	021a      	lsls	r2, r3, #8
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	61da      	str	r2, [r3, #28]
      break;
 80030a2:	e002      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0x1c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0b4      	b.n	8003242 <HAL_TIM_ConfigClockSource+0x186>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d03e      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0xd4>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	f200 8087 	bhi.w	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	f000 8086 	beq.w	800322e <HAL_TIM_ConfigClockSource+0x172>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d87f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d01a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xa6>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d87b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b60      	cmp	r3, #96	; 0x60
 8003132:	d050      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d877      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b50      	cmp	r3, #80	; 0x50
 800313a:	d03c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xfa>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d873      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d058      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d86f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d064      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d86b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d060      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d867      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 800315c:	2b10      	cmp	r3, #16
 800315e:	d05a      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	e062      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f000 fb35 	bl	80037e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	609a      	str	r2, [r3, #8]
      break;
 800318e:	e04f      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f000 fb1e 	bl	80037e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b2:	609a      	str	r2, [r3, #8]
      break;
 80031b4:	e03c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa92 	bl	80036ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2150      	movs	r1, #80	; 0x50
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 faeb 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 80031d4:	e02c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fab1 	bl	800374a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2160      	movs	r1, #96	; 0x60
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fadb 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 80031f4:	e01c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fa72 	bl	80036ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	4618      	mov	r0, r3
 8003210:	f000 facb 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 8003214:	e00c      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f000 fac2 	bl	80037aa <TIM_ITRx_SetConfig>
      break;
 8003226:	e003      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e000      	b.n	8003230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800322e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003240:	7bfb      	ldrb	r3, [r7, #15]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <TIM_Base_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d00f      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3d      	ldr	r2, [pc, #244]	; (8003364 <TIM_Base_SetConfig+0x118>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <TIM_Base_SetConfig+0x120>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <TIM_Base_SetConfig+0x124>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0x114>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d027      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <TIM_Base_SetConfig+0x118>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d023      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	; (8003368 <TIM_Base_SetConfig+0x11c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d01f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <TIM_Base_SetConfig+0x120>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <TIM_Base_SetConfig+0x124>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d017      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a28      	ldr	r2, [pc, #160]	; (8003374 <TIM_Base_SetConfig+0x128>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <TIM_Base_SetConfig+0x12c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00f      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a26      	ldr	r2, [pc, #152]	; (800337c <TIM_Base_SetConfig+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00b      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <TIM_Base_SetConfig+0x134>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <TIM_Base_SetConfig+0x138>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d003      	beq.n	80032fe <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a23      	ldr	r2, [pc, #140]	; (8003388 <TIM_Base_SetConfig+0x13c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d108      	bne.n	8003310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <TIM_Base_SetConfig+0x114>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0xf8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <TIM_Base_SetConfig+0x124>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800
 8003380:	40001800 	.word	0x40001800
 8003384:	40001c00 	.word	0x40001c00
 8003388:	40002000 	.word	0x40002000

0800338c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a20      	ldr	r2, [pc, #128]	; (8003464 <TIM_OC1_SetConfig+0xd8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_OC1_SetConfig+0x64>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <TIM_OC1_SetConfig+0xdc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10c      	bne.n	800340a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0308 	bic.w	r3, r3, #8
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <TIM_OC1_SetConfig+0xd8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_OC1_SetConfig+0x8e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <TIM_OC1_SetConfig+0xdc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400

0800346c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0210 	bic.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0320 	bic.w	r3, r3, #32
 80034b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a22      	ldr	r2, [pc, #136]	; (8003550 <TIM_OC2_SetConfig+0xe4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_OC2_SetConfig+0x68>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a21      	ldr	r2, [pc, #132]	; (8003554 <TIM_OC2_SetConfig+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10d      	bne.n	80034f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a17      	ldr	r2, [pc, #92]	; (8003550 <TIM_OC2_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC2_SetConfig+0x94>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <TIM_OC2_SetConfig+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d113      	bne.n	8003528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40010400 	.word	0x40010400

08003558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a21      	ldr	r2, [pc, #132]	; (8003638 <TIM_OC3_SetConfig+0xe0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC3_SetConfig+0x66>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <TIM_OC3_SetConfig+0xe4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <TIM_OC3_SetConfig+0xe0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC3_SetConfig+0x92>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d113      	bne.n	8003612 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000
 800363c:	40010400 	.word	0x40010400

08003640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	031b      	lsls	r3, r3, #12
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <TIM_OC4_SetConfig+0xa4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC4_SetConfig+0x68>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <TIM_OC4_SetConfig+0xa8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400

080036ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 030a 	bic.w	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0210 	bic.w	r2, r3, #16
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f043 0307 	orr.w	r3, r3, #7
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	431a      	orrs	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003880:	2302      	movs	r3, #2
 8003882:	e05a      	b.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d01d      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a18      	ldr	r2, [pc, #96]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40010400 	.word	0x40010400
 800395c:	40014000 	.word	0x40014000
 8003960:	40001800 	.word	0x40001800

08003964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e03f      	b.n	80039f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fa3e 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	; 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fd7b 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b08a      	sub	sp, #40	; 0x28
 8003a02:	af02      	add	r7, sp, #8
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d17c      	bne.n	8003b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_Transmit+0x2c>
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e075      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x3e>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e06e      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a52:	f7fd fc07 	bl	8001264 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x82>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a90:	e02a      	b.n	8003ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 faf9 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e036      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e007      	b.n	8003ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cf      	bne.n	8003a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fac9 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b0ba      	sub	sp, #232	; 0xe8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_UART_IRQHandler+0x66>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fbd3 	bl	800432e <UART_Receive_IT>
      return;
 8003b88:	e256      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80de 	beq.w	8003d50 <HAL_UART_IRQHandler+0x22c>
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80d1 	beq.w	8003d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xae>
 8003bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xd2>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0xf6>
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_UART_IRQHandler+0x126>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 81ed 	beq.w	800402e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x14e>
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fb5e 	bl	800432e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_UART_IRQHandler+0x17a>
 8003c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04f      	beq.n	8003d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa66 	bl	8004170 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d141      	bne.n	8003d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1d9      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	4a7d      	ldr	r2, [pc, #500]	; (8003f00 <HAL_UART_IRQHandler+0x3dc>)
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd fc57 	bl	80015c6 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00e      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f99a 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e00a      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f996 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e006      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f992 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d4a:	e170      	b.n	800402e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	bf00      	nop
    return;
 8003d4e:	e16e      	b.n	800402e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 814a 	bne.w	8003fee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8143 	beq.w	8003fee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 813c 	beq.w	8003fee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	f040 80b4 	bne.w	8003f04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8140 	beq.w	8004032 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f080 8139 	bcs.w	8004032 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd2:	f000 8088 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1d9      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e1      	bne.n	8003e22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e3      	bne.n	8003e5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003eca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e3      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd fb00 	bl	80014e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8c0 	bl	800407c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003efc:	e099      	b.n	8004032 <HAL_UART_IRQHandler+0x50e>
 8003efe:	bf00      	nop
 8003f00:	08004237 	.word	0x08004237
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 808b 	beq.w	8004036 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8086 	beq.w	8004036 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e3      	bne.n	8003f2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3314      	adds	r3, #20
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	623b      	str	r3, [r7, #32]
   return(result);
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f86:	633a      	str	r2, [r7, #48]	; 0x30
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e3      	bne.n	8003f62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fcc:	61fa      	str	r2, [r7, #28]
 8003fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e3      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f848 	bl	800407c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fec:	e023      	b.n	8004036 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_UART_IRQHandler+0x4ea>
 8003ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f929 	bl	800425e <UART_Transmit_IT>
    return;
 800400c:	e014      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <HAL_UART_IRQHandler+0x514>
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f969 	bl	80042fe <UART_EndTransmit_IT>
    return;
 800402c:	e004      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
    return;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
      return;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
      return;
 8004036:	bf00      	nop
  }
}
 8004038:	37e8      	adds	r7, #232	; 0xe8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b090      	sub	sp, #64	; 0x40
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	e050      	b.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d04c      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b4:	f7fd f8d6 	bl	8001264 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d241      	bcs.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e4:	637a      	str	r2, [r7, #52]	; 0x34
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	61bb      	str	r3, [r7, #24]
   return(result);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e00f      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d09f      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3740      	adds	r7, #64	; 0x40
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b095      	sub	sp, #84	; 0x54
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004198:	643a      	str	r2, [r7, #64]	; 0x40
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d119      	bne.n	800421c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004208:	61ba      	str	r2, [r7, #24]
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6979      	ldr	r1, [r7, #20]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	613b      	str	r3, [r7, #16]
   return(result);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
}
 800422a:	bf00      	nop
 800422c:	3754      	adds	r7, #84	; 0x54
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ff09 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b21      	cmp	r3, #33	; 0x21
 8004270:	d13e      	bne.n	80042f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427a:	d114      	bne.n	80042a6 <UART_Transmit_IT+0x48>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d110      	bne.n	80042a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004298:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	621a      	str	r2, [r3, #32]
 80042a4:	e008      	b.n	80042b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	1c59      	adds	r1, r3, #1
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6211      	str	r1, [r2, #32]
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4619      	mov	r1, r3
 80042c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10f      	bne.n	80042ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff fe8e 	bl	8004040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08c      	sub	sp, #48	; 0x30
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b22      	cmp	r3, #34	; 0x22
 8004340:	f040 80ab 	bne.w	800449a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d117      	bne.n	800437e <UART_Receive_IT+0x50>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436c:	b29a      	uxth	r2, r3
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	1c9a      	adds	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
 800437c:	e026      	b.n	80043cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d007      	beq.n	80043a2 <UART_Receive_IT+0x74>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <UART_Receive_IT+0x82>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e008      	b.n	80043c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15a      	bne.n	8004496 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0220 	bic.w	r2, r2, #32
 80043ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	d135      	bne.n	800448c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	613b      	str	r3, [r7, #16]
   return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f023 0310 	bic.w	r3, r3, #16
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	623a      	str	r2, [r7, #32]
 8004448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	61bb      	str	r3, [r7, #24]
   return(result);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e5      	bne.n	8004426 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d10a      	bne.n	800447e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fdf9 	bl	800407c <HAL_UARTEx_RxEventCallback>
 800448a:	e002      	b.n	8004492 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fde1 	bl	8004054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e002      	b.n	800449c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800449a:	2302      	movs	r3, #2
  }
}
 800449c:	4618      	mov	r0, r3
 800449e:	3730      	adds	r7, #48	; 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b0c0      	sub	sp, #256	; 0x100
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	ea40 0301 	orr.w	r3, r0, r1
 80044cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	431a      	orrs	r2, r3
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044fc:	f021 010c 	bic.w	r1, r1, #12
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	6999      	ldr	r1, [r3, #24]
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	ea40 0301 	orr.w	r3, r0, r1
 800452a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <UART_SetConfig+0x2cc>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d005      	beq.n	8004544 <UART_SetConfig+0xa0>
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b8d      	ldr	r3, [pc, #564]	; (8004774 <UART_SetConfig+0x2d0>)
 8004540:	429a      	cmp	r2, r3
 8004542:	d104      	bne.n	800454e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe fb0a 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800454c:	e003      	b.n	8004556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454e:	f7fe faf1 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004552:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	f040 810c 	bne.w	800477c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	1891      	adds	r1, r2, r2
 800457c:	65b9      	str	r1, [r7, #88]	; 0x58
 800457e:	415b      	adcs	r3, r3
 8004580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004586:	4621      	mov	r1, r4
 8004588:	eb12 0801 	adds.w	r8, r2, r1
 800458c:	4629      	mov	r1, r5
 800458e:	eb43 0901 	adc.w	r9, r3, r1
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a6:	4690      	mov	r8, r2
 80045a8:	4699      	mov	r9, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	eb18 0303 	adds.w	r3, r8, r3
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b4:	462b      	mov	r3, r5
 80045b6:	eb49 0303 	adc.w	r3, r9, r3
 80045ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045d2:	460b      	mov	r3, r1
 80045d4:	18db      	adds	r3, r3, r3
 80045d6:	653b      	str	r3, [r7, #80]	; 0x50
 80045d8:	4613      	mov	r3, r2
 80045da:	eb42 0303 	adc.w	r3, r2, r3
 80045de:	657b      	str	r3, [r7, #84]	; 0x54
 80045e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045e8:	f7fb fe00 	bl	80001ec <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <UART_SetConfig+0x2d4>)
 80045f2:	fba3 2302 	umull	r2, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011c      	lsls	r4, r3, #4
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004604:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	64b9      	str	r1, [r7, #72]	; 0x48
 8004614:	415b      	adcs	r3, r3
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800461c:	4641      	mov	r1, r8
 800461e:	eb12 0a01 	adds.w	sl, r2, r1
 8004622:	4649      	mov	r1, r9
 8004624:	eb43 0b01 	adc.w	fp, r3, r1
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463c:	4692      	mov	sl, r2
 800463e:	469b      	mov	fp, r3
 8004640:	4643      	mov	r3, r8
 8004642:	eb1a 0303 	adds.w	r3, sl, r3
 8004646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800464a:	464b      	mov	r3, r9
 800464c:	eb4b 0303 	adc.w	r3, fp, r3
 8004650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004668:	460b      	mov	r3, r1
 800466a:	18db      	adds	r3, r3, r3
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
 800466e:	4613      	mov	r3, r2
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	647b      	str	r3, [r7, #68]	; 0x44
 8004676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800467a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800467e:	f7fb fdb5 	bl	80001ec <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4611      	mov	r1, r2
 8004688:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <UART_SetConfig+0x2d4>)
 800468a:	fba3 2301 	umull	r2, r3, r3, r1
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2264      	movs	r2, #100	; 0x64
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	1acb      	subs	r3, r1, r3
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <UART_SetConfig+0x2d4>)
 80046a0:	fba3 2302 	umull	r2, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046ac:	441c      	add	r4, r3
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c8:	415b      	adcs	r3, r3
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046d0:	4641      	mov	r1, r8
 80046d2:	1851      	adds	r1, r2, r1
 80046d4:	6339      	str	r1, [r7, #48]	; 0x30
 80046d6:	4649      	mov	r1, r9
 80046d8:	414b      	adcs	r3, r1
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046e8:	4659      	mov	r1, fp
 80046ea:	00cb      	lsls	r3, r1, #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f2:	4651      	mov	r1, sl
 80046f4:	00ca      	lsls	r2, r1, #3
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	4642      	mov	r2, r8
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800471c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800473a:	f7fb fd57 	bl	80001ec <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <UART_SetConfig+0x2d4>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	3332      	adds	r3, #50	; 0x32
 8004756:	4a08      	ldr	r2, [pc, #32]	; (8004778 <UART_SetConfig+0x2d4>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0207 	and.w	r2, r3, #7
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4422      	add	r2, r4
 800476a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800476c:	e106      	b.n	800497c <UART_SetConfig+0x4d8>
 800476e:	bf00      	nop
 8004770:	40011000 	.word	0x40011000
 8004774:	40011400 	.word	0x40011400
 8004778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004780:	2200      	movs	r2, #0
 8004782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800478a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800478e:	4642      	mov	r2, r8
 8004790:	464b      	mov	r3, r9
 8004792:	1891      	adds	r1, r2, r2
 8004794:	6239      	str	r1, [r7, #32]
 8004796:	415b      	adcs	r3, r3
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479e:	4641      	mov	r1, r8
 80047a0:	1854      	adds	r4, r2, r1
 80047a2:	4649      	mov	r1, r9
 80047a4:	eb43 0501 	adc.w	r5, r3, r1
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c4:	464b      	mov	r3, r9
 80047c6:	eb45 0303 	adc.w	r3, r5, r3
 80047ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047ea:	4629      	mov	r1, r5
 80047ec:	008b      	lsls	r3, r1, #2
 80047ee:	4621      	mov	r1, r4
 80047f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f4:	4621      	mov	r1, r4
 80047f6:	008a      	lsls	r2, r1, #2
 80047f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047fc:	f7fb fcf6 	bl	80001ec <__aeabi_uldivmod>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4b60      	ldr	r3, [pc, #384]	; (8004988 <UART_SetConfig+0x4e4>)
 8004806:	fba3 2302 	umull	r2, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	011c      	lsls	r4, r3, #4
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800481c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	61b9      	str	r1, [r7, #24]
 8004828:	415b      	adcs	r3, r3
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6139      	str	r1, [r7, #16]
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	67bb      	str	r3, [r7, #120]	; 0x78
 800487a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004888:	4649      	mov	r1, r9
 800488a:	008b      	lsls	r3, r1, #2
 800488c:	4641      	mov	r1, r8
 800488e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004892:	4641      	mov	r1, r8
 8004894:	008a      	lsls	r2, r1, #2
 8004896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800489a:	f7fb fca7 	bl	80001ec <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	4b38      	ldr	r3, [pc, #224]	; (8004988 <UART_SetConfig+0x4e4>)
 80048a6:	fba3 2301 	umull	r2, r3, r3, r1
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2264      	movs	r2, #100	; 0x64
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	1acb      	subs	r3, r1, r3
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	3332      	adds	r3, #50	; 0x32
 80048b8:	4a33      	ldr	r2, [pc, #204]	; (8004988 <UART_SetConfig+0x4e4>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c4:	441c      	add	r4, r3
 80048c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ca:	2200      	movs	r2, #0
 80048cc:	673b      	str	r3, [r7, #112]	; 0x70
 80048ce:	677a      	str	r2, [r7, #116]	; 0x74
 80048d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	415b      	adcs	r3, r3
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
 8004916:	464b      	mov	r3, r9
 8004918:	460a      	mov	r2, r1
 800491a:	eb42 0303 	adc.w	r3, r2, r3
 800491e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
 800492a:	667a      	str	r2, [r7, #100]	; 0x64
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004938:	4649      	mov	r1, r9
 800493a:	008b      	lsls	r3, r1, #2
 800493c:	4641      	mov	r1, r8
 800493e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004942:	4641      	mov	r1, r8
 8004944:	008a      	lsls	r2, r1, #2
 8004946:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800494a:	f7fb fc4f 	bl	80001ec <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <UART_SetConfig+0x4e4>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2164      	movs	r1, #100	; 0x64
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	3332      	adds	r3, #50	; 0x32
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <UART_SetConfig+0x4e4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4422      	add	r2, r4
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004988:	51eb851f 	.word	0x51eb851f

0800498c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800498c:	b084      	sub	sp, #16
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	f107 001c 	add.w	r0, r7, #28
 800499a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d122      	bne.n	80049ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 faa2 	bl	8004f28 <USB_CoreReset>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e01a      	b.n	8004a20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa96 	bl	8004f28 <USB_CoreReset>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
 8004a12:	e005      	b.n	8004a20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10b      	bne.n	8004a3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f043 0206 	orr.w	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a4a:	b004      	add	sp, #16
 8004a4c:	4770      	bx	lr

08004a4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d115      	bne.n	8004abe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fc fbec 	bl	800127c <HAL_Delay>
      ms++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa2e 	bl	8004f0c <USB_GetMode>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d01e      	beq.n	8004af4 <USB_SetCurrentMode+0x84>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b31      	cmp	r3, #49	; 0x31
 8004aba:	d9f0      	bls.n	8004a9e <USB_SetCurrentMode+0x2e>
 8004abc:	e01a      	b.n	8004af4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d115      	bne.n	8004af0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fc fbd3 	bl	800127c <HAL_Delay>
      ms++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa15 	bl	8004f0c <USB_GetMode>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <USB_SetCurrentMode+0x84>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b31      	cmp	r3, #49	; 0x31
 8004aec:	d9f0      	bls.n	8004ad0 <USB_SetCurrentMode+0x60>
 8004aee:	e001      	b.n	8004af4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e005      	b.n	8004b00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b32      	cmp	r3, #50	; 0x32
 8004af8:	d101      	bne.n	8004afe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b08:	b084      	sub	sp, #16
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e009      	b.n	8004b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3340      	adds	r3, #64	; 0x40
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0e      	cmp	r3, #14
 8004b40:	d9f2      	bls.n	8004b28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11c      	bne.n	8004b82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f043 0302 	orr.w	r3, r3, #2
 8004b5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b80:	e00b      	b.n	8004b9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bac:	4619      	mov	r1, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	680b      	ldr	r3, [r1, #0]
 8004bb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f965 	bl	8004e98 <USB_SetDevSpeed>
 8004bce:	e008      	b.n	8004be2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f960 	bl	8004e98 <USB_SetDevSpeed>
 8004bd8:	e003      	b.n	8004be2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bda:	2103      	movs	r1, #3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f95b 	bl	8004e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004be2:	2110      	movs	r1, #16
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8f3 	bl	8004dd0 <USB_FlushTxFifo>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f91f 	bl	8004e38 <USB_FlushRxFifo>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	461a      	mov	r2, r3
 8004c24:	2300      	movs	r3, #0
 8004c26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	e043      	b.n	8004cb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c44:	d118      	bne.n	8004c78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e013      	b.n	8004c8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e008      	b.n	8004c8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3b7      	bcc.n	8004c2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e043      	b.n	8004d4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cda:	d118      	bne.n	8004d0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e013      	b.n	8004d20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	461a      	mov	r2, r3
 8004d06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e008      	b.n	8004d20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d3b7      	bcc.n	8004cc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f043 0210 	orr.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <USB_DevInit+0x2c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f043 0208 	orr.w	r2, r3, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc8:	b004      	add	sp, #16
 8004dca:	4770      	bx	lr
 8004dcc:	803c3800 	.word	0x803c3800

08004dd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <USB_FlushTxFifo+0x64>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e01b      	b.n	8004e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	daf2      	bge.n	8004dde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	019b      	lsls	r3, r3, #6
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <USB_FlushTxFifo+0x64>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d901      	bls.n	8004e1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e006      	b.n	8004e28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d0f0      	beq.n	8004e08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	00030d40 	.word	0x00030d40

08004e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3301      	adds	r3, #1
 8004e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a11      	ldr	r2, [pc, #68]	; (8004e94 <USB_FlushRxFifo+0x5c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e018      	b.n	8004e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	daf2      	bge.n	8004e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2210      	movs	r2, #16
 8004e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <USB_FlushRxFifo+0x5c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e006      	b.n	8004e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d0f0      	beq.n	8004e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	00030d40 	.word	0x00030d40

08004e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ee4:	f023 0303 	bic.w	r3, r3, #3
 8004ee8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0301 	and.w	r3, r3, #1
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <USB_CoreReset+0x64>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e01b      	b.n	8004f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	daf2      	bge.n	8004f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <USB_CoreReset+0x64>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e006      	b.n	8004f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d0f0      	beq.n	8004f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	00030d40 	.word	0x00030d40

08004f90 <std>:
 8004f90:	2300      	movs	r3, #0
 8004f92:	b510      	push	{r4, lr}
 8004f94:	4604      	mov	r4, r0
 8004f96:	e9c0 3300 	strd	r3, r3, [r0]
 8004f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f9e:	6083      	str	r3, [r0, #8]
 8004fa0:	8181      	strh	r1, [r0, #12]
 8004fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fa4:	81c2      	strh	r2, [r0, #14]
 8004fa6:	6183      	str	r3, [r0, #24]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	2208      	movs	r2, #8
 8004fac:	305c      	adds	r0, #92	; 0x5c
 8004fae:	f000 f9d3 	bl	8005358 <memset>
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <std+0x38>)
 8004fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <std+0x3c>)
 8004fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <std+0x40>)
 8004fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <std+0x44>)
 8004fc0:	6224      	str	r4, [r4, #32]
 8004fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	080051a9 	.word	0x080051a9
 8004fcc:	080051cb 	.word	0x080051cb
 8004fd0:	08005203 	.word	0x08005203
 8004fd4:	08005227 	.word	0x08005227

08004fd8 <stdio_exit_handler>:
 8004fd8:	4a02      	ldr	r2, [pc, #8]	; (8004fe4 <stdio_exit_handler+0xc>)
 8004fda:	4903      	ldr	r1, [pc, #12]	; (8004fe8 <stdio_exit_handler+0x10>)
 8004fdc:	4803      	ldr	r0, [pc, #12]	; (8004fec <stdio_exit_handler+0x14>)
 8004fde:	f000 b869 	b.w	80050b4 <_fwalk_sglue>
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	08005749 	.word	0x08005749
 8004fec:	20000018 	.word	0x20000018

08004ff0 <cleanup_stdio>:
 8004ff0:	6841      	ldr	r1, [r0, #4]
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <cleanup_stdio+0x34>)
 8004ff4:	4299      	cmp	r1, r3
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	d001      	beq.n	8005000 <cleanup_stdio+0x10>
 8004ffc:	f000 fba4 	bl	8005748 <_fflush_r>
 8005000:	68a1      	ldr	r1, [r4, #8]
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <cleanup_stdio+0x38>)
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <cleanup_stdio+0x1e>
 8005008:	4620      	mov	r0, r4
 800500a:	f000 fb9d 	bl	8005748 <_fflush_r>
 800500e:	68e1      	ldr	r1, [r4, #12]
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <cleanup_stdio+0x3c>)
 8005012:	4299      	cmp	r1, r3
 8005014:	d004      	beq.n	8005020 <cleanup_stdio+0x30>
 8005016:	4620      	mov	r0, r4
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	f000 bb94 	b.w	8005748 <_fflush_r>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	bf00      	nop
 8005024:	200008a4 	.word	0x200008a4
 8005028:	2000090c 	.word	0x2000090c
 800502c:	20000974 	.word	0x20000974

08005030 <global_stdio_init.part.0>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <global_stdio_init.part.0+0x30>)
 8005034:	4c0b      	ldr	r4, [pc, #44]	; (8005064 <global_stdio_init.part.0+0x34>)
 8005036:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <global_stdio_init.part.0+0x38>)
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	4620      	mov	r0, r4
 800503c:	2200      	movs	r2, #0
 800503e:	2104      	movs	r1, #4
 8005040:	f7ff ffa6 	bl	8004f90 <std>
 8005044:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005048:	2201      	movs	r2, #1
 800504a:	2109      	movs	r1, #9
 800504c:	f7ff ffa0 	bl	8004f90 <std>
 8005050:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005054:	2202      	movs	r2, #2
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800505a:	2112      	movs	r1, #18
 800505c:	f7ff bf98 	b.w	8004f90 <std>
 8005060:	200009dc 	.word	0x200009dc
 8005064:	200008a4 	.word	0x200008a4
 8005068:	08004fd9 	.word	0x08004fd9

0800506c <__sfp_lock_acquire>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__sfp_lock_acquire+0x8>)
 800506e:	f000 b9eb 	b.w	8005448 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	200009e5 	.word	0x200009e5

08005078 <__sfp_lock_release>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__sfp_lock_release+0x8>)
 800507a:	f000 b9e6 	b.w	800544a <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	200009e5 	.word	0x200009e5

08005084 <__sinit>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	f7ff fff0 	bl	800506c <__sfp_lock_acquire>
 800508c:	6a23      	ldr	r3, [r4, #32]
 800508e:	b11b      	cbz	r3, 8005098 <__sinit+0x14>
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	f7ff bff0 	b.w	8005078 <__sfp_lock_release>
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <__sinit+0x28>)
 800509a:	6223      	str	r3, [r4, #32]
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <__sinit+0x2c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f5      	bne.n	8005090 <__sinit+0xc>
 80050a4:	f7ff ffc4 	bl	8005030 <global_stdio_init.part.0>
 80050a8:	e7f2      	b.n	8005090 <__sinit+0xc>
 80050aa:	bf00      	nop
 80050ac:	08004ff1 	.word	0x08004ff1
 80050b0:	200009dc 	.word	0x200009dc

080050b4 <_fwalk_sglue>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	4607      	mov	r7, r0
 80050ba:	4688      	mov	r8, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	2600      	movs	r6, #0
 80050c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c4:	f1b9 0901 	subs.w	r9, r9, #1
 80050c8:	d505      	bpl.n	80050d6 <_fwalk_sglue+0x22>
 80050ca:	6824      	ldr	r4, [r4, #0]
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d1f7      	bne.n	80050c0 <_fwalk_sglue+0xc>
 80050d0:	4630      	mov	r0, r6
 80050d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d907      	bls.n	80050ec <_fwalk_sglue+0x38>
 80050dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050e0:	3301      	adds	r3, #1
 80050e2:	d003      	beq.n	80050ec <_fwalk_sglue+0x38>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4638      	mov	r0, r7
 80050e8:	47c0      	blx	r8
 80050ea:	4306      	orrs	r6, r0
 80050ec:	3568      	adds	r5, #104	; 0x68
 80050ee:	e7e9      	b.n	80050c4 <_fwalk_sglue+0x10>

080050f0 <_puts_r>:
 80050f0:	6a03      	ldr	r3, [r0, #32]
 80050f2:	b570      	push	{r4, r5, r6, lr}
 80050f4:	6884      	ldr	r4, [r0, #8]
 80050f6:	4605      	mov	r5, r0
 80050f8:	460e      	mov	r6, r1
 80050fa:	b90b      	cbnz	r3, 8005100 <_puts_r+0x10>
 80050fc:	f7ff ffc2 	bl	8005084 <__sinit>
 8005100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005102:	07db      	lsls	r3, r3, #31
 8005104:	d405      	bmi.n	8005112 <_puts_r+0x22>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	0598      	lsls	r0, r3, #22
 800510a:	d402      	bmi.n	8005112 <_puts_r+0x22>
 800510c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510e:	f000 f99b 	bl	8005448 <__retarget_lock_acquire_recursive>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	0719      	lsls	r1, r3, #28
 8005116:	d513      	bpl.n	8005140 <_puts_r+0x50>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	b18b      	cbz	r3, 8005140 <_puts_r+0x50>
 800511c:	3e01      	subs	r6, #1
 800511e:	68a3      	ldr	r3, [r4, #8]
 8005120:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005124:	3b01      	subs	r3, #1
 8005126:	60a3      	str	r3, [r4, #8]
 8005128:	b9e9      	cbnz	r1, 8005166 <_puts_r+0x76>
 800512a:	2b00      	cmp	r3, #0
 800512c:	da2e      	bge.n	800518c <_puts_r+0x9c>
 800512e:	4622      	mov	r2, r4
 8005130:	210a      	movs	r1, #10
 8005132:	4628      	mov	r0, r5
 8005134:	f000 f87b 	bl	800522e <__swbuf_r>
 8005138:	3001      	adds	r0, #1
 800513a:	d007      	beq.n	800514c <_puts_r+0x5c>
 800513c:	250a      	movs	r5, #10
 800513e:	e007      	b.n	8005150 <_puts_r+0x60>
 8005140:	4621      	mov	r1, r4
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f8b0 	bl	80052a8 <__swsetup_r>
 8005148:	2800      	cmp	r0, #0
 800514a:	d0e7      	beq.n	800511c <_puts_r+0x2c>
 800514c:	f04f 35ff 	mov.w	r5, #4294967295
 8005150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005152:	07da      	lsls	r2, r3, #31
 8005154:	d405      	bmi.n	8005162 <_puts_r+0x72>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	059b      	lsls	r3, r3, #22
 800515a:	d402      	bmi.n	8005162 <_puts_r+0x72>
 800515c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515e:	f000 f974 	bl	800544a <__retarget_lock_release_recursive>
 8005162:	4628      	mov	r0, r5
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	2b00      	cmp	r3, #0
 8005168:	da04      	bge.n	8005174 <_puts_r+0x84>
 800516a:	69a2      	ldr	r2, [r4, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	dc06      	bgt.n	800517e <_puts_r+0x8e>
 8005170:	290a      	cmp	r1, #10
 8005172:	d004      	beq.n	800517e <_puts_r+0x8e>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	6022      	str	r2, [r4, #0]
 800517a:	7019      	strb	r1, [r3, #0]
 800517c:	e7cf      	b.n	800511e <_puts_r+0x2e>
 800517e:	4622      	mov	r2, r4
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f854 	bl	800522e <__swbuf_r>
 8005186:	3001      	adds	r0, #1
 8005188:	d1c9      	bne.n	800511e <_puts_r+0x2e>
 800518a:	e7df      	b.n	800514c <_puts_r+0x5c>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	250a      	movs	r5, #10
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	6022      	str	r2, [r4, #0]
 8005194:	701d      	strb	r5, [r3, #0]
 8005196:	e7db      	b.n	8005150 <_puts_r+0x60>

08005198 <puts>:
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <puts+0xc>)
 800519a:	4601      	mov	r1, r0
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	f7ff bfa7 	b.w	80050f0 <_puts_r>
 80051a2:	bf00      	nop
 80051a4:	20000064 	.word	0x20000064

080051a8 <__sread>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b0:	f000 f8fc 	bl	80053ac <_read_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	bfab      	itete	ge
 80051b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ba:	89a3      	ldrhlt	r3, [r4, #12]
 80051bc:	181b      	addge	r3, r3, r0
 80051be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051c2:	bfac      	ite	ge
 80051c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80051c6:	81a3      	strhlt	r3, [r4, #12]
 80051c8:	bd10      	pop	{r4, pc}

080051ca <__swrite>:
 80051ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ce:	461f      	mov	r7, r3
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	4605      	mov	r5, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4616      	mov	r6, r2
 80051da:	d505      	bpl.n	80051e8 <__swrite+0x1e>
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2302      	movs	r3, #2
 80051e2:	2200      	movs	r2, #0
 80051e4:	f000 f8d0 	bl	8005388 <_lseek_r>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	4632      	mov	r2, r6
 80051f6:	463b      	mov	r3, r7
 80051f8:	4628      	mov	r0, r5
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	f000 b8e7 	b.w	80053d0 <_write_r>

08005202 <__sseek>:
 8005202:	b510      	push	{r4, lr}
 8005204:	460c      	mov	r4, r1
 8005206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520a:	f000 f8bd 	bl	8005388 <_lseek_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	bf15      	itete	ne
 8005214:	6560      	strne	r0, [r4, #84]	; 0x54
 8005216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800521a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800521e:	81a3      	strheq	r3, [r4, #12]
 8005220:	bf18      	it	ne
 8005222:	81a3      	strhne	r3, [r4, #12]
 8005224:	bd10      	pop	{r4, pc}

08005226 <__sclose>:
 8005226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522a:	f000 b89d 	b.w	8005368 <_close_r>

0800522e <__swbuf_r>:
 800522e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005230:	460e      	mov	r6, r1
 8005232:	4614      	mov	r4, r2
 8005234:	4605      	mov	r5, r0
 8005236:	b118      	cbz	r0, 8005240 <__swbuf_r+0x12>
 8005238:	6a03      	ldr	r3, [r0, #32]
 800523a:	b90b      	cbnz	r3, 8005240 <__swbuf_r+0x12>
 800523c:	f7ff ff22 	bl	8005084 <__sinit>
 8005240:	69a3      	ldr	r3, [r4, #24]
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	071a      	lsls	r2, r3, #28
 8005248:	d525      	bpl.n	8005296 <__swbuf_r+0x68>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b31b      	cbz	r3, 8005296 <__swbuf_r+0x68>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	6922      	ldr	r2, [r4, #16]
 8005252:	1a98      	subs	r0, r3, r2
 8005254:	6963      	ldr	r3, [r4, #20]
 8005256:	b2f6      	uxtb	r6, r6
 8005258:	4283      	cmp	r3, r0
 800525a:	4637      	mov	r7, r6
 800525c:	dc04      	bgt.n	8005268 <__swbuf_r+0x3a>
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fa71 	bl	8005748 <_fflush_r>
 8005266:	b9e0      	cbnz	r0, 80052a2 <__swbuf_r+0x74>
 8005268:	68a3      	ldr	r3, [r4, #8]
 800526a:	3b01      	subs	r3, #1
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	6022      	str	r2, [r4, #0]
 8005274:	701e      	strb	r6, [r3, #0]
 8005276:	6962      	ldr	r2, [r4, #20]
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	429a      	cmp	r2, r3
 800527c:	d004      	beq.n	8005288 <__swbuf_r+0x5a>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	07db      	lsls	r3, r3, #31
 8005282:	d506      	bpl.n	8005292 <__swbuf_r+0x64>
 8005284:	2e0a      	cmp	r6, #10
 8005286:	d104      	bne.n	8005292 <__swbuf_r+0x64>
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 fa5c 	bl	8005748 <_fflush_r>
 8005290:	b938      	cbnz	r0, 80052a2 <__swbuf_r+0x74>
 8005292:	4638      	mov	r0, r7
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	f000 f805 	bl	80052a8 <__swsetup_r>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0d5      	beq.n	800524e <__swbuf_r+0x20>
 80052a2:	f04f 37ff 	mov.w	r7, #4294967295
 80052a6:	e7f4      	b.n	8005292 <__swbuf_r+0x64>

080052a8 <__swsetup_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4b2a      	ldr	r3, [pc, #168]	; (8005354 <__swsetup_r+0xac>)
 80052ac:	4605      	mov	r5, r0
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	460c      	mov	r4, r1
 80052b2:	b118      	cbz	r0, 80052bc <__swsetup_r+0x14>
 80052b4:	6a03      	ldr	r3, [r0, #32]
 80052b6:	b90b      	cbnz	r3, 80052bc <__swsetup_r+0x14>
 80052b8:	f7ff fee4 	bl	8005084 <__sinit>
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052c2:	0718      	lsls	r0, r3, #28
 80052c4:	d422      	bmi.n	800530c <__swsetup_r+0x64>
 80052c6:	06d9      	lsls	r1, r3, #27
 80052c8:	d407      	bmi.n	80052da <__swsetup_r+0x32>
 80052ca:	2309      	movs	r3, #9
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	e034      	b.n	8005344 <__swsetup_r+0x9c>
 80052da:	0758      	lsls	r0, r3, #29
 80052dc:	d512      	bpl.n	8005304 <__swsetup_r+0x5c>
 80052de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e0:	b141      	cbz	r1, 80052f4 <__swsetup_r+0x4c>
 80052e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e6:	4299      	cmp	r1, r3
 80052e8:	d002      	beq.n	80052f0 <__swsetup_r+0x48>
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 f8ae 	bl	800544c <_free_r>
 80052f0:	2300      	movs	r3, #0
 80052f2:	6363      	str	r3, [r4, #52]	; 0x34
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	2300      	movs	r3, #0
 80052fe:	6063      	str	r3, [r4, #4]
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f043 0308 	orr.w	r3, r3, #8
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	b94b      	cbnz	r3, 8005324 <__swsetup_r+0x7c>
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531a:	d003      	beq.n	8005324 <__swsetup_r+0x7c>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 fa60 	bl	80057e4 <__smakebuf_r>
 8005324:	89a0      	ldrh	r0, [r4, #12]
 8005326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800532a:	f010 0301 	ands.w	r3, r0, #1
 800532e:	d00a      	beq.n	8005346 <__swsetup_r+0x9e>
 8005330:	2300      	movs	r3, #0
 8005332:	60a3      	str	r3, [r4, #8]
 8005334:	6963      	ldr	r3, [r4, #20]
 8005336:	425b      	negs	r3, r3
 8005338:	61a3      	str	r3, [r4, #24]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	b943      	cbnz	r3, 8005350 <__swsetup_r+0xa8>
 800533e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005342:	d1c4      	bne.n	80052ce <__swsetup_r+0x26>
 8005344:	bd38      	pop	{r3, r4, r5, pc}
 8005346:	0781      	lsls	r1, r0, #30
 8005348:	bf58      	it	pl
 800534a:	6963      	ldrpl	r3, [r4, #20]
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	e7f4      	b.n	800533a <__swsetup_r+0x92>
 8005350:	2000      	movs	r0, #0
 8005352:	e7f7      	b.n	8005344 <__swsetup_r+0x9c>
 8005354:	20000064 	.word	0x20000064

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <_close_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	; (8005384 <_close_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fe69 	bl	800104a <_close>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_close_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_close_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200009e0 	.word	0x200009e0

08005388 <_lseek_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d07      	ldr	r5, [pc, #28]	; (80053a8 <_lseek_r+0x20>)
 800538c:	4604      	mov	r4, r0
 800538e:	4608      	mov	r0, r1
 8005390:	4611      	mov	r1, r2
 8005392:	2200      	movs	r2, #0
 8005394:	602a      	str	r2, [r5, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	f7fb fe7e 	bl	8001098 <_lseek>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_lseek_r+0x1e>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_lseek_r+0x1e>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	200009e0 	.word	0x200009e0

080053ac <_read_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d07      	ldr	r5, [pc, #28]	; (80053cc <_read_r+0x20>)
 80053b0:	4604      	mov	r4, r0
 80053b2:	4608      	mov	r0, r1
 80053b4:	4611      	mov	r1, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	602a      	str	r2, [r5, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7fb fe0c 	bl	8000fd8 <_read>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_read_r+0x1e>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_read_r+0x1e>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	200009e0 	.word	0x200009e0

080053d0 <_write_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	4d07      	ldr	r5, [pc, #28]	; (80053f0 <_write_r+0x20>)
 80053d4:	4604      	mov	r4, r0
 80053d6:	4608      	mov	r0, r1
 80053d8:	4611      	mov	r1, r2
 80053da:	2200      	movs	r2, #0
 80053dc:	602a      	str	r2, [r5, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	f7fb fe17 	bl	8001012 <_write>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_write_r+0x1e>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_write_r+0x1e>
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	200009e0 	.word	0x200009e0

080053f4 <__errno>:
 80053f4:	4b01      	ldr	r3, [pc, #4]	; (80053fc <__errno+0x8>)
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000064 	.word	0x20000064

08005400 <__libc_init_array>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4d0d      	ldr	r5, [pc, #52]	; (8005438 <__libc_init_array+0x38>)
 8005404:	4c0d      	ldr	r4, [pc, #52]	; (800543c <__libc_init_array+0x3c>)
 8005406:	1b64      	subs	r4, r4, r5
 8005408:	10a4      	asrs	r4, r4, #2
 800540a:	2600      	movs	r6, #0
 800540c:	42a6      	cmp	r6, r4
 800540e:	d109      	bne.n	8005424 <__libc_init_array+0x24>
 8005410:	4d0b      	ldr	r5, [pc, #44]	; (8005440 <__libc_init_array+0x40>)
 8005412:	4c0c      	ldr	r4, [pc, #48]	; (8005444 <__libc_init_array+0x44>)
 8005414:	f000 fa54 	bl	80058c0 <_init>
 8005418:	1b64      	subs	r4, r4, r5
 800541a:	10a4      	asrs	r4, r4, #2
 800541c:	2600      	movs	r6, #0
 800541e:	42a6      	cmp	r6, r4
 8005420:	d105      	bne.n	800542e <__libc_init_array+0x2e>
 8005422:	bd70      	pop	{r4, r5, r6, pc}
 8005424:	f855 3b04 	ldr.w	r3, [r5], #4
 8005428:	4798      	blx	r3
 800542a:	3601      	adds	r6, #1
 800542c:	e7ee      	b.n	800540c <__libc_init_array+0xc>
 800542e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005432:	4798      	blx	r3
 8005434:	3601      	adds	r6, #1
 8005436:	e7f2      	b.n	800541e <__libc_init_array+0x1e>
 8005438:	08005928 	.word	0x08005928
 800543c:	08005928 	.word	0x08005928
 8005440:	08005928 	.word	0x08005928
 8005444:	0800592c 	.word	0x0800592c

08005448 <__retarget_lock_acquire_recursive>:
 8005448:	4770      	bx	lr

0800544a <__retarget_lock_release_recursive>:
 800544a:	4770      	bx	lr

0800544c <_free_r>:
 800544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800544e:	2900      	cmp	r1, #0
 8005450:	d044      	beq.n	80054dc <_free_r+0x90>
 8005452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005456:	9001      	str	r0, [sp, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f1a1 0404 	sub.w	r4, r1, #4
 800545e:	bfb8      	it	lt
 8005460:	18e4      	addlt	r4, r4, r3
 8005462:	f000 f8df 	bl	8005624 <__malloc_lock>
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <_free_r+0x94>)
 8005468:	9801      	ldr	r0, [sp, #4]
 800546a:	6813      	ldr	r3, [r2, #0]
 800546c:	b933      	cbnz	r3, 800547c <_free_r+0x30>
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	6014      	str	r4, [r2, #0]
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005478:	f000 b8da 	b.w	8005630 <__malloc_unlock>
 800547c:	42a3      	cmp	r3, r4
 800547e:	d908      	bls.n	8005492 <_free_r+0x46>
 8005480:	6825      	ldr	r5, [r4, #0]
 8005482:	1961      	adds	r1, r4, r5
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1949      	addeq	r1, r1, r5
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	e7ed      	b.n	800546e <_free_r+0x22>
 8005492:	461a      	mov	r2, r3
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b10b      	cbz	r3, 800549c <_free_r+0x50>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d9fa      	bls.n	8005492 <_free_r+0x46>
 800549c:	6811      	ldr	r1, [r2, #0]
 800549e:	1855      	adds	r5, r2, r1
 80054a0:	42a5      	cmp	r5, r4
 80054a2:	d10b      	bne.n	80054bc <_free_r+0x70>
 80054a4:	6824      	ldr	r4, [r4, #0]
 80054a6:	4421      	add	r1, r4
 80054a8:	1854      	adds	r4, r2, r1
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	6011      	str	r1, [r2, #0]
 80054ae:	d1e0      	bne.n	8005472 <_free_r+0x26>
 80054b0:	681c      	ldr	r4, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	6053      	str	r3, [r2, #4]
 80054b6:	440c      	add	r4, r1
 80054b8:	6014      	str	r4, [r2, #0]
 80054ba:	e7da      	b.n	8005472 <_free_r+0x26>
 80054bc:	d902      	bls.n	80054c4 <_free_r+0x78>
 80054be:	230c      	movs	r3, #12
 80054c0:	6003      	str	r3, [r0, #0]
 80054c2:	e7d6      	b.n	8005472 <_free_r+0x26>
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf04      	itt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	bf04      	itt	eq
 80054d4:	1949      	addeq	r1, r1, r5
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	6054      	str	r4, [r2, #4]
 80054da:	e7ca      	b.n	8005472 <_free_r+0x26>
 80054dc:	b003      	add	sp, #12
 80054de:	bd30      	pop	{r4, r5, pc}
 80054e0:	200009e8 	.word	0x200009e8

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0e      	ldr	r6, [pc, #56]	; (8005520 <sbrk_aligned+0x3c>)
 80054e8:	460c      	mov	r4, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	4605      	mov	r5, r0
 80054ee:	b911      	cbnz	r1, 80054f6 <sbrk_aligned+0x12>
 80054f0:	f000 f9d6 	bl	80058a0 <_sbrk_r>
 80054f4:	6030      	str	r0, [r6, #0]
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 f9d1 	bl	80058a0 <_sbrk_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d00a      	beq.n	8005518 <sbrk_aligned+0x34>
 8005502:	1cc4      	adds	r4, r0, #3
 8005504:	f024 0403 	bic.w	r4, r4, #3
 8005508:	42a0      	cmp	r0, r4
 800550a:	d007      	beq.n	800551c <sbrk_aligned+0x38>
 800550c:	1a21      	subs	r1, r4, r0
 800550e:	4628      	mov	r0, r5
 8005510:	f000 f9c6 	bl	80058a0 <_sbrk_r>
 8005514:	3001      	adds	r0, #1
 8005516:	d101      	bne.n	800551c <sbrk_aligned+0x38>
 8005518:	f04f 34ff 	mov.w	r4, #4294967295
 800551c:	4620      	mov	r0, r4
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	200009ec 	.word	0x200009ec

08005524 <_malloc_r>:
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	1ccd      	adds	r5, r1, #3
 800552a:	f025 0503 	bic.w	r5, r5, #3
 800552e:	3508      	adds	r5, #8
 8005530:	2d0c      	cmp	r5, #12
 8005532:	bf38      	it	cc
 8005534:	250c      	movcc	r5, #12
 8005536:	2d00      	cmp	r5, #0
 8005538:	4607      	mov	r7, r0
 800553a:	db01      	blt.n	8005540 <_malloc_r+0x1c>
 800553c:	42a9      	cmp	r1, r5
 800553e:	d905      	bls.n	800554c <_malloc_r+0x28>
 8005540:	230c      	movs	r3, #12
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	2600      	movs	r6, #0
 8005546:	4630      	mov	r0, r6
 8005548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005620 <_malloc_r+0xfc>
 8005550:	f000 f868 	bl	8005624 <__malloc_lock>
 8005554:	f8d8 3000 	ldr.w	r3, [r8]
 8005558:	461c      	mov	r4, r3
 800555a:	bb5c      	cbnz	r4, 80055b4 <_malloc_r+0x90>
 800555c:	4629      	mov	r1, r5
 800555e:	4638      	mov	r0, r7
 8005560:	f7ff ffc0 	bl	80054e4 <sbrk_aligned>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	4604      	mov	r4, r0
 8005568:	d155      	bne.n	8005616 <_malloc_r+0xf2>
 800556a:	f8d8 4000 	ldr.w	r4, [r8]
 800556e:	4626      	mov	r6, r4
 8005570:	2e00      	cmp	r6, #0
 8005572:	d145      	bne.n	8005600 <_malloc_r+0xdc>
 8005574:	2c00      	cmp	r4, #0
 8005576:	d048      	beq.n	800560a <_malloc_r+0xe6>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	4631      	mov	r1, r6
 800557c:	4638      	mov	r0, r7
 800557e:	eb04 0903 	add.w	r9, r4, r3
 8005582:	f000 f98d 	bl	80058a0 <_sbrk_r>
 8005586:	4581      	cmp	r9, r0
 8005588:	d13f      	bne.n	800560a <_malloc_r+0xe6>
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	1a6d      	subs	r5, r5, r1
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ffa7 	bl	80054e4 <sbrk_aligned>
 8005596:	3001      	adds	r0, #1
 8005598:	d037      	beq.n	800560a <_malloc_r+0xe6>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	442b      	add	r3, r5
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f8d8 3000 	ldr.w	r3, [r8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d038      	beq.n	800561a <_malloc_r+0xf6>
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	42a2      	cmp	r2, r4
 80055ac:	d12b      	bne.n	8005606 <_malloc_r+0xe2>
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e00f      	b.n	80055d4 <_malloc_r+0xb0>
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	1b52      	subs	r2, r2, r5
 80055b8:	d41f      	bmi.n	80055fa <_malloc_r+0xd6>
 80055ba:	2a0b      	cmp	r2, #11
 80055bc:	d917      	bls.n	80055ee <_malloc_r+0xca>
 80055be:	1961      	adds	r1, r4, r5
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	6025      	str	r5, [r4, #0]
 80055c4:	bf18      	it	ne
 80055c6:	6059      	strne	r1, [r3, #4]
 80055c8:	6863      	ldr	r3, [r4, #4]
 80055ca:	bf08      	it	eq
 80055cc:	f8c8 1000 	streq.w	r1, [r8]
 80055d0:	5162      	str	r2, [r4, r5]
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	4638      	mov	r0, r7
 80055d6:	f104 060b 	add.w	r6, r4, #11
 80055da:	f000 f829 	bl	8005630 <__malloc_unlock>
 80055de:	f026 0607 	bic.w	r6, r6, #7
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	1af2      	subs	r2, r6, r3
 80055e6:	d0ae      	beq.n	8005546 <_malloc_r+0x22>
 80055e8:	1b9b      	subs	r3, r3, r6
 80055ea:	50a3      	str	r3, [r4, r2]
 80055ec:	e7ab      	b.n	8005546 <_malloc_r+0x22>
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	6862      	ldr	r2, [r4, #4]
 80055f2:	d1dd      	bne.n	80055b0 <_malloc_r+0x8c>
 80055f4:	f8c8 2000 	str.w	r2, [r8]
 80055f8:	e7ec      	b.n	80055d4 <_malloc_r+0xb0>
 80055fa:	4623      	mov	r3, r4
 80055fc:	6864      	ldr	r4, [r4, #4]
 80055fe:	e7ac      	b.n	800555a <_malloc_r+0x36>
 8005600:	4634      	mov	r4, r6
 8005602:	6876      	ldr	r6, [r6, #4]
 8005604:	e7b4      	b.n	8005570 <_malloc_r+0x4c>
 8005606:	4613      	mov	r3, r2
 8005608:	e7cc      	b.n	80055a4 <_malloc_r+0x80>
 800560a:	230c      	movs	r3, #12
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4638      	mov	r0, r7
 8005610:	f000 f80e 	bl	8005630 <__malloc_unlock>
 8005614:	e797      	b.n	8005546 <_malloc_r+0x22>
 8005616:	6025      	str	r5, [r4, #0]
 8005618:	e7dc      	b.n	80055d4 <_malloc_r+0xb0>
 800561a:	605b      	str	r3, [r3, #4]
 800561c:	deff      	udf	#255	; 0xff
 800561e:	bf00      	nop
 8005620:	200009e8 	.word	0x200009e8

08005624 <__malloc_lock>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__malloc_lock+0x8>)
 8005626:	f7ff bf0f 	b.w	8005448 <__retarget_lock_acquire_recursive>
 800562a:	bf00      	nop
 800562c:	200009e4 	.word	0x200009e4

08005630 <__malloc_unlock>:
 8005630:	4801      	ldr	r0, [pc, #4]	; (8005638 <__malloc_unlock+0x8>)
 8005632:	f7ff bf0a 	b.w	800544a <__retarget_lock_release_recursive>
 8005636:	bf00      	nop
 8005638:	200009e4 	.word	0x200009e4

0800563c <__sflush_r>:
 800563c:	898a      	ldrh	r2, [r1, #12]
 800563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	0710      	lsls	r0, r2, #28
 8005646:	460c      	mov	r4, r1
 8005648:	d458      	bmi.n	80056fc <__sflush_r+0xc0>
 800564a:	684b      	ldr	r3, [r1, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc05      	bgt.n	800565c <__sflush_r+0x20>
 8005650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	dc02      	bgt.n	800565c <__sflush_r+0x20>
 8005656:	2000      	movs	r0, #0
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565e:	2e00      	cmp	r6, #0
 8005660:	d0f9      	beq.n	8005656 <__sflush_r+0x1a>
 8005662:	2300      	movs	r3, #0
 8005664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005668:	682f      	ldr	r7, [r5, #0]
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	d032      	beq.n	80056d6 <__sflush_r+0x9a>
 8005670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	075a      	lsls	r2, r3, #29
 8005676:	d505      	bpl.n	8005684 <__sflush_r+0x48>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	1ac0      	subs	r0, r0, r3
 800567c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567e:	b10b      	cbz	r3, 8005684 <__sflush_r+0x48>
 8005680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005682:	1ac0      	subs	r0, r0, r3
 8005684:	2300      	movs	r3, #0
 8005686:	4602      	mov	r2, r0
 8005688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800568a:	6a21      	ldr	r1, [r4, #32]
 800568c:	4628      	mov	r0, r5
 800568e:	47b0      	blx	r6
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	d106      	bne.n	80056a4 <__sflush_r+0x68>
 8005696:	6829      	ldr	r1, [r5, #0]
 8005698:	291d      	cmp	r1, #29
 800569a:	d82b      	bhi.n	80056f4 <__sflush_r+0xb8>
 800569c:	4a29      	ldr	r2, [pc, #164]	; (8005744 <__sflush_r+0x108>)
 800569e:	410a      	asrs	r2, r1
 80056a0:	07d6      	lsls	r6, r2, #31
 80056a2:	d427      	bmi.n	80056f4 <__sflush_r+0xb8>
 80056a4:	2200      	movs	r2, #0
 80056a6:	6062      	str	r2, [r4, #4]
 80056a8:	04d9      	lsls	r1, r3, #19
 80056aa:	6922      	ldr	r2, [r4, #16]
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	d504      	bpl.n	80056ba <__sflush_r+0x7e>
 80056b0:	1c42      	adds	r2, r0, #1
 80056b2:	d101      	bne.n	80056b8 <__sflush_r+0x7c>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b903      	cbnz	r3, 80056ba <__sflush_r+0x7e>
 80056b8:	6560      	str	r0, [r4, #84]	; 0x54
 80056ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056bc:	602f      	str	r7, [r5, #0]
 80056be:	2900      	cmp	r1, #0
 80056c0:	d0c9      	beq.n	8005656 <__sflush_r+0x1a>
 80056c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c6:	4299      	cmp	r1, r3
 80056c8:	d002      	beq.n	80056d0 <__sflush_r+0x94>
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff febe 	bl	800544c <_free_r>
 80056d0:	2000      	movs	r0, #0
 80056d2:	6360      	str	r0, [r4, #52]	; 0x34
 80056d4:	e7c0      	b.n	8005658 <__sflush_r+0x1c>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	d1c8      	bne.n	8005672 <__sflush_r+0x36>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c5      	beq.n	8005672 <__sflush_r+0x36>
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d001      	beq.n	80056ee <__sflush_r+0xb2>
 80056ea:	2b16      	cmp	r3, #22
 80056ec:	d101      	bne.n	80056f2 <__sflush_r+0xb6>
 80056ee:	602f      	str	r7, [r5, #0]
 80056f0:	e7b1      	b.n	8005656 <__sflush_r+0x1a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7ad      	b.n	8005658 <__sflush_r+0x1c>
 80056fc:	690f      	ldr	r7, [r1, #16]
 80056fe:	2f00      	cmp	r7, #0
 8005700:	d0a9      	beq.n	8005656 <__sflush_r+0x1a>
 8005702:	0793      	lsls	r3, r2, #30
 8005704:	680e      	ldr	r6, [r1, #0]
 8005706:	bf08      	it	eq
 8005708:	694b      	ldreq	r3, [r1, #20]
 800570a:	600f      	str	r7, [r1, #0]
 800570c:	bf18      	it	ne
 800570e:	2300      	movne	r3, #0
 8005710:	eba6 0807 	sub.w	r8, r6, r7
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	dd9c      	ble.n	8005656 <__sflush_r+0x1a>
 800571c:	6a21      	ldr	r1, [r4, #32]
 800571e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005720:	4643      	mov	r3, r8
 8005722:	463a      	mov	r2, r7
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	2800      	cmp	r0, #0
 800572a:	dc06      	bgt.n	800573a <__sflush_r+0xfe>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e78e      	b.n	8005658 <__sflush_r+0x1c>
 800573a:	4407      	add	r7, r0
 800573c:	eba8 0800 	sub.w	r8, r8, r0
 8005740:	e7e9      	b.n	8005716 <__sflush_r+0xda>
 8005742:	bf00      	nop
 8005744:	dfbffffe 	.word	0xdfbffffe

08005748 <_fflush_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4605      	mov	r5, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b913      	cbnz	r3, 8005758 <_fflush_r+0x10>
 8005752:	2500      	movs	r5, #0
 8005754:	4628      	mov	r0, r5
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	b118      	cbz	r0, 8005762 <_fflush_r+0x1a>
 800575a:	6a03      	ldr	r3, [r0, #32]
 800575c:	b90b      	cbnz	r3, 8005762 <_fflush_r+0x1a>
 800575e:	f7ff fc91 	bl	8005084 <__sinit>
 8005762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f3      	beq.n	8005752 <_fflush_r+0xa>
 800576a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800576c:	07d0      	lsls	r0, r2, #31
 800576e:	d404      	bmi.n	800577a <_fflush_r+0x32>
 8005770:	0599      	lsls	r1, r3, #22
 8005772:	d402      	bmi.n	800577a <_fflush_r+0x32>
 8005774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005776:	f7ff fe67 	bl	8005448 <__retarget_lock_acquire_recursive>
 800577a:	4628      	mov	r0, r5
 800577c:	4621      	mov	r1, r4
 800577e:	f7ff ff5d 	bl	800563c <__sflush_r>
 8005782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005784:	07da      	lsls	r2, r3, #31
 8005786:	4605      	mov	r5, r0
 8005788:	d4e4      	bmi.n	8005754 <_fflush_r+0xc>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	059b      	lsls	r3, r3, #22
 800578e:	d4e1      	bmi.n	8005754 <_fflush_r+0xc>
 8005790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005792:	f7ff fe5a 	bl	800544a <__retarget_lock_release_recursive>
 8005796:	e7dd      	b.n	8005754 <_fflush_r+0xc>

08005798 <__swhatbuf_r>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	460c      	mov	r4, r1
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	b096      	sub	sp, #88	; 0x58
 80057a4:	4615      	mov	r5, r2
 80057a6:	461e      	mov	r6, r3
 80057a8:	da0d      	bge.n	80057c6 <__swhatbuf_r+0x2e>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	bf0c      	ite	eq
 80057b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80057ba:	2340      	movne	r3, #64	; 0x40
 80057bc:	2000      	movs	r0, #0
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	b016      	add	sp, #88	; 0x58
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	466a      	mov	r2, sp
 80057c8:	f000 f848 	bl	800585c <_fstat_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	dbec      	blt.n	80057aa <__swhatbuf_r+0x12>
 80057d0:	9901      	ldr	r1, [sp, #4]
 80057d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057da:	4259      	negs	r1, r3
 80057dc:	4159      	adcs	r1, r3
 80057de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e2:	e7eb      	b.n	80057bc <__swhatbuf_r+0x24>

080057e4 <__smakebuf_r>:
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057e8:	079d      	lsls	r5, r3, #30
 80057ea:	4606      	mov	r6, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	d507      	bpl.n	8005800 <__smakebuf_r+0x1c>
 80057f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	6123      	str	r3, [r4, #16]
 80057f8:	2301      	movs	r3, #1
 80057fa:	6163      	str	r3, [r4, #20]
 80057fc:	b002      	add	sp, #8
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	ab01      	add	r3, sp, #4
 8005802:	466a      	mov	r2, sp
 8005804:	f7ff ffc8 	bl	8005798 <__swhatbuf_r>
 8005808:	9900      	ldr	r1, [sp, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	4630      	mov	r0, r6
 800580e:	f7ff fe89 	bl	8005524 <_malloc_r>
 8005812:	b948      	cbnz	r0, 8005828 <__smakebuf_r+0x44>
 8005814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d4ef      	bmi.n	80057fc <__smakebuf_r+0x18>
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	81a3      	strh	r3, [r4, #12]
 8005826:	e7e3      	b.n	80057f0 <__smakebuf_r+0xc>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	6020      	str	r0, [r4, #0]
 800582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	6163      	str	r3, [r4, #20]
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	6120      	str	r0, [r4, #16]
 800583a:	b15b      	cbz	r3, 8005854 <__smakebuf_r+0x70>
 800583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005840:	4630      	mov	r0, r6
 8005842:	f000 f81d 	bl	8005880 <_isatty_r>
 8005846:	b128      	cbz	r0, 8005854 <__smakebuf_r+0x70>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	431d      	orrs	r5, r3
 8005858:	81a5      	strh	r5, [r4, #12]
 800585a:	e7cf      	b.n	80057fc <__smakebuf_r+0x18>

0800585c <_fstat_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4d07      	ldr	r5, [pc, #28]	; (800587c <_fstat_r+0x20>)
 8005860:	2300      	movs	r3, #0
 8005862:	4604      	mov	r4, r0
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f7fb fbfa 	bl	8001062 <_fstat>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d102      	bne.n	8005878 <_fstat_r+0x1c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	b103      	cbz	r3, 8005878 <_fstat_r+0x1c>
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	200009e0 	.word	0x200009e0

08005880 <_isatty_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4d06      	ldr	r5, [pc, #24]	; (800589c <_isatty_r+0x1c>)
 8005884:	2300      	movs	r3, #0
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	602b      	str	r3, [r5, #0]
 800588c:	f7fb fbf9 	bl	8001082 <_isatty>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_isatty_r+0x1a>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_isatty_r+0x1a>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200009e0 	.word	0x200009e0

080058a0 <_sbrk_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d06      	ldr	r5, [pc, #24]	; (80058bc <_sbrk_r+0x1c>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fb fc02 	bl	80010b4 <_sbrk>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_sbrk_r+0x1a>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_sbrk_r+0x1a>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	200009e0 	.word	0x200009e0

080058c0 <_init>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr

080058cc <_fini>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr
