
lcd_I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e98  08008e98  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea0  08008ea0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea0  08008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005930  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000599c  2000599c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001eda9  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040a8  00000000  00000000  0003ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001808  00000000  00000000  00042f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000129d  00000000  00000000  00044738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000277a3  00000000  00000000  000459d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c855  00000000  00000000  0006d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e949b  00000000  00000000  000899cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006bfc  00000000  00000000  00172e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00179a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008e04 	.word	0x08008e04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08008e04 	.word	0x08008e04

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <app_main>:
//		osMutexRelease(mutex_lcd);
//	}
//}

void app_main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
//		"Mutex_LCD",                          // human readable mutex name
//		osMutexPrioInherit,    // attr_bits
//		NULL,                                     // memory for control block
//		0U                                        // size for control block
//	};
	lcd_init();
 80004f0:	f000 f898 	bl	8000624 <lcd_init>
	lcd_disp_on();
 80004f4:	f000 f8af 	bl	8000656 <lcd_disp_on>
	lcd_clear_display();
 80004f8:	f000 f8be 	bl	8000678 <lcd_clear_display>
	lcd_home();
 80004fc:	f000 f8b2 	bl	8000664 <lcd_home>
	lcd_print_string("Hello22");
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <app_main+0x20>)
 8000502:	f000 f8c3 	bl	800068c <lcd_print_string>
//	osThreadNew(DispThread_1, NULL, NULL);
//	osThreadNew(DispThread_2, NULL, NULL);
//	mutex_lcd = osMutexNew(&m_attr);
//
//	osKernelStart();
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	08008e1c 	.word	0x08008e1c

08000510 <app_init>:
{
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
	return ch;
}
void app_init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  printf("System start....\r\n");
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <app_init+0x10>)
 8000516:	f008 f87d 	bl	8008614 <puts>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	08008e24 	.word	0x08008e24

08000524 <app>:

void app(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  app_main();
 8000528:	f7ff ffe0 	bl	80004ec <app_main>
  app_init();
 800052c:	f7ff fff0 	bl	8000510 <app_init>
  while (1);
 8000530:	e7fe      	b.n	8000530 <app+0xc>
	...

08000534 <lcd_send_cmd>:
  * @param  cmd
  * @param  None
  * @retval None
  */
static void lcd_send_cmd (char cmd)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af02      	add	r7, sp, #8
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f023 030f 	bic.w	r3, r3, #15
 8000544:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	f043 030c 	orr.w	r3, r3, #12
 8000552:	b2db      	uxtb	r3, r3
 8000554:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	b2db      	uxtb	r3, r3
 800055e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	f043 030c 	orr.w	r3, r3, #12
 8000566:	b2db      	uxtb	r3, r3
 8000568:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	b2db      	uxtb	r3, r3
 8000572:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100)!= HAL_OK)
 8000574:	e007      	b.n	8000586 <lcd_send_cmd+0x52>
	  {
	    /* Error_Handler() function is called when Timout error occurs */
	    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <lcd_send_cmd+0x74>)
 8000578:	f002 f936 	bl	80027e8 <HAL_I2C_GetError>
 800057c:	4603      	mov	r3, r0
 800057e:	2b04      	cmp	r3, #4
 8000580:	d001      	beq.n	8000586 <lcd_send_cmd+0x52>
	    {
	      Error_Handler();
 8000582:	f000 fac5 	bl	8000b10 <Error_Handler>
	while(HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100)!= HAL_OK)
 8000586:	f107 0208 	add.w	r2, r7, #8
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2304      	movs	r3, #4
 8000590:	214e      	movs	r1, #78	; 0x4e
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <lcd_send_cmd+0x74>)
 8000594:	f001 fdd0 	bl	8002138 <HAL_I2C_Master_Transmit>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1eb      	bne.n	8000576 <lcd_send_cmd+0x42>
	    }
	  }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200002b0 	.word	0x200002b0

080005ac <lcd_send_data>:
  * @param  data
  * @param  None
  * @retval None
  */
static void lcd_send_data (char data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f023 030f 	bic.w	r3, r3, #15
 80005bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	f043 030d 	orr.w	r3, r3, #13
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0309 	orr.w	r3, r3, #9
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005e2:	7bbb      	ldrb	r3, [r7, #14]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100)!= HAL_OK)
 80005ec:	e007      	b.n	80005fe <lcd_send_data+0x52>
	  {
	    /* Error_Handler() function is called when Timout error occurs */
	    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <lcd_send_data+0x74>)
 80005f0:	f002 f8fa 	bl	80027e8 <HAL_I2C_GetError>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d001      	beq.n	80005fe <lcd_send_data+0x52>
	    {
	      Error_Handler();
 80005fa:	f000 fa89 	bl	8000b10 <Error_Handler>
	while(HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100)!= HAL_OK)
 80005fe:	f107 0208 	add.w	r2, r7, #8
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2304      	movs	r3, #4
 8000608:	214e      	movs	r1, #78	; 0x4e
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <lcd_send_data+0x74>)
 800060c:	f001 fd94 	bl	8002138 <HAL_I2C_Master_Transmit>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1eb      	bne.n	80005ee <lcd_send_data+0x42>
	    }
	  }
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200002b0 	.word	0x200002b0

08000624 <lcd_init>:
  * @param  None
  * @param  None
  * @retval None
  */
void lcd_init (void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	  //Initialization of HD44780-based LCD (4-bit HW)
	lcd_send_cmd (0x33);
 8000628:	2033      	movs	r0, #51	; 0x33
 800062a:	f7ff ff83 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800062e:	2032      	movs	r0, #50	; 0x32
 8000630:	f7ff ff80 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x28);   //Function Set 4-bit mode
 8000634:	2028      	movs	r0, #40	; 0x28
 8000636:	f7ff ff7d 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x0c);   //Display On/Off Control
 800063a:	200c      	movs	r0, #12
 800063c:	f7ff ff7a 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x06);   //Entry mode set
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff77 	bl	8000534 <lcd_send_cmd>
	lcd_send_cmd (0x02);   //Clear Display
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff ff74 	bl	8000534 <lcd_send_cmd>
	//Minimum delay to wait before driving LCD module
	HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f000 fddb 	bl	8001208 <HAL_Delay>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <lcd_disp_on>:
  * @param  None
  * @param  None
  * @retval None
  */
void lcd_disp_on(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x0C);
 800065a:	200c      	movs	r0, #12
 800065c:	f7ff ff6a 	bl	8000534 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <lcd_home>:
  * @param  None
  * @param  None
  * @retval None
  */
void lcd_home(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x02);
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff ff63 	bl	8000534 <lcd_send_cmd>
  HAL_Delay(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f000 fdca 	bl	8001208 <HAL_Delay>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_clear_display>:
  * @param  None
  * @param  None
  * @retval None
  */
void lcd_clear_display(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ff59 	bl	8000534 <lcd_send_cmd>
  HAL_Delay(2);
 8000682:	2002      	movs	r0, #2
 8000684:	f000 fdc0 	bl	8001208 <HAL_Delay>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <lcd_print_string>:
  * @param  Text to be displayed
  * @param  None
  * @retval None
  */
void lcd_print_string (char *str)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000694:	e006      	b.n	80006a4 <lcd_print_string+0x18>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff84 	bl	80005ac <lcd_send_data>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f4      	bne.n	8000696 <lcd_print_string+0xa>
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fd32 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f820 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f96e 	bl	80009a4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006c8:	f000 f886 	bl	80007d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 f912 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d0:	f000 f93a 	bl	8000948 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80006d4:	f000 f8ce 	bl	8000874 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app();
 80006d8:	f7ff ff24 	bl	8000524 <app>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006dc:	f005 f91a 	bl	8005914 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e0:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <main+0x40>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <main+0x44>)
 80006e6:	f005 f95f 	bl	80059a8 <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <main+0x48>)
 80006ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f0:	f005 f934 	bl	800595c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x3c>
 80006f6:	bf00      	nop
 80006f8:	08008e5c 	.word	0x08008e5c
 80006fc:	08000b01 	.word	0x08000b01
 8000700:	20000854 	.word	0x20000854

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f008 f85e 	bl	80087d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000764:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000778:	23a8      	movs	r3, #168	; 0xa8
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000780:	2307      	movs	r3, #7
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fe33 	bl	80043f4 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f9bc 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2105      	movs	r1, #5
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 f894 	bl	80048e4 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 f9a5 	bl	8000b10 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ETH_Init+0x84>)
 80007de:	4a20      	ldr	r2, [pc, #128]	; (8000860 <MX_ETH_Init+0x88>)
 80007e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_ETH_Init+0x8c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_ETH_Init+0x8c>)
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f0:	22e1      	movs	r2, #225	; 0xe1
 80007f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_ETH_Init+0x8c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_ETH_Init+0x8c>)
 8000802:	2200      	movs	r2, #0
 8000804:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ETH_Init+0x84>)
 8000808:	4a16      	ldr	r2, [pc, #88]	; (8000864 <MX_ETH_Init+0x8c>)
 800080a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_ETH_Init+0x84>)
 800080e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000812:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ETH_Init+0x84>)
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ETH_Init+0x90>)
 8000818:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ETH_Init+0x84>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x94>)
 800081e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ETH_Init+0x84>)
 8000822:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000826:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_ETH_Init+0x84>)
 800082a:	f000 fe53 	bl	80014d4 <HAL_ETH_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000834:	f000 f96c 	bl	8000b10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000838:	2238      	movs	r2, #56	; 0x38
 800083a:	2100      	movs	r1, #0
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_ETH_Init+0x98>)
 800083e:	f007 ffc9 	bl	80087d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_ETH_Init+0x98>)
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_ETH_Init+0x98>)
 800084a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800084e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_ETH_Init+0x98>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000200 	.word	0x20000200
 8000860:	40028000 	.word	0x40028000
 8000864:	20000858 	.word	0x20000858
 8000868:	20000160 	.word	0x20000160
 800086c:	200000c0 	.word	0x200000c0
 8000870:	20000088 	.word	0x20000088

08000874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_I2C1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <MX_I2C1_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_I2C1_Init+0x74>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008b2:	f001 fafd 	bl	8001eb0 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f928 	bl	8000b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008c4:	f003 fbfe 	bl	80040c4 <HAL_I2CEx_ConfigAnalogFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f000 f91f 	bl	8000b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_I2C1_Init+0x74>)
 80008d6:	f003 fc31 	bl	800413c <HAL_I2CEx_ConfigDigitalFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f916 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200002b0 	.word	0x200002b0
 80008ec:	40005400 	.word	0x40005400
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART3_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800092c:	f004 f9fa 	bl	8004d24 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f8eb 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000304 	.word	0x20000304
 8000944:	40004800 	.word	0x40004800

08000948 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2204      	movs	r2, #4
 8000958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2202      	movs	r2, #2
 800095e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2202      	movs	r2, #2
 800096a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	f003 fc15 	bl	80041ba <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f8bb 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000348 	.word	0x20000348

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a44      	ldr	r2, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <MX_GPIO_Init+0x14c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a36      	ldr	r2, [pc, #216]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a28      	ldr	r2, [pc, #160]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a68:	4822      	ldr	r0, [pc, #136]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a6a:	f001 fa07 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000a74:	f001 fa02 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481b      	ldr	r0, [pc, #108]	; (8000afc <MX_GPIO_Init+0x158>)
 8000a90:	f001 f848 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a94:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000aae:	f001 f839 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab2:	2340      	movs	r3, #64	; 0x40
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000aca:	f001 f82b 	bl	8001b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000ae2:	f001 f81f 	bl	8001b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40021800 	.word	0x40021800
 8000afc:	40020800 	.word	0x40020800

08000b00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f004 ffe0 	bl	8005ace <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartDefaultTask+0x8>

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_MspInit+0x54>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_MspInit+0x54>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x54>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_MspInit+0x54>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_MspInit+0x54>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_MspInit+0x54>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
 8000b62:	f000 fc50 	bl	8001406 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a55      	ldr	r2, [pc, #340]	; (8000ce8 <HAL_ETH_MspInit+0x174>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	f040 80a4 	bne.w	8000ce0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	4b53      	ldr	r3, [pc, #332]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a52      	ldr	r2, [pc, #328]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
 8000bb8:	4b4c      	ldr	r3, [pc, #304]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a4b      	ldr	r2, [pc, #300]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b49      	ldr	r3, [pc, #292]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a44      	ldr	r2, [pc, #272]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b42      	ldr	r3, [pc, #264]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a36      	ldr	r2, [pc, #216]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a2f      	ldr	r2, [pc, #188]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b2d      	ldr	r3, [pc, #180]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a28      	ldr	r2, [pc, #160]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c5c:	2332      	movs	r3, #50	; 0x32
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <HAL_ETH_MspInit+0x17c>)
 8000c78:	f000 ff54 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c7c:	2386      	movs	r3, #134	; 0x86
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8c:	230b      	movs	r3, #11
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <HAL_ETH_MspInit+0x180>)
 8000c98:	f000 ff44 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cae:	230b      	movs	r3, #11
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <HAL_ETH_MspInit+0x184>)
 8000cba:	f000 ff33 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <HAL_ETH_MspInit+0x188>)
 8000cdc:	f000 ff22 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40028000 	.word	0x40028000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40021800 	.word	0x40021800

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_I2C_MspInit+0xa4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d13c      	bne.n	8000d9c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d50:	2304      	movs	r3, #4
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4814      	ldr	r0, [pc, #80]	; (8000dac <HAL_I2C_MspInit+0xac>)
 8000d5c:	f000 fee2 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_I2C_MspInit+0xa8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2106      	movs	r1, #6
 8000d80:	201f      	movs	r0, #31
 8000d82:	f000 fb40 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d86:	201f      	movs	r0, #31
 8000d88:	f000 fb59 	bl	800143e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2106      	movs	r1, #6
 8000d90:	2020      	movs	r0, #32
 8000d92:	f000 fb38 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d96:	2020      	movs	r0, #32
 8000d98:	f000 fb51 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40005400 	.word	0x40005400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020400 	.word	0x40020400

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12c      	bne.n	8000e2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x8c>)
 8000e28:	f000 fe7c 	bl	8001b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004800 	.word	0x40004800
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e60:	d13f      	bne.n	8000ee2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e90:	230a      	movs	r3, #10
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <HAL_PCD_MspInit+0xb0>)
 8000e9c:	f000 fe42 	bl	8001b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <HAL_PCD_MspInit+0xb0>)
 8000eb6:	f000 fe35 	bl	8001b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_PCD_MspInit+0xac>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f950 	bl	80011c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f28:	f006 fa08 	bl	800733c <xTaskGetSchedulerState>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d001      	beq.n	8000f36 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f32:	f006 fff1 	bl	8007f18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <I2C1_EV_IRQHandler+0x10>)
 8000f42:	f001 f9f7 	bl	8002334 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002b0 	.word	0x200002b0

08000f50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <I2C1_ER_IRQHandler+0x10>)
 8000f56:	f001 fb40 	bl	80025da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200002b0 	.word	0x200002b0

08000f64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
  }

  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
  }
  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f007 fc54 	bl	800891c <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20030000 	.word	0x20030000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000860 	.word	0x20000860
 80010a8:	200059a0 	.word	0x200059a0

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f007 fc13 	bl	8008928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fad9 	bl	80006b8 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001108:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001114:	08008ea8 	.word	0x08008ea8
  ldr r2, =_sbss
 8001118:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800111c:	2000599c 	.word	0x2000599c

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fce0 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000864 	.word	0x20000864

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000864 	.word	0x20000864

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d004      	beq.n	8001490 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e00c      	b.n	80014aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2205      	movs	r2, #5
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c4:	b2db      	uxtb	r3, r3
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06c      	b.n	80015c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2223      	movs	r2, #35	; 0x23
 80014f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fb3b 	bl	8000b74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_ETH_Init+0xf4>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_ETH_Init+0xf4>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <HAL_ETH_Init+0xf4>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <HAL_ETH_Init+0xf8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_ETH_Init+0xf8>)
 8001520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001524:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_ETH_Init+0xf8>)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_ETH_Init+0xf8>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_ETH_Init+0xf8>)
 8001536:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001550:	f7ff fe4e 	bl	80011f0 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001556:	e011      	b.n	800157c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001558:	f7ff fe4a 	bl	80011f0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001566:	d909      	bls.n	800157c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	22e0      	movs	r2, #224	; 0xe0
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e021      	b.n	80015c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e4      	bne.n	8001558 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f958 	bl	8001844 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f9ff 	bl	8001998 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa55 	bl	8001a4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f9bd 	bl	8001928 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2210      	movs	r2, #16
 80015ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800

080015d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <ETH_SetMACConfig+0x15c>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	7c1b      	ldrb	r3, [r3, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <ETH_SetMACConfig+0x28>
 80015f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015f6:	e000      	b.n	80015fa <ETH_SetMACConfig+0x2a>
 80015f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7c5b      	ldrb	r3, [r3, #17]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <ETH_SetMACConfig+0x38>
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	e000      	b.n	800160a <ETH_SetMACConfig+0x3a>
 8001608:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800160a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001610:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7fdb      	ldrb	r3, [r3, #31]
 8001616:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001618:	431a      	orrs	r2, r3
                        macconf->Speed |
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800161e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	7f92      	ldrb	r2, [r2, #30]
 8001624:	2a00      	cmp	r2, #0
 8001626:	d102      	bne.n	800162e <ETH_SetMACConfig+0x5e>
 8001628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162c:	e000      	b.n	8001630 <ETH_SetMACConfig+0x60>
 800162e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001630:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	7f1b      	ldrb	r3, [r3, #28]
 8001636:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001638:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800163e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	791b      	ldrb	r3, [r3, #4]
 8001644:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001646:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800164e:	2a00      	cmp	r2, #0
 8001650:	d102      	bne.n	8001658 <ETH_SetMACConfig+0x88>
 8001652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001656:	e000      	b.n	800165a <ETH_SetMACConfig+0x8a>
 8001658:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800165a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7bdb      	ldrb	r3, [r3, #15]
 8001660:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001662:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001668:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001670:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001672:	4313      	orrs	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fdbc 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d101      	bne.n	80016be <ETH_SetMACConfig+0xee>
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	e000      	b.n	80016c0 <ETH_SetMACConfig+0xf0>
 80016be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80016ce:	2a01      	cmp	r2, #1
 80016d0:	d101      	bne.n	80016d6 <ETH_SetMACConfig+0x106>
 80016d2:	2208      	movs	r2, #8
 80016d4:	e000      	b.n	80016d8 <ETH_SetMACConfig+0x108>
 80016d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d101      	bne.n	80016e8 <ETH_SetMACConfig+0x118>
 80016e4:	2204      	movs	r2, #4
 80016e6:	e000      	b.n	80016ea <ETH_SetMACConfig+0x11a>
 80016e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80016f2:	2a01      	cmp	r2, #1
 80016f4:	d101      	bne.n	80016fa <ETH_SetMACConfig+0x12a>
 80016f6:	2202      	movs	r2, #2
 80016f8:	e000      	b.n	80016fc <ETH_SetMACConfig+0x12c>
 80016fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016fc:	4313      	orrs	r3, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fd77 	bl	8001208 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	619a      	str	r2, [r3, #24]
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	ff20810f 	.word	0xff20810f

08001730 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <ETH_SetDMAConfig+0x110>)
 800174a:	4013      	ands	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7b1b      	ldrb	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <ETH_SetDMAConfig+0x2c>
 8001756:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800175a:	e000      	b.n	800175e <ETH_SetDMAConfig+0x2e>
 800175c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	7b5b      	ldrb	r3, [r3, #13]
 8001762:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001764:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	7f52      	ldrb	r2, [r2, #29]
 800176a:	2a00      	cmp	r2, #0
 800176c:	d102      	bne.n	8001774 <ETH_SetDMAConfig+0x44>
 800176e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001772:	e000      	b.n	8001776 <ETH_SetDMAConfig+0x46>
 8001774:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001776:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	7b9b      	ldrb	r3, [r3, #14]
 800177c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800177e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001784:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800178c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7f9b      	ldrb	r3, [r3, #30]
 8001792:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001794:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800179a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017a4:	4313      	orrs	r3, r2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff fd1e 	bl	8001208 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d4:	461a      	mov	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001802:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001808:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001812:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001816:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff fcef 	bl	8001208 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	f8de3f23 	.word	0xf8de3f23

08001844 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a6      	sub	sp, #152	; 0x98
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001858:	2300      	movs	r3, #0
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001880:	2300      	movs	r3, #0
 8001882:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800188a:	2300      	movs	r3, #0
 800188c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fe86 	bl	80015d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001904:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff08 	bl	8001730 <ETH_SetDMAConfig>
}
 8001920:	bf00      	nop
 8001922:	3798      	adds	r7, #152	; 0x98
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3305      	adds	r3, #5
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	3204      	adds	r2, #4
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <ETH_MACAddressConfig+0x68>)
 800194a:	4413      	add	r3, r2
 800194c:	461a      	mov	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3303      	adds	r3, #3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	061a      	lsls	r2, r3, #24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3302      	adds	r3, #2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <ETH_MACAddressConfig+0x6c>)
 800197a:	4413      	add	r3, r2
 800197c:	461a      	mov	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40028040 	.word	0x40028040
 8001994:	40028044 	.word	0x40028044

08001998 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e03e      	b.n	8001a24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	3206      	adds	r2, #6
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d80c      	bhi.n	8001a08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68d9      	ldr	r1, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	e004      	b.n	8001a12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9bd      	bls.n	80019a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	611a      	str	r2, [r3, #16]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e046      	b.n	8001ae6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6919      	ldr	r1, [r3, #16]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a9c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	3212      	adds	r2, #18
 8001ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d80c      	bhi.n	8001ad6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6919      	ldr	r1, [r3, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	e004      	b.n	8001ae0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d9b5      	bls.n	8001a58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	60da      	str	r2, [r3, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	e177      	b.n	8001e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8166 	bne.w	8001e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d005      	beq.n	8001b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d130      	bne.n	8001bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 0201 	and.w	r2, r3, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d017      	beq.n	8001c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d123      	bne.n	8001c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	08da      	lsrs	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3208      	adds	r2, #8
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80c0 	beq.w	8001e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b66      	ldr	r3, [pc, #408]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a65      	ldr	r2, [pc, #404]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_GPIO_Init+0x324>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <HAL_GPIO_Init+0x32c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d037      	beq.n	8001d62 <HAL_GPIO_Init+0x23e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <HAL_GPIO_Init+0x330>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d031      	beq.n	8001d5e <HAL_GPIO_Init+0x23a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a56      	ldr	r2, [pc, #344]	; (8001e58 <HAL_GPIO_Init+0x334>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x236>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a55      	ldr	r2, [pc, #340]	; (8001e5c <HAL_GPIO_Init+0x338>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x232>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a54      	ldr	r2, [pc, #336]	; (8001e60 <HAL_GPIO_Init+0x33c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x22e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a53      	ldr	r2, [pc, #332]	; (8001e64 <HAL_GPIO_Init+0x340>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x22a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_GPIO_Init+0x344>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x226>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a51      	ldr	r2, [pc, #324]	; (8001e6c <HAL_GPIO_Init+0x348>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x222>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a50      	ldr	r2, [pc, #320]	; (8001e70 <HAL_GPIO_Init+0x34c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x21e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4f      	ldr	r2, [pc, #316]	; (8001e74 <HAL_GPIO_Init+0x350>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x21a>
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	e012      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d3e:	230a      	movs	r3, #10
 8001d40:	e010      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d42:	2308      	movs	r3, #8
 8001d44:	e00e      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00c      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x240>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	; (8001e4c <HAL_GPIO_Init+0x328>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a29      	ldr	r2, [pc, #164]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_GPIO_Init+0x354>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f ae84 	bls.w	8001b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40021400 	.word	0x40021400
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40021c00 	.word	0x40021c00
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40022400 	.word	0x40022400
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e12b      	b.n	800211a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe ff12 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	; 0x24
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f14:	f002 fede 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8001f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a81      	ldr	r2, [pc, #516]	; (8002124 <HAL_I2C_Init+0x274>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d807      	bhi.n	8001f34 <HAL_I2C_Init+0x84>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a80      	ldr	r2, [pc, #512]	; (8002128 <HAL_I2C_Init+0x278>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	e006      	b.n	8001f42 <HAL_I2C_Init+0x92>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a7d      	ldr	r2, [pc, #500]	; (800212c <HAL_I2C_Init+0x27c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	bf94      	ite	ls
 8001f3c:	2301      	movls	r3, #1
 8001f3e:	2300      	movhi	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0e7      	b.n	800211a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4a78      	ldr	r2, [pc, #480]	; (8002130 <HAL_I2C_Init+0x280>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_I2C_Init+0x274>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d802      	bhi.n	8001f84 <HAL_I2C_Init+0xd4>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3301      	adds	r3, #1
 8001f82:	e009      	b.n	8001f98 <HAL_I2C_Init+0xe8>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a69      	ldr	r2, [pc, #420]	; (8002134 <HAL_I2C_Init+0x284>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3301      	adds	r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	495c      	ldr	r1, [pc, #368]	; (8002124 <HAL_I2C_Init+0x274>)
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d819      	bhi.n	8001fec <HAL_I2C_Init+0x13c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1e59      	subs	r1, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fcc:	400b      	ands	r3, r1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_I2C_Init+0x138>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e59      	subs	r1, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	e051      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e04f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d111      	bne.n	8002018 <HAL_I2C_Init+0x168>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e012      	b.n	800203e <HAL_I2C_Init+0x18e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Init+0x196>
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <HAL_I2C_Init+0x1dc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10e      	bne.n	800206c <HAL_I2C_Init+0x1bc>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e58      	subs	r0, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206a:	e00f      	b.n	800208c <HAL_I2C_Init+0x1dc>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e58      	subs	r0, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	0099      	lsls	r1, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	3301      	adds	r3, #1
 8002084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6911      	ldr	r1, [r2, #16]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68d2      	ldr	r2, [r2, #12]
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	000186a0 	.word	0x000186a0
 8002128:	001e847f 	.word	0x001e847f
 800212c:	003d08ff 	.word	0x003d08ff
 8002130:	431bde83 	.word	0x431bde83
 8002134:	10624dd3 	.word	0x10624dd3

08002138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	460b      	mov	r3, r1
 8002146:	817b      	strh	r3, [r7, #10]
 8002148:	4613      	mov	r3, r2
 800214a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff f850 	bl	80011f0 <HAL_GetTick>
 8002150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	f040 80e0 	bne.w	8002320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2319      	movs	r3, #25
 8002166:	2201      	movs	r2, #1
 8002168:	4970      	ldr	r1, [pc, #448]	; (800232c <HAL_I2C_Master_Transmit+0x1f4>)
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f001 fdd6 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	e0d3      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_I2C_Master_Transmit+0x50>
 8002184:	2302      	movs	r3, #2
 8002186:	e0cc      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d007      	beq.n	80021ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2210      	movs	r2, #16
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	893a      	ldrh	r2, [r7, #8]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a50      	ldr	r2, [pc, #320]	; (8002330 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021f0:	8979      	ldrh	r1, [r7, #10]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f001 fc66 	bl	8003ac8 <I2C_MasterRequestWrite>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e08d      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800221c:	e066      	b.n	80022ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 fe50 	bl	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b04      	cmp	r3, #4
 8002286:	d11b      	bne.n	80022c0 <HAL_I2C_Master_Transmit+0x188>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d017      	beq.n	80022c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6a39      	ldr	r1, [r7, #32]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f001 fe40 	bl	8003f4a <I2C_WaitOnBTFFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e01a      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d194      	bne.n	800221e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	00100002 	.word	0x00100002
 8002330:	ffff0000 	.word	0xffff0000

08002334 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002354:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	2b10      	cmp	r3, #16
 8002362:	d003      	beq.n	800236c <HAL_I2C_EV_IRQHandler+0x38>
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	f040 80b1 	bne.w	80024ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800238c:	d003      	beq.n	8002396 <HAL_I2C_EV_IRQHandler+0x62>
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002394:	d101      	bne.n	800239a <HAL_I2C_EV_IRQHandler+0x66>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_I2C_EV_IRQHandler+0x68>
 800239a:	2300      	movs	r3, #0
 800239c:	2b01      	cmp	r3, #1
 800239e:	f000 8114 	beq.w	80025ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_I2C_EV_IRQHandler+0x90>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f001 fe69 	bl	800408e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fd6a 	bl	8002e96 <I2C_Master_SB>
 80023c2:	e083      	b.n	80024cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_I2C_EV_IRQHandler+0xac>
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fde2 	bl	8002fa2 <I2C_Master_ADD10>
 80023de:	e075      	b.n	80024cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_I2C_EV_IRQHandler+0xc8>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fdfe 	bl	8002ff6 <I2C_Master_ADDR>
 80023fa:	e067      	b.n	80024cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d036      	beq.n	8002474 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002414:	f000 80db 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0x10a>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0x10a>
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f9e2 	bl	8002800 <I2C_MasterTransmit_TXE>
 800243c:	e046      	b.n	80024cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80c2 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80bc 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002456:	7bbb      	ldrb	r3, [r7, #14]
 8002458:	2b21      	cmp	r3, #33	; 0x21
 800245a:	d103      	bne.n	8002464 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa6b 	bl	8002938 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002462:	e0b4      	b.n	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	f040 80b1 	bne.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fad9 	bl	8002a24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002472:	e0ac      	b.n	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002482:	f000 80a4 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_I2C_EV_IRQHandler+0x178>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_I2C_EV_IRQHandler+0x178>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fb51 	bl	8002b4c <I2C_MasterReceive_RXNE>
 80024aa:	e00f      	b.n	80024cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 808b 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8085 	beq.w	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fbfc 	bl	8002cc2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ca:	e080      	b.n	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
 80024cc:	e07f      	b.n	80025ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e007      	b.n	80024f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d011      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x1ea>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002514:	69b9      	ldr	r1, [r7, #24]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 ffbc 	bl	8003494 <I2C_Slave_ADDR>
 800251c:	e05a      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x206>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fff6 	bl	8003524 <I2C_Slave_STOPF>
 8002538:	e04c      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800253a:	7bbb      	ldrb	r3, [r7, #14]
 800253c:	2b21      	cmp	r3, #33	; 0x21
 800253e:	d002      	beq.n	8002546 <HAL_I2C_EV_IRQHandler+0x212>
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	2b29      	cmp	r3, #41	; 0x29
 8002544:	d120      	bne.n	8002588 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x238>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x238>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fed7 	bl	8003318 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800256a:	e032      	b.n	80025d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d02d      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d028      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 ff06 	bl	8003392 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002586:	e024      	b.n	80025d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x27a>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x27a>
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ff14 	bl	80033d4 <I2C_SlaveReceive_RXNE>
 80025ac:	e012      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 ff44 	bl	8003450 <I2C_SlaveReceive_BTF>
 80025c8:	e004      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b08a      	sub	sp, #40	; 0x28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_I2C_ER_IRQHandler+0x4a>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002622:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_I2C_ER_IRQHandler+0x70>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002648:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03e      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d039      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800265e:	7efb      	ldrb	r3, [r7, #27]
 8002660:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002678:	7ebb      	ldrb	r3, [r7, #26]
 800267a:	2b20      	cmp	r3, #32
 800267c:	d112      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xca>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10f      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xca>
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b21      	cmp	r3, #33	; 0x21
 8002688:	d008      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b29      	cmp	r3, #41	; 0x29
 800268e:	d005      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0xc2>
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b28      	cmp	r3, #40	; 0x28
 8002694:	d106      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b21      	cmp	r3, #33	; 0x21
 800269a:	d103      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f871 	bl	8003784 <I2C_Slave_AF>
 80026a2:	e016      	b.n	80026d2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026b6:	7efb      	ldrb	r3, [r7, #27]
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d002      	beq.n	80026c2 <HAL_I2C_ER_IRQHandler+0xe8>
 80026bc:	7efb      	ldrb	r3, [r7, #27]
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x11e>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80026f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f001 f8aa 	bl	8003864 <I2C_ITError>
  }
}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	70fb      	strb	r3, [r7, #3]
 8002774:	4613      	mov	r3, r2
 8002776:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002816:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d150      	bne.n	80028c8 <I2C_MasterTransmit_TXE+0xc8>
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b21      	cmp	r3, #33	; 0x21
 800282a:	d14d      	bne.n	80028c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b08      	cmp	r3, #8
 8002830:	d01d      	beq.n	800286e <I2C_MasterTransmit_TXE+0x6e>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b20      	cmp	r3, #32
 8002836:	d01a      	beq.n	800286e <I2C_MasterTransmit_TXE+0x6e>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800283e:	d016      	beq.n	800286e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800284e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2211      	movs	r2, #17
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff56 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800286c:	e060      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800287c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d107      	bne.n	80028b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff71 	bl	8002798 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028b6:	e03b      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff29 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028c6:	e033      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b21      	cmp	r3, #33	; 0x21
 80028cc:	d005      	beq.n	80028da <I2C_MasterTransmit_TXE+0xda>
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d12d      	bne.n	8002930 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b22      	cmp	r3, #34	; 0x22
 80028d8:	d12a      	bne.n	8002930 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028f4:	e01c      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d103      	bne.n	800290a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f88e 	bl	8002a24 <I2C_MemoryTransmit_TXE_BTF>
}
 8002908:	e012      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800292e:	e7ff      	b.n	8002930 <I2C_MasterTransmit_TXE+0x130>
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b21      	cmp	r3, #33	; 0x21
 8002950:	d164      	bne.n	8002a1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002980:	e04c      	b.n	8002a1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d01d      	beq.n	80029c4 <I2C_MasterTransmit_BTF+0x8c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b20      	cmp	r3, #32
 800298c:	d01a      	beq.n	80029c4 <I2C_MasterTransmit_BTF+0x8c>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002994:	d016      	beq.n	80029c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2211      	movs	r2, #17
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff feab 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
}
 80029c2:	e02b      	b.n	8002a1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d107      	bne.n	8002a0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fec6 	bl	8002798 <HAL_I2C_MemTxCpltCallback>
}
 8002a0c:	e006      	b.n	8002a1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fe7e 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11d      	bne.n	8002a78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10b      	bne.n	8002a5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	1c9a      	adds	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002a5a:	e073      	b.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	121b      	asrs	r3, r3, #8
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a76:	e065      	b.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10b      	bne.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a96:	e055      	b.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d151      	bne.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b22      	cmp	r3, #34	; 0x22
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ac0:	e040      	b.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b21      	cmp	r3, #33	; 0x21
 8002ad0:	d112      	bne.n	8002af8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002af6:	e025      	b.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d120      	bne.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b21      	cmp	r3, #33	; 0x21
 8002b06:	d11d      	bne.n	8002b44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fe2a 	bl	8002798 <HAL_I2C_MemTxCpltCallback>
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b22      	cmp	r3, #34	; 0x22
 8002b5e:	f040 80ac 	bne.w	8002cba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d921      	bls.n	8002bb4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	f040 808c 	bne.w	8002cba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002bb2:	e082      	b.n	8002cba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d075      	beq.n	8002ca8 <I2C_MasterReceive_RXNE+0x15c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d002      	beq.n	8002bc8 <I2C_MasterReceive_RXNE+0x7c>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d16f      	bne.n	8002ca8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 f9ff 	bl	8003fcc <I2C_WaitOnSTOPRequestThroughIT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d142      	bne.n	8002c5a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bf2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d10a      	bne.n	8002c44 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fdb5 	bl	80027ac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c42:	e03a      	b.n	8002cba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2212      	movs	r2, #18
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fd6a 	bl	800272c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c58:	e02f      	b.n	8002cba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fd8d 	bl	80027c0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ca6:	e008      	b.n	8002cba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb6:	605a      	str	r2, [r3, #4]
}
 8002cb8:	e7ff      	b.n	8002cba <I2C_MasterReceive_RXNE+0x16e>
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d11b      	bne.n	8002d12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d10:	e0bd      	b.n	8002e8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d129      	bne.n	8002d70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00a      	beq.n	8002d48 <I2C_MasterReceive_BTF+0x86>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d007      	beq.n	8002d48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d6e:	e08e      	b.n	8002e8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d176      	bne.n	8002e68 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d002      	beq.n	8002d86 <I2C_MasterReceive_BTF+0xc4>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e019      	b.n	8002dcc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d002      	beq.n	8002da4 <I2C_MasterReceive_BTF+0xe2>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d108      	bne.n	8002db6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e00a      	b.n	8002dcc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d007      	beq.n	8002dcc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d10a      	bne.n	8002e52 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fcae 	bl	80027ac <HAL_I2C_MemRxCpltCallback>
}
 8002e50:	e01d      	b.n	8002e8e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2212      	movs	r2, #18
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fc63 	bl	800272c <HAL_I2C_MasterRxCpltCallback>
}
 8002e66:	e012      	b.n	8002e8e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d117      	bne.n	8002eda <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002ec4:	e067      	b.n	8002f96 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]
}
 8002ed8:	e05d      	b.n	8002f96 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee2:	d133      	bne.n	8002f4c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b21      	cmp	r3, #33	; 0x21
 8002eee:	d109      	bne.n	8002f04 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	e008      	b.n	8002f16 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <I2C_Master_SB+0x92>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d032      	beq.n	8002f96 <I2C_Master_SB+0x100>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02d      	beq.n	8002f96 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	605a      	str	r2, [r3, #4]
}
 8002f4a:	e024      	b.n	8002f96 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10e      	bne.n	8002f72 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	11db      	asrs	r3, r3, #7
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0306 	and.w	r3, r3, #6
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f063 030f 	orn	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]
}
 8002f70:	e011      	b.n	8002f96 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	11db      	asrs	r3, r3, #7
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 0306 	and.w	r3, r3, #6
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f063 030e 	orn	r3, r3, #14
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <I2C_Master_ADD10+0x26>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00c      	beq.n	8002fea <I2C_Master_ADD10+0x48>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe8:	605a      	str	r2, [r3, #4]
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b091      	sub	sp, #68	; 0x44
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b22      	cmp	r3, #34	; 0x22
 800301e:	f040 8169 	bne.w	80032f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <I2C_Master_ADDR+0x54>
 800302a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d10b      	bne.n	800304a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	e160      	b.n	800330c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11d      	bne.n	800308e <I2C_Master_ADDR+0x98>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800305a:	d118      	bne.n	800308e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003080:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	651a      	str	r2, [r3, #80]	; 0x50
 800308c:	e13e      	b.n	800330c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d113      	bne.n	80030c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e115      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 808a 	bne.w	80031e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d2:	d137      	bne.n	8003144 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f2:	d113      	bne.n	800311c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003102:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	e0e7      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e0d3      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	2b08      	cmp	r3, #8
 8003148:	d02e      	beq.n	80031a8 <I2C_Master_ADDR+0x1b2>
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	2b20      	cmp	r3, #32
 800314e:	d02b      	beq.n	80031a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003152:	2b12      	cmp	r3, #18
 8003154:	d102      	bne.n	800315c <I2C_Master_ADDR+0x166>
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	2b01      	cmp	r3, #1
 800315a:	d125      	bne.n	80031a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00e      	beq.n	8003180 <I2C_Master_ADDR+0x18a>
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00b      	beq.n	8003180 <I2C_Master_ADDR+0x18a>
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	2b10      	cmp	r3, #16
 800316c:	d008      	beq.n	8003180 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e007      	b.n	8003190 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	e0a1      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e085      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d14d      	bne.n	8003286 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d016      	beq.n	800321e <I2C_Master_ADDR+0x228>
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d013      	beq.n	800321e <I2C_Master_ADDR+0x228>
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d010      	beq.n	800321e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e007      	b.n	800322e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	d117      	bne.n	800326e <I2C_Master_ADDR+0x278>
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003244:	d00b      	beq.n	800325e <I2C_Master_ADDR+0x268>
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b01      	cmp	r3, #1
 800324a:	d008      	beq.n	800325e <I2C_Master_ADDR+0x268>
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	2b08      	cmp	r3, #8
 8003250:	d005      	beq.n	800325e <I2C_Master_ADDR+0x268>
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	2b10      	cmp	r3, #16
 8003256:	d002      	beq.n	800325e <I2C_Master_ADDR+0x268>
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	2b20      	cmp	r3, #32
 800325c:	d107      	bne.n	800326e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800326c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	e032      	b.n	80032ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003294:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a4:	d117      	bne.n	80032d6 <I2C_Master_ADDR+0x2e0>
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ac:	d00b      	beq.n	80032c6 <I2C_Master_ADDR+0x2d0>
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d008      	beq.n	80032c6 <I2C_Master_ADDR+0x2d0>
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d005      	beq.n	80032c6 <I2C_Master_ADDR+0x2d0>
 80032ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d002      	beq.n	80032c6 <I2C_Master_ADDR+0x2d0>
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d107      	bne.n	80032d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032f2:	e00b      	b.n	800330c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	e7ff      	b.n	800330c <I2C_Master_ADDR+0x316>
 800330c:	bf00      	nop
 800330e:	3744      	adds	r7, #68	; 0x44
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02b      	beq.n	800338a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d114      	bne.n	800338a <I2C_SlaveTransmit_TXE+0x72>
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b29      	cmp	r3, #41	; 0x29
 8003364:	d111      	bne.n	800338a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003374:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2221      	movs	r2, #33	; 0x21
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2228      	movs	r2, #40	; 0x28
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f9db 	bl	8002740 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02c      	beq.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b2a      	cmp	r3, #42	; 0x2a
 8003422:	d111      	bne.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003432:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2222      	movs	r2, #34	; 0x22
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2228      	movs	r2, #40	; 0x28
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff f986 	bl	8002754 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034ae:	2b28      	cmp	r3, #40	; 0x28
 80034b0:	d125      	bne.n	80034fe <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	81bb      	strh	r3, [r7, #12]
 80034e0:	e002      	b.n	80034e8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034f0:	89ba      	ldrh	r2, [r7, #12]
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff f936 	bl	8002768 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034fc:	e00e      	b.n	800351c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003542:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003570:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d172      	bne.n	8003668 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b22      	cmp	r3, #34	; 0x22
 8003586:	d002      	beq.n	800358e <I2C_Slave_STOPF+0x6a>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b2a      	cmp	r3, #42	; 0x2a
 800358c:	d135      	bne.n	80035fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd ff75 	bl	80014b6 <HAL_DMA_GetState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d049      	beq.n	8003666 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4a69      	ldr	r2, [pc, #420]	; (800377c <I2C_Slave_STOPF+0x258>)
 80035d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd ff47 	bl	8001472 <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03d      	beq.n	8003666 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035f8:	e035      	b.n	8003666 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd ff3f 	bl	80014b6 <HAL_DMA_GetState>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d014      	beq.n	8003668 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	4a4e      	ldr	r2, [pc, #312]	; (800377c <I2C_Slave_STOPF+0x258>)
 8003644:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd ff11 	bl	8001472 <HAL_DMA_Abort_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
 8003664:	e000      	b.n	8003668 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003666:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03e      	beq.n	80036f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d112      	bne.n	80036a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d112      	bne.n	80036da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8b3 	bl	8003864 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80036fe:	e039      	b.n	8003774 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b2a      	cmp	r3, #42	; 0x2a
 8003704:	d109      	bne.n	800371a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2228      	movs	r2, #40	; 0x28
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff f81d 	bl	8002754 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b28      	cmp	r3, #40	; 0x28
 8003724:	d111      	bne.n	800374a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <I2C_Slave_STOPF+0x25c>)
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f81e 	bl	8002784 <HAL_I2C_ListenCpltCallback>
}
 8003748:	e014      	b.n	8003774 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	2b22      	cmp	r3, #34	; 0x22
 8003750:	d002      	beq.n	8003758 <I2C_Slave_STOPF+0x234>
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b22      	cmp	r3, #34	; 0x22
 8003756:	d10d      	bne.n	8003774 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fff0 	bl	8002754 <HAL_I2C_SlaveRxCpltCallback>
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08003bcd 	.word	0x08003bcd
 8003780:	ffff0000 	.word	0xffff0000

08003784 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d002      	beq.n	80037a6 <I2C_Slave_AF+0x22>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d129      	bne.n	80037fa <I2C_Slave_AF+0x76>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b28      	cmp	r3, #40	; 0x28
 80037aa:	d126      	bne.n	80037fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <I2C_Slave_AF+0xdc>)
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe ffc6 	bl	8002784 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80037f8:	e02e      	b.n	8003858 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b21      	cmp	r3, #33	; 0x21
 80037fe:	d126      	bne.n	800384e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a17      	ldr	r2, [pc, #92]	; (8003860 <I2C_Slave_AF+0xdc>)
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003834:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe ff7a 	bl	8002740 <HAL_I2C_SlaveTxCpltCallback>
}
 800384c:	e004      	b.n	8003858 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003856:	615a      	str	r2, [r3, #20]
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	ffff0000 	.word	0xffff0000

08003864 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	2b10      	cmp	r3, #16
 8003880:	d002      	beq.n	8003888 <I2C_ITError+0x24>
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d10a      	bne.n	800389e <I2C_ITError+0x3a>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b22      	cmp	r3, #34	; 0x22
 800388c:	d107      	bne.n	800389e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038a4:	2b28      	cmp	r3, #40	; 0x28
 80038a6:	d107      	bne.n	80038b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2228      	movs	r2, #40	; 0x28
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038b6:	e015      	b.n	80038e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c6:	d00a      	beq.n	80038de <I2C_ITError+0x7a>
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b60      	cmp	r3, #96	; 0x60
 80038cc:	d007      	beq.n	80038de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f2:	d162      	bne.n	80039ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003902:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d020      	beq.n	8003954 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	4a6a      	ldr	r2, [pc, #424]	; (8003ac0 <I2C_ITError+0x25c>)
 8003918:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fda7 	bl	8001472 <HAL_DMA_Abort_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8089 	beq.w	8003a3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800394e:	4610      	mov	r0, r2
 8003950:	4798      	blx	r3
 8003952:	e074      	b.n	8003a3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	4a59      	ldr	r2, [pc, #356]	; (8003ac0 <I2C_ITError+0x25c>)
 800395a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fd86 	bl	8001472 <HAL_DMA_Abort_IT>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d068      	beq.n	8003a3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d10b      	bne.n	8003992 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b4:	4610      	mov	r0, r2
 80039b6:	4798      	blx	r3
 80039b8:	e041      	b.n	8003a3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b60      	cmp	r3, #96	; 0x60
 80039c4:	d125      	bne.n	8003a12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d10b      	bne.n	80039fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe fee2 	bl	80027d4 <HAL_I2C_AbortCpltCallback>
 8003a10:	e015      	b.n	8003a3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d10b      	bne.n	8003a38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fe fec1 	bl	80027c0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d113      	bne.n	8003ab8 <I2C_ITError+0x254>
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b28      	cmp	r3, #40	; 0x28
 8003a94:	d110      	bne.n	8003ab8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <I2C_ITError+0x260>)
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe fe66 	bl	8002784 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	08003bcd 	.word	0x08003bcd
 8003ac4:	ffff0000 	.word	0xffff0000

08003ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d006      	beq.n	8003af2 <I2C_MasterRequestWrite+0x2a>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d003      	beq.n	8003af2 <I2C_MasterRequestWrite+0x2a>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af0:	d108      	bne.n	8003b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e00b      	b.n	8003b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b12      	cmp	r3, #18
 8003b0a:	d107      	bne.n	8003b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f8f7 	bl	8003d1c <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b42:	d103      	bne.n	8003b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e035      	b.n	8003bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b58:	d108      	bne.n	8003b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	e01b      	b.n	8003ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b6c:	897b      	ldrh	r3, [r7, #10]
 8003b6e:	11db      	asrs	r3, r3, #7
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0306 	and.w	r3, r3, #6
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f063 030f 	orn	r3, r3, #15
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <I2C_MasterRequestWrite+0xfc>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f91d 	bl	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e010      	b.n	8003bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <I2C_MasterRequestWrite+0x100>)
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f90d 	bl	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	00010008 	.word	0x00010008
 8003bc8:	00010002 	.word	0x00010002

08003bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003be6:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <I2C_DMAAbort+0x148>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	08db      	lsrs	r3, r3, #3
 8003bec:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <I2C_DMAAbort+0x14c>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0a1a      	lsrs	r2, r3, #8
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00da      	lsls	r2, r3, #3
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c12:	e00a      	b.n	8003c2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d0ea      	beq.n	8003c00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	2200      	movs	r2, #0
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	2200      	movs	r2, #0
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d10e      	bne.n	8003cba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7fe fd8e 	bl	80027d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb8:	e027      	b.n	8003d0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc0:	2b28      	cmp	r3, #40	; 0x28
 8003cc2:	d117      	bne.n	8003cf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2228      	movs	r2, #40	; 0x28
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cf2:	e007      	b.n	8003d04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d04:	6978      	ldr	r0, [r7, #20]
 8003d06:	f7fe fd5b 	bl	80027c0 <HAL_I2C_ErrorCallback>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000
 8003d18:	14f8b589 	.word	0x14f8b589

08003d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2c:	e025      	b.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d021      	beq.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7fd fa5b 	bl	80011f0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d116      	bne.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e023      	b.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	e00c      	b.n	8003dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d0b6      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd8:	e051      	b.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d123      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0204 	orr.w	r2, r3, #4
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e046      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d021      	beq.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3a:	f7fd f9d9 	bl	80011f0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d302      	bcc.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e020      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d10c      	bne.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e00b      	b.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d18d      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed4:	e02d      	b.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8aa 	bl	8004030 <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02d      	b.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d021      	beq.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fd f97f 	bl	80011f0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e007      	b.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d1ca      	bne.n	8003ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f56:	e02d      	b.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f869 	bl	8004030 <I2C_IsAcknowledgeFailed>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e02d      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d021      	beq.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f70:	f7fd f93e 	bl	80011f0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e007      	b.n	8003fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d1ca      	bne.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	0a1a      	lsrs	r2, r3, #8
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e008      	b.n	800401c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d0e9      	beq.n	8003fee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20000000 	.word	0x20000000
 800402c:	14f8b589 	.word	0x14f8b589

08004030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d11b      	bne.n	8004080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f043 0204 	orr.w	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800409e:	d103      	bne.n	80040a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80040a6:	e007      	b.n	80040b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040b0:	d102      	bne.n	80040b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2208      	movs	r2, #8
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d129      	bne.n	800412e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2224      	movs	r2, #36	; 0x24
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0210 	bic.w	r2, r2, #16
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	d12a      	bne.n	80041ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2224      	movs	r2, #36	; 0x24
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	f023 030f 	bic.w	r3, r3, #15
 800417c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	89fb      	ldrh	r3, [r7, #14]
 8004184:	4313      	orrs	r3, r2
 8004186:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	89fa      	ldrh	r2, [r7, #14]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041bc:	b08f      	sub	sp, #60	; 0x3c
 80041be:	af0a      	add	r7, sp, #40	; 0x28
 80041c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e10f      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc fe2a 	bl	8000e40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2203      	movs	r2, #3
 80041f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f001 f8ad 	bl	800536a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	687e      	ldr	r6, [r7, #4]
 8004218:	466d      	mov	r5, sp
 800421a:	f106 0410 	add.w	r4, r6, #16
 800421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800422a:	e885 0003 	stmia.w	r5, {r0, r1}
 800422e:	1d33      	adds	r3, r6, #4
 8004230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004232:	6838      	ldr	r0, [r7, #0]
 8004234:	f001 f838 	bl	80052a8 <USB_CoreInit>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0d0      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f89b 	bl	800538c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	e04a      	b.n	80042f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	333d      	adds	r3, #61	; 0x3d
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	333c      	adds	r3, #60	; 0x3c
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	b298      	uxth	r0, r3
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3344      	adds	r3, #68	; 0x44
 8004298:	4602      	mov	r2, r0
 800429a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3340      	adds	r3, #64	; 0x40
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	3348      	adds	r3, #72	; 0x48
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c4:	7bfa      	ldrb	r2, [r7, #15]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334c      	adds	r3, #76	; 0x4c
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	3301      	adds	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3af      	bcc.n	800425c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e044      	b.n	800438c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800435a:	7bfa      	ldrb	r2, [r7, #15]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3301      	adds	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3b5      	bcc.n	8004302 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	687e      	ldr	r6, [r7, #4]
 800439e:	466d      	mov	r5, sp
 80043a0:	f106 0410 	add.w	r4, r6, #16
 80043a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80043b4:	1d33      	adds	r3, r6, #4
 80043b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	f001 f833 	bl	8005424 <USB_DevInit>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e00d      	b.n	80043ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 f9fe 	bl	80057e6 <USB_DevDisconnect>

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e267      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d075      	beq.n	80044fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d00c      	beq.n	8004438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004426:	2b08      	cmp	r3, #8
 8004428:	d112      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442a:	4b82      	ldr	r3, [pc, #520]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004436:	d10b      	bne.n	8004450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05b      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d157      	bne.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e242      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x74>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e01d      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x98>
 8004472:	4b70      	ldr	r3, [pc, #448]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6f      	ldr	r2, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0xb0>
 800448c:	4b69      	ldr	r3, [pc, #420]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b66      	ldr	r3, [pc, #408]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800449e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d013      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc fea0 	bl	80011f0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fc fe9c 	bl	80011f0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e207      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0xc0>
 80044d2:	e014      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fc fe8c 	bl	80011f0 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fc fe88 	bl	80011f0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1f3      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0xe8>
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d063      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451e:	2b08      	cmp	r3, #8
 8004520:	d11c      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d116      	bne.n	800455c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e1c7      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	e03a      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fc fe41 	bl	80011f0 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7fc fe3d 	bl	80011f0 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1a8      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	e015      	b.n	80045d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x244>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fc fe20 	bl	80011f0 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b4:	f7fc fe1c 	bl	80011f0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e187      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d036      	beq.n	800464c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x248>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc fe00 	bl	80011f0 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fc fdfc 	bl	80011f0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e167      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x240>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x200>
 8004612:	e01b      	b.n	800464c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_OscConfig+0x248>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fc fde9 	bl	80011f0 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00e      	b.n	8004640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7fc fde5 	bl	80011f0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d907      	bls.n	8004640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e150      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b88      	ldr	r3, [pc, #544]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ea      	bne.n	8004622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b81      	ldr	r3, [pc, #516]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a7c      	ldr	r2, [pc, #496]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b7a      	ldr	r3, [pc, #488]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b77      	ldr	r3, [pc, #476]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7fc fda5 	bl	80011f0 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fc fda1 	bl	80011f0 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e10c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <HAL_RCC_OscConfig+0x474>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x2ea>
 80046d0:	4b64      	ldr	r3, [pc, #400]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x30c>
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a5b      	ldr	r2, [pc, #364]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0x324>
 8004700:	4b58      	ldr	r3, [pc, #352]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a57      	ldr	r2, [pc, #348]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b55      	ldr	r3, [pc, #340]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a54      	ldr	r2, [pc, #336]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fc fd66 	bl	80011f0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fc fd62 	bl	80011f0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0cb      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <HAL_RCC_OscConfig+0x334>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fc fd50 	bl	80011f0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7fc fd4c 	bl	80011f0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0b5      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ee      	bne.n	8004754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477c:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a38      	ldr	r2, [pc, #224]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a1 	beq.w	80048d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004792:	4b34      	ldr	r3, [pc, #208]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b08      	cmp	r3, #8
 800479c:	d05c      	beq.n	8004858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d141      	bne.n	800482a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fd20 	bl	80011f0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fc fd1c 	bl	80011f0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e087      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	491b      	ldr	r1, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x478>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fc fcf5 	bl	80011f0 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fc fcf1 	bl	80011f0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e05c      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x416>
 8004828:	e054      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_RCC_OscConfig+0x478>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc fcde 	bl	80011f0 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004838:	f7fc fcda 	bl	80011f0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e045      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCC_OscConfig+0x470>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x444>
 8004856:	e03d      	b.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e038      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
 8004864:	40023800 	.word	0x40023800
 8004868:	40007000 	.word	0x40007000
 800486c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x4ec>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d028      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d121      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d11a      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d111      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	3b01      	subs	r3, #1
 80048ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0cc      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d90c      	bls.n	8004920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a58      	ldr	r2, [pc, #352]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800495a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d044      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d119      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e06f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b2:	4b3b      	ldr	r3, [pc, #236]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e067      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4934      	ldr	r1, [pc, #208]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d4:	f7fc fc0c 	bl	80011f0 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fc fc08 	bl	80011f0 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e04f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b25      	ldr	r3, [pc, #148]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d20c      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc fb6c 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	08008e80 	.word	0x08008e80
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	20000004 	.word	0x20000004

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b094      	sub	sp, #80	; 0x50
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	647b      	str	r3, [r7, #68]	; 0x44
 8004abc:	2300      	movs	r3, #0
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b79      	ldr	r3, [pc, #484]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80e1 	bhi.w	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e0db      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ae8:	e0db      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aee:	e0d8      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afa:	4b6d      	ldr	r3, [pc, #436]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d063      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	1a51      	subs	r1, r2, r1
 8004b3e:	6139      	str	r1, [r7, #16]
 8004b40:	4629      	mov	r1, r5
 8004b42:	eb63 0301 	sbc.w	r3, r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	018b      	lsls	r3, r1, #6
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b5e:	4651      	mov	r1, sl
 8004b60:	018a      	lsls	r2, r1, #6
 8004b62:	4651      	mov	r1, sl
 8004b64:	ebb2 0801 	subs.w	r8, r2, r1
 8004b68:	4659      	mov	r1, fp
 8004b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b82:	4690      	mov	r8, r2
 8004b84:	4699      	mov	r9, r3
 8004b86:	4623      	mov	r3, r4
 8004b88:	eb18 0303 	adds.w	r3, r8, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	462b      	mov	r3, r5
 8004b90:	eb49 0303 	adc.w	r3, r9, r3
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	024b      	lsls	r3, r1, #9
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bac:	4621      	mov	r1, r4
 8004bae:	024a      	lsls	r2, r1, #9
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc0:	f7fb fb16 	bl	80001f0 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	e058      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4611      	mov	r1, r2
 8004bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	2300      	movs	r3, #0
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	f04f 0000 	mov.w	r0, #0
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfa:	0150      	lsls	r0, r2, #5
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4641      	mov	r1, r8
 8004c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c06:	4649      	mov	r1, r9
 8004c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c20:	ebb2 040a 	subs.w	r4, r2, sl
 8004c24:	eb63 050b 	sbc.w	r5, r3, fp
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	464b      	mov	r3, r9
 8004c44:	eb45 0303 	adc.w	r3, r5, r3
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c56:	4629      	mov	r1, r5
 8004c58:	028b      	lsls	r3, r1, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c60:	4621      	mov	r1, r4
 8004c62:	028a      	lsls	r2, r1, #10
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	61fa      	str	r2, [r7, #28]
 8004c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c74:	f7fb fabc 	bl	80001f0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3750      	adds	r7, #80	; 0x50
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	007a1200 	.word	0x007a1200

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000000 	.word	0x20000000

08004cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cd8:	f7ff fff0 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0a9b      	lsrs	r3, r3, #10
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	08008e90 	.word	0x08008e90

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d00:	f7ff ffdc 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0b5b      	lsrs	r3, r3, #13
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	; (8004d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08008e90 	.word	0x08008e90

08004d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e03f      	b.n	8004db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc f830 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f829 	bl	8004dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b0c0      	sub	sp, #256	; 0x100
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	68d9      	ldr	r1, [r3, #12]
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	ea40 0301 	orr.w	r3, r0, r1
 8004de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e18:	f021 010c 	bic.w	r1, r1, #12
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e26:	430b      	orrs	r3, r1
 8004e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	6999      	ldr	r1, [r3, #24]
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	ea40 0301 	orr.w	r3, r0, r1
 8004e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8f      	ldr	r3, [pc, #572]	; (800508c <UART_SetConfig+0x2cc>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d005      	beq.n	8004e60 <UART_SetConfig+0xa0>
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <UART_SetConfig+0x2d0>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d104      	bne.n	8004e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7ff ff4c 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8004e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e68:	e003      	b.n	8004e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e6a:	f7ff ff33 	bl	8004cd4 <HAL_RCC_GetPCLK1Freq>
 8004e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	f040 810c 	bne.w	8005098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	eb12 0801 	adds.w	r8, r2, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	eb43 0901 	adc.w	r9, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec2:	4690      	mov	r8, r2
 8004ec4:	4699      	mov	r9, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb18 0303 	adds.w	r3, r8, r3
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	eb49 0303 	adc.w	r3, r9, r3
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004eee:	460b      	mov	r3, r1
 8004ef0:	18db      	adds	r3, r3, r3
 8004ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	eb42 0303 	adc.w	r3, r2, r3
 8004efa:	657b      	str	r3, [r7, #84]	; 0x54
 8004efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f04:	f7fb f974 	bl	80001f0 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b61      	ldr	r3, [pc, #388]	; (8005094 <UART_SetConfig+0x2d4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f30:	415b      	adcs	r3, r3
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f38:	4641      	mov	r1, r8
 8004f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb43 0b01 	adc.w	fp, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f58:	4692      	mov	sl, r2
 8004f5a:	469b      	mov	fp, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb4b 0303 	adc.w	r3, fp, r3
 8004f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f84:	460b      	mov	r3, r1
 8004f86:	18db      	adds	r3, r3, r3
 8004f88:	643b      	str	r3, [r7, #64]	; 0x40
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f9a:	f7fb f929 	bl	80001f0 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <UART_SetConfig+0x2d4>)
 8004fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2264      	movs	r2, #100	; 0x64
 8004fae:	fb02 f303 	mul.w	r3, r2, r3
 8004fb2:	1acb      	subs	r3, r1, r3
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fba:	4b36      	ldr	r3, [pc, #216]	; (8005094 <UART_SetConfig+0x2d4>)
 8004fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fc8:	441c      	add	r4, r3
 8004fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005020:	464b      	mov	r3, r9
 8005022:	460a      	mov	r2, r1
 8005024:	eb42 0303 	adc.w	r3, r2, r3
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800503c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005040:	460b      	mov	r3, r1
 8005042:	18db      	adds	r3, r3, r3
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	4613      	mov	r3, r2
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005056:	f7fb f8cb 	bl	80001f0 <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <UART_SetConfig+0x2d4>)
 8005060:	fba3 1302 	umull	r1, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	2164      	movs	r1, #100	; 0x64
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	3332      	adds	r3, #50	; 0x32
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <UART_SetConfig+0x2d4>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f003 0207 	and.w	r2, r3, #7
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4422      	add	r2, r4
 8005086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005088:	e106      	b.n	8005298 <UART_SetConfig+0x4d8>
 800508a:	bf00      	nop
 800508c:	40011000 	.word	0x40011000
 8005090:	40011400 	.word	0x40011400
 8005094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6239      	str	r1, [r7, #32]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	4649      	mov	r1, r9
 80050c0:	eb43 0501 	adc.w	r5, r3, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	00eb      	lsls	r3, r5, #3
 80050ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d2:	00e2      	lsls	r2, r4, #3
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	18e3      	adds	r3, r4, r3
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050e0:	464b      	mov	r3, r9
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005106:	4629      	mov	r1, r5
 8005108:	008b      	lsls	r3, r1, #2
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005110:	4621      	mov	r1, r4
 8005112:	008a      	lsls	r2, r1, #2
 8005114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005118:	f7fb f86a 	bl	80001f0 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4b60      	ldr	r3, [pc, #384]	; (80052a4 <UART_SetConfig+0x4e4>)
 8005122:	fba3 2302 	umull	r2, r3, r3, r2
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	011c      	lsls	r4, r3, #4
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800512e:	2200      	movs	r2, #0
 8005130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	1891      	adds	r1, r2, r2
 8005142:	61b9      	str	r1, [r7, #24]
 8005144:	415b      	adcs	r3, r3
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	4641      	mov	r1, r8
 800514e:	1851      	adds	r1, r2, r1
 8005150:	6139      	str	r1, [r7, #16]
 8005152:	4649      	mov	r1, r9
 8005154:	414b      	adcs	r3, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005164:	4659      	mov	r1, fp
 8005166:	00cb      	lsls	r3, r1, #3
 8005168:	4651      	mov	r1, sl
 800516a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800516e:	4651      	mov	r1, sl
 8005170:	00ca      	lsls	r2, r1, #3
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	4603      	mov	r3, r0
 8005178:	4642      	mov	r2, r8
 800517a:	189b      	adds	r3, r3, r2
 800517c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005180:	464b      	mov	r3, r9
 8005182:	460a      	mov	r2, r1
 8005184:	eb42 0303 	adc.w	r3, r2, r3
 8005188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	67bb      	str	r3, [r7, #120]	; 0x78
 8005196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051a4:	4649      	mov	r1, r9
 80051a6:	008b      	lsls	r3, r1, #2
 80051a8:	4641      	mov	r1, r8
 80051aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ae:	4641      	mov	r1, r8
 80051b0:	008a      	lsls	r2, r1, #2
 80051b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051b6:	f7fb f81b 	bl	80001f0 <__aeabi_uldivmod>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <UART_SetConfig+0x4e4>)
 80051c2:	fba3 2301 	umull	r2, r3, r3, r1
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2264      	movs	r2, #100	; 0x64
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	1acb      	subs	r3, r1, r3
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	3332      	adds	r3, #50	; 0x32
 80051d4:	4a33      	ldr	r2, [pc, #204]	; (80052a4 <UART_SetConfig+0x4e4>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e0:	441c      	add	r4, r3
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	673b      	str	r3, [r7, #112]	; 0x70
 80051ea:	677a      	str	r2, [r7, #116]	; 0x74
 80051ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	415b      	adcs	r3, r3
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005200:	4641      	mov	r1, r8
 8005202:	1851      	adds	r1, r2, r1
 8005204:	6039      	str	r1, [r7, #0]
 8005206:	4649      	mov	r1, r9
 8005208:	414b      	adcs	r3, r1
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005218:	4659      	mov	r1, fp
 800521a:	00cb      	lsls	r3, r1, #3
 800521c:	4651      	mov	r1, sl
 800521e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005222:	4651      	mov	r1, sl
 8005224:	00ca      	lsls	r2, r1, #3
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	4603      	mov	r3, r0
 800522c:	4642      	mov	r2, r8
 800522e:	189b      	adds	r3, r3, r2
 8005230:	66bb      	str	r3, [r7, #104]	; 0x68
 8005232:	464b      	mov	r3, r9
 8005234:	460a      	mov	r2, r1
 8005236:	eb42 0303 	adc.w	r3, r2, r3
 800523a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	663b      	str	r3, [r7, #96]	; 0x60
 8005246:	667a      	str	r2, [r7, #100]	; 0x64
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005254:	4649      	mov	r1, r9
 8005256:	008b      	lsls	r3, r1, #2
 8005258:	4641      	mov	r1, r8
 800525a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525e:	4641      	mov	r1, r8
 8005260:	008a      	lsls	r2, r1, #2
 8005262:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005266:	f7fa ffc3 	bl	80001f0 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <UART_SetConfig+0x4e4>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <UART_SetConfig+0x4e4>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 020f 	and.w	r2, r3, #15
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4422      	add	r2, r4
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800529e:	46bd      	mov	sp, r7
 80052a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a4:	51eb851f 	.word	0x51eb851f

080052a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 001c 	add.w	r0, r7, #28
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d122      	bne.n	8005306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 faa2 	bl	8005844 <USB_CoreReset>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
 8005304:	e01a      	b.n	800533c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa96 	bl	8005844 <USB_CoreReset>
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800531c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
 800532e:	e005      	b.n	800533c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10b      	bne.n	800535a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f043 0206 	orr.w	r2, r3, #6
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005366:	b004      	add	sp, #16
 8005368:	4770      	bx	lr

0800536a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d115      	bne.n	80053da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f7fb ff24 	bl	8001208 <HAL_Delay>
      ms++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa2e 	bl	8005828 <USB_GetMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d01e      	beq.n	8005410 <USB_SetCurrentMode+0x84>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b31      	cmp	r3, #49	; 0x31
 80053d6:	d9f0      	bls.n	80053ba <USB_SetCurrentMode+0x2e>
 80053d8:	e01a      	b.n	8005410 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fb ff0b 	bl	8001208 <HAL_Delay>
      ms++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa15 	bl	8005828 <USB_GetMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <USB_SetCurrentMode+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b31      	cmp	r3, #49	; 0x31
 8005408:	d9f0      	bls.n	80053ec <USB_SetCurrentMode+0x60>
 800540a:	e001      	b.n	8005410 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e005      	b.n	800541c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b32      	cmp	r3, #50	; 0x32
 8005414:	d101      	bne.n	800541a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005424:	b084      	sub	sp, #16
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e009      	b.n	8005458 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	3340      	adds	r3, #64	; 0x40
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	2200      	movs	r2, #0
 8005450:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3301      	adds	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b0e      	cmp	r3, #14
 800545c:	d9f2      	bls.n	8005444 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d11c      	bne.n	800549e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005472:	f043 0302 	orr.w	r3, r3, #2
 8005476:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
 800549c:	e00b      	b.n	80054b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	4619      	mov	r1, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	461a      	mov	r2, r3
 80054d2:	680b      	ldr	r3, [r1, #0]
 80054d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10c      	bne.n	80054f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054e2:	2100      	movs	r1, #0
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f965 	bl	80057b4 <USB_SetDevSpeed>
 80054ea:	e008      	b.n	80054fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054ec:	2101      	movs	r1, #1
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f960 	bl	80057b4 <USB_SetDevSpeed>
 80054f4:	e003      	b.n	80054fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054f6:	2103      	movs	r1, #3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f95b 	bl	80057b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054fe:	2110      	movs	r1, #16
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8f3 	bl	80056ec <USB_FlushTxFifo>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f91f 	bl	8005754 <USB_FlushRxFifo>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	461a      	mov	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e043      	b.n	80055d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005560:	d118      	bne.n	8005594 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e013      	b.n	80055a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	461a      	mov	r2, r3
 800558c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e008      	b.n	80055a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3301      	adds	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3b7      	bcc.n	800554a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e043      	b.n	8005668 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f6:	d118      	bne.n	800562a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e013      	b.n	800563c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e008      	b.n	800563c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d3b7      	bcc.n	80055e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005682:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005690:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f043 0210 	orr.w	r2, r3, #16
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <USB_DevInit+0x2c4>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f043 0208 	orr.w	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e4:	b004      	add	sp, #16
 80056e6:	4770      	bx	lr
 80056e8:	803c3800 	.word	0x803c3800

080056ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <USB_FlushTxFifo+0x64>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e01b      	b.n	8005744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	daf2      	bge.n	80056fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	019b      	lsls	r3, r3, #6
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a08      	ldr	r2, [pc, #32]	; (8005750 <USB_FlushTxFifo+0x64>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e006      	b.n	8005744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d0f0      	beq.n	8005724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	00030d40 	.word	0x00030d40

08005754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <USB_FlushRxFifo+0x5c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e018      	b.n	80057a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	daf2      	bge.n	8005760 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2210      	movs	r2, #16
 8005782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <USB_FlushRxFifo+0x5c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e006      	b.n	80057a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b10      	cmp	r3, #16
 80057a0:	d0f0      	beq.n	8005784 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005814:	f043 0302 	orr.w	r3, r3, #2
 8005818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0301 	and.w	r3, r3, #1
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3301      	adds	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <USB_CoreReset+0x64>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e01b      	b.n	800589a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	daf2      	bge.n	8005850 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <USB_CoreReset+0x64>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e006      	b.n	800589a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b01      	cmp	r3, #1
 8005896:	d0f0      	beq.n	800587a <USB_CoreReset+0x36>

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	00030d40 	.word	0x00030d40

080058ac <__NVIC_SetPriority>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	db0a      	blt.n	80058d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	490c      	ldr	r1, [pc, #48]	; (80058f8 <__NVIC_SetPriority+0x4c>)
 80058c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ca:	0112      	lsls	r2, r2, #4
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	440b      	add	r3, r1
 80058d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058d4:	e00a      	b.n	80058ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	4908      	ldr	r1, [pc, #32]	; (80058fc <__NVIC_SetPriority+0x50>)
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	3b04      	subs	r3, #4
 80058e4:	0112      	lsls	r2, r2, #4
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	440b      	add	r3, r1
 80058ea:	761a      	strb	r2, [r3, #24]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	e000e100 	.word	0xe000e100
 80058fc:	e000ed00 	.word	0xe000ed00

08005900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005904:	2100      	movs	r1, #0
 8005906:	f06f 0004 	mvn.w	r0, #4
 800590a:	f7ff ffcf 	bl	80058ac <__NVIC_SetPriority>
#endif
}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591a:	f3ef 8305 	mrs	r3, IPSR
 800591e:	603b      	str	r3, [r7, #0]
  return(result);
 8005920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005926:	f06f 0305 	mvn.w	r3, #5
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e00c      	b.n	8005948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <osKernelInitialize+0x44>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <osKernelInitialize+0x44>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800593c:	2300      	movs	r3, #0
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	e002      	b.n	8005948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005948:	687b      	ldr	r3, [r7, #4]
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000868 	.word	0x20000868

0800595c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005962:	f3ef 8305 	mrs	r3, IPSR
 8005966:	603b      	str	r3, [r7, #0]
  return(result);
 8005968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <osKernelStart+0x1a>
    stat = osErrorISR;
 800596e:	f06f 0305 	mvn.w	r3, #5
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e010      	b.n	8005998 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <osKernelStart+0x48>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d109      	bne.n	8005992 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800597e:	f7ff ffbf 	bl	8005900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <osKernelStart+0x48>)
 8005984:	2202      	movs	r2, #2
 8005986:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005988:	f001 f87c 	bl	8006a84 <vTaskStartScheduler>
      stat = osOK;
 800598c:	2300      	movs	r3, #0
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e002      	b.n	8005998 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005998:	687b      	ldr	r3, [r7, #4]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000868 	.word	0x20000868

080059a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	; 0x38
 80059ac:	af04      	add	r7, sp, #16
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	617b      	str	r3, [r7, #20]
  return(result);
 80059be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d17f      	bne.n	8005ac4 <osThreadNew+0x11c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d07c      	beq.n	8005ac4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80059ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ce:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059d0:	2318      	movs	r3, #24
 80059d2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80059d8:	f04f 33ff 	mov.w	r3, #4294967295
 80059dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d045      	beq.n	8005a70 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <osThreadNew+0x4a>
        name = attr->name;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <osThreadNew+0x70>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b38      	cmp	r3, #56	; 0x38
 8005a0a:	d805      	bhi.n	8005a18 <osThreadNew+0x70>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <osThreadNew+0x74>
        return (NULL);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e054      	b.n	8005ac6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <osThreadNew+0xaa>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2ba7      	cmp	r3, #167	; 0xa7
 8005a3a:	d90a      	bls.n	8005a52 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d006      	beq.n	8005a52 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <osThreadNew+0xaa>
        mem = 1;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e010      	b.n	8005a74 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <osThreadNew+0xcc>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d108      	bne.n	8005a74 <osThreadNew+0xcc>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <osThreadNew+0xcc>
          mem = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e001      	b.n	8005a74 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d110      	bne.n	8005a9c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a82:	9202      	str	r2, [sp, #8]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fe0b 	bl	80066ac <xTaskCreateStatic>
 8005a96:	4603      	mov	r3, r0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e013      	b.n	8005ac4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d110      	bne.n	8005ac4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fe56 	bl	8006766 <xTaskCreate>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <osThreadNew+0x11c>
            hTask = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ac4:	693b      	ldr	r3, [r7, #16]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad6:	f3ef 8305 	mrs	r3, IPSR
 8005ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <osDelay+0x1c>
    stat = osErrorISR;
 8005ae2:	f06f 0305 	mvn.w	r3, #5
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e007      	b.n	8005afa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <osDelay+0x2c>
      vTaskDelay(ticks);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 ff91 	bl	8006a1c <vTaskDelay>
    }
  }

  return (stat);
 8005afa:	68fb      	ldr	r3, [r7, #12]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a07      	ldr	r2, [pc, #28]	; (8005b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4a06      	ldr	r2, [pc, #24]	; (8005b34 <vApplicationGetIdleTaskMemory+0x30>)
 8005b1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	2000086c 	.word	0x2000086c
 8005b34:	20000914 	.word	0x20000914

08005b38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a07      	ldr	r2, [pc, #28]	; (8005b64 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <vApplicationGetTimerTaskMemory+0x30>)
 8005b4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000d14 	.word	0x20000d14
 8005b68:	20000dbc 	.word	0x20000dbc

08005b6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f103 0208 	add.w	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295
 8005b84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f103 0208 	add.w	r2, r3, #8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f103 0208 	add.w	r2, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d103      	bne.n	8005c2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e00c      	b.n	8005c48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3308      	adds	r3, #8
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e002      	b.n	8005c3c <vListInsert+0x2e>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d2f6      	bcs.n	8005c36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6892      	ldr	r2, [r2, #8]
 8005c96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6852      	ldr	r2, [r2, #4]
 8005ca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d103      	bne.n	8005cb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	1e5a      	subs	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ce8:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cfe:	f002 f879 	bl	8007df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	441a      	add	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	68f9      	ldr	r1, [r7, #12]
 8005d32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d34:	fb01 f303 	mul.w	r3, r1, r3
 8005d38:	441a      	add	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	22ff      	movs	r2, #255	; 0xff
 8005d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d114      	bne.n	8005d7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01a      	beq.n	8005d92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3310      	adds	r3, #16
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f929 	bl	8006fb8 <xTaskRemoveFromEventList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d012      	beq.n	8005d92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <xQueueGenericReset+0xcc>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	e009      	b.n	8005d92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3310      	adds	r3, #16
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fef2 	bl	8005b6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff feed 	bl	8005b6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d92:	f002 f85f 	bl	8007e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d96:	2301      	movs	r3, #1
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08e      	sub	sp, #56	; 0x38
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005db8:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005dd4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <xQueueGenericCreateStatic+0x52>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <xQueueGenericCreateStatic+0x56>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <xQueueGenericCreateStatic+0x58>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e00:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	623b      	str	r3, [r7, #32]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <xQueueGenericCreateStatic+0x7e>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <xQueueGenericCreateStatic+0x82>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <xQueueGenericCreateStatic+0x84>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e2c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	61fb      	str	r3, [r7, #28]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e42:	2350      	movs	r3, #80	; 0x50
 8005e44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b50      	cmp	r3, #80	; 0x50
 8005e4a:	d00a      	beq.n	8005e62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61bb      	str	r3, [r7, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f805 	bl	8005e94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3730      	adds	r7, #48	; 0x30
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e002      	b.n	8005eb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	69b8      	ldr	r0, [r7, #24]
 8005ec6:	f7ff ff05 	bl	8005cd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueGenericSend+0x32>
	__asm volatile
 8005ef8:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <xQueueGenericSend+0x40>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <xQueueGenericSend+0x44>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <xQueueGenericSend+0x46>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <xQueueGenericSend+0x60>
	__asm volatile
 8005f26:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d103      	bne.n	8005f4a <xQueueGenericSend+0x6e>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <xQueueGenericSend+0x72>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <xQueueGenericSend+0x74>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f54:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	623b      	str	r3, [r7, #32]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f6a:	f001 f9e7 	bl	800733c <xTaskGetSchedulerState>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <xQueueGenericSend+0x9e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <xQueueGenericSend+0xa2>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueGenericSend+0xa4>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f84:	f04f 0360 	mov.w	r3, #96	; 0x60
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61fb      	str	r3, [r7, #28]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f9a:	f001 ff2b 	bl	8007df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <xQueueGenericSend+0xd4>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d129      	bne.n	8006004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fb6:	f000 fa0b 	bl	80063d0 <prvCopyDataToQueue>
 8005fba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	3324      	adds	r3, #36	; 0x24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fff5 	bl	8006fb8 <xTaskRemoveFromEventList>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d013      	beq.n	8005ffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <xQueueGenericSend+0x1f8>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	e00a      	b.n	8005ffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <xQueueGenericSend+0x1f8>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ffc:	f001 ff2a 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	e063      	b.n	80060cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800600a:	f001 ff23 	bl	8007e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800600e:	2300      	movs	r3, #0
 8006010:	e05c      	b.n	80060cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f82f 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006026:	f001 ff15 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800602a:	f000 fd9b 	bl	8006b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800602e:	f001 fee1 	bl	8007df4 <vPortEnterCritical>
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d103      	bne.n	8006048 <xQueueGenericSend+0x16c>
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d103      	bne.n	800605e <xQueueGenericSend+0x182>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800605e:	f001 fef9 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006062:	1d3a      	adds	r2, r7, #4
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f81e 	bl	80070ac <xTaskCheckForTimeOut>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d124      	bne.n	80060c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006078:	f000 faa2 	bl	80065c0 <prvIsQueueFull>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	3310      	adds	r3, #16
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f000 ff44 	bl	8006f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006092:	f000 fa2d 	bl	80064f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006096:	f000 fd73 	bl	8006b80 <xTaskResumeAll>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f af7c 	bne.w	8005f9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <xQueueGenericSend+0x1f8>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	e772      	b.n	8005f9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b6:	f000 fa1b 	bl	80064f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ba:	f000 fd61 	bl	8006b80 <xTaskResumeAll>
 80060be:	e76c      	b.n	8005f9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060c2:	f000 fa15 	bl	80064f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060c6:	f000 fd5b 	bl	8006b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3738      	adds	r7, #56	; 0x38
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b090      	sub	sp, #64	; 0x40
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060f0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <xQueueGenericSendFromISR+0x3c>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <xQueueGenericSendFromISR+0x40>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <xQueueGenericSendFromISR+0x42>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10a      	bne.n	8006134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800611e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006130:	bf00      	nop
 8006132:	e7fe      	b.n	8006132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <xQueueGenericSendFromISR+0x6a>
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <xQueueGenericSendFromISR+0x6e>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSendFromISR+0x70>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800614c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	623b      	str	r3, [r7, #32]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006162:	f001 ff29 	bl	8007fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006166:	f3ef 8211 	mrs	r2, BASEPRI
 800616a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	61fa      	str	r2, [r7, #28]
 800617c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800617e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	429a      	cmp	r2, r3
 800618c:	d302      	bcc.n	8006194 <xQueueGenericSendFromISR+0xbc>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d12f      	bne.n	80061f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061aa:	f000 f911 	bl	80063d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d112      	bne.n	80061de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d016      	beq.n	80061ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	3324      	adds	r3, #36	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fef7 	bl	8006fb8 <xTaskRemoveFromEventList>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e007      	b.n	80061ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061e2:	3301      	adds	r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	b25a      	sxtb	r2, r3
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061ee:	2301      	movs	r3, #1
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061f2:	e001      	b.n	80061f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006206:	4618      	mov	r0, r3
 8006208:	3740      	adds	r7, #64	; 0x40
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	; 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <xQueueReceive+0x30>
	__asm volatile
 800622a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	623b      	str	r3, [r7, #32]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueReceive+0x3e>
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xQueueReceive+0x42>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueReceive+0x44>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xQueueReceive+0x5e>
	__asm volatile
 8006258:	f04f 0360 	mov.w	r3, #96	; 0x60
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	61fb      	str	r3, [r7, #28]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800626e:	f001 f865 	bl	800733c <xTaskGetSchedulerState>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xQueueReceive+0x6e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <xQueueReceive+0x72>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueReceive+0x74>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xQueueReceive+0x8e>
	__asm volatile
 8006288:	f04f 0360 	mov.w	r3, #96	; 0x60
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61bb      	str	r3, [r7, #24]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800629e:	f001 fda9 	bl	8007df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01f      	beq.n	80062ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b2:	f000 f8f7 	bl	80064a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00f      	beq.n	80062e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	3310      	adds	r3, #16
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fe74 	bl	8006fb8 <xTaskRemoveFromEventList>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <xQueueReceive+0x1bc>)
 80062d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062e6:	f001 fdb5 	bl	8007e54 <vPortExitCritical>
				return pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e069      	b.n	80063c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062f4:	f001 fdae 	bl	8007e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e062      	b.n	80063c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006302:	f107 0310 	add.w	r3, r7, #16
 8006306:	4618      	mov	r0, r3
 8006308:	f000 feba 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006310:	f001 fda0 	bl	8007e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006314:	f000 fc26 	bl	8006b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006318:	f001 fd6c 	bl	8007df4 <vPortEnterCritical>
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006322:	b25b      	sxtb	r3, r3
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d103      	bne.n	8006332 <xQueueReceive+0x122>
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006338:	b25b      	sxtb	r3, r3
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d103      	bne.n	8006348 <xQueueReceive+0x138>
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006348:	f001 fd84 	bl	8007e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800634c:	1d3a      	adds	r2, r7, #4
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	4611      	mov	r1, r2
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fea9 	bl	80070ac <xTaskCheckForTimeOut>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d123      	bne.n	80063a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006362:	f000 f917 	bl	8006594 <prvIsQueueEmpty>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fdcf 	bl	8006f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800637a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637c:	f000 f8b8 	bl	80064f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006380:	f000 fbfe 	bl	8006b80 <xTaskResumeAll>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d189      	bne.n	800629e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <xQueueReceive+0x1bc>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	e780      	b.n	800629e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800639c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639e:	f000 f8a7 	bl	80064f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a2:	f000 fbed 	bl	8006b80 <xTaskResumeAll>
 80063a6:	e77a      	b.n	800629e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063aa:	f000 f8a1 	bl	80064f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ae:	f000 fbe7 	bl	8006b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b4:	f000 f8ee 	bl	8006594 <prvIsQueueEmpty>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f43f af6f 	beq.w	800629e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10d      	bne.n	800640a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d14d      	bne.n	8006492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 ffbc 	bl	8007378 <xTaskPriorityDisinherit>
 8006400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	e043      	b.n	8006492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d119      	bne.n	8006444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6858      	ldr	r0, [r3, #4]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	461a      	mov	r2, r3
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	f002 faaa 	bl	8008974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	441a      	add	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	d32b      	bcc.n	8006492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	e026      	b.n	8006492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68d8      	ldr	r0, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	461a      	mov	r2, r3
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	f002 fa90 	bl	8008974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	425b      	negs	r3, r3
 800645e:	441a      	add	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d207      	bcs.n	8006480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	425b      	negs	r3, r3
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d105      	bne.n	8006492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3b01      	subs	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800649a:	697b      	ldr	r3, [r7, #20]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	441a      	add	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d303      	bcc.n	80064d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	461a      	mov	r2, r3
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f002 fa46 	bl	8008974 <memcpy>
	}
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064f8:	f001 fc7c 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006504:	e011      	b.n	800652a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fd50 	bl	8006fb8 <xTaskRemoveFromEventList>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800651e:	f000 fe27 	bl	8007170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	3b01      	subs	r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800652a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652e:	2b00      	cmp	r3, #0
 8006530:	dce9      	bgt.n	8006506 <prvUnlockQueue+0x16>
 8006532:	e000      	b.n	8006536 <prvUnlockQueue+0x46>
					break;
 8006534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	22ff      	movs	r2, #255	; 0xff
 800653a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800653e:	f001 fc89 	bl	8007e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006542:	f001 fc57 	bl	8007df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800654c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800654e:	e011      	b.n	8006574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3310      	adds	r3, #16
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd2b 	bl	8006fb8 <xTaskRemoveFromEventList>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006568:	f000 fe02 	bl	8007170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	3b01      	subs	r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006578:	2b00      	cmp	r3, #0
 800657a:	dce9      	bgt.n	8006550 <prvUnlockQueue+0x60>
 800657c:	e000      	b.n	8006580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800657e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	22ff      	movs	r2, #255	; 0xff
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006588:	f001 fc64 	bl	8007e54 <vPortExitCritical>
}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800659c:	f001 fc2a 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e001      	b.n	80065b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065b2:	f001 fc4f 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 80065b6:	68fb      	ldr	r3, [r7, #12]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c8:	f001 fc14 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d102      	bne.n	80065de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e001      	b.n	80065e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065e2:	f001 fc37 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e014      	b.n	800662a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006600:	4a0f      	ldr	r2, [pc, #60]	; (8006640 <vQueueAddToRegistry+0x50>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800660c:	490c      	ldr	r1, [pc, #48]	; (8006640 <vQueueAddToRegistry+0x50>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006616:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <vQueueAddToRegistry+0x50>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006622:	e006      	b.n	8006632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b07      	cmp	r3, #7
 800662e:	d9e7      	bls.n	8006600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	200015bc 	.word	0x200015bc

08006644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006654:	f001 fbce 	bl	8007df4 <vPortEnterCritical>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800665e:	b25b      	sxtb	r3, r3
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d103      	bne.n	800666e <vQueueWaitForMessageRestricted+0x2a>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006674:	b25b      	sxtb	r3, r3
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d103      	bne.n	8006684 <vQueueWaitForMessageRestricted+0x40>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006684:	f001 fbe6 	bl	8007e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3324      	adds	r3, #36	; 0x24
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fc61 	bl	8006f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800669e:	6978      	ldr	r0, [r7, #20]
 80066a0:	f7ff ff26 	bl	80064f0 <prvUnlockQueue>
	}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08e      	sub	sp, #56	; 0x38
 80066b0:	af04      	add	r7, sp, #16
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80066c0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	623b      	str	r3, [r7, #32]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80066dc:	f04f 0360 	mov.w	r3, #96	; 0x60
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	61fb      	str	r3, [r7, #28]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066f2:	23a8      	movs	r3, #168	; 0xa8
 80066f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2ba8      	cmp	r3, #168	; 0xa8
 80066fa:	d00a      	beq.n	8006712 <xTaskCreateStatic+0x66>
	__asm volatile
 80066fc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61bb      	str	r3, [r7, #24]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006712:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01e      	beq.n	8006758 <xTaskCreateStatic+0xac>
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	2202      	movs	r2, #2
 800672e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006732:	2300      	movs	r3, #0
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f850 	bl	80067f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f000 f8f3 	bl	800693c <prvAddNewTaskToReadyList>
 8006756:	e001      	b.n	800675c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800675c:	697b      	ldr	r3, [r7, #20]
	}
 800675e:	4618      	mov	r0, r3
 8006760:	3728      	adds	r7, #40	; 0x28
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006766:	b580      	push	{r7, lr}
 8006768:	b08c      	sub	sp, #48	; 0x30
 800676a:	af04      	add	r7, sp, #16
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	4613      	mov	r3, r2
 8006774:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fc5c 	bl	8008038 <pvPortMalloc>
 8006780:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006788:	20a8      	movs	r0, #168	; 0xa8
 800678a:	f001 fc55 	bl	8008038 <pvPortMalloc>
 800678e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
 800679c:	e005      	b.n	80067aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800679e:	6978      	ldr	r0, [r7, #20]
 80067a0:	f001 fd16 	bl	80081d0 <vPortFree>
 80067a4:	e001      	b.n	80067aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d017      	beq.n	80067e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067b8:	88fa      	ldrh	r2, [r7, #6]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f80e 	bl	80067f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067d4:	69f8      	ldr	r0, [r7, #28]
 80067d6:	f000 f8b1 	bl	800693c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067da:	2301      	movs	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e002      	b.n	80067e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295
 80067e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067e6:	69bb      	ldr	r3, [r7, #24]
	}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3720      	adds	r7, #32
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	461a      	mov	r2, r3
 8006808:	21a5      	movs	r1, #165	; 0xa5
 800680a:	f001 ffe3 	bl	80087d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006818:	3b01      	subs	r3, #1
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006832:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	617b      	str	r3, [r7, #20]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01f      	beq.n	800688e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	e012      	b.n	800687a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	7819      	ldrb	r1, [r3, #0]
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	3334      	adds	r3, #52	; 0x34
 8006864:	460a      	mov	r2, r1
 8006866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d006      	beq.n	8006882 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	3301      	adds	r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d9e9      	bls.n	8006854 <prvInitialiseNewTask+0x64>
 8006880:	e000      	b.n	8006884 <prvInitialiseNewTask+0x94>
			{
				break;
 8006882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800688c:	e003      	b.n	8006896 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	2b37      	cmp	r3, #55	; 0x37
 800689a:	d901      	bls.n	80068a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800689c:	2337      	movs	r3, #55	; 0x37
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	3304      	adds	r3, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff f978 	bl	8005bac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	3318      	adds	r3, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff f973 	bl	8005bac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	3354      	adds	r3, #84	; 0x54
 80068f0:	224c      	movs	r2, #76	; 0x4c
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 ff6d 	bl	80087d4 <memset>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <prvInitialiseNewTask+0x140>)
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	4a0c      	ldr	r2, [pc, #48]	; (8006934 <prvInitialiseNewTask+0x144>)
 8006904:	65da      	str	r2, [r3, #92]	; 0x5c
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	4a0b      	ldr	r2, [pc, #44]	; (8006938 <prvInitialiseNewTask+0x148>)
 800690a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	69b8      	ldr	r0, [r7, #24]
 8006912:	f001 f941 	bl	8007b98 <pxPortInitialiseStack>
 8006916:	4602      	mov	r2, r0
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006926:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006928:	bf00      	nop
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20005850 	.word	0x20005850
 8006934:	200058b8 	.word	0x200058b8
 8006938:	20005920 	.word	0x20005920

0800693c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006944:	f001 fa56 	bl	8007df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006948:	4b2d      	ldr	r3, [pc, #180]	; (8006a00 <prvAddNewTaskToReadyList+0xc4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	4a2c      	ldr	r2, [pc, #176]	; (8006a00 <prvAddNewTaskToReadyList+0xc4>)
 8006950:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006952:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <prvAddNewTaskToReadyList+0xc8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800695a:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <prvAddNewTaskToReadyList+0xc8>)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006960:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <prvAddNewTaskToReadyList+0xc4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d110      	bne.n	800698a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006968:	f000 fc26 	bl	80071b8 <prvInitialiseTaskLists>
 800696c:	e00d      	b.n	800698a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <prvAddNewTaskToReadyList+0xcc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006976:	4b23      	ldr	r3, [pc, #140]	; (8006a04 <prvAddNewTaskToReadyList+0xc8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	429a      	cmp	r2, r3
 8006982:	d802      	bhi.n	800698a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <prvAddNewTaskToReadyList+0xc8>)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800698a:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <prvAddNewTaskToReadyList+0xd0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3301      	adds	r3, #1
 8006990:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <prvAddNewTaskToReadyList+0xd0>)
 8006992:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006994:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <prvAddNewTaskToReadyList+0xd0>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <prvAddNewTaskToReadyList+0xd4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d903      	bls.n	80069b0 <prvAddNewTaskToReadyList+0x74>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <prvAddNewTaskToReadyList+0xd4>)
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <prvAddNewTaskToReadyList+0xd8>)
 80069be:	441a      	add	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	4619      	mov	r1, r3
 80069c6:	4610      	mov	r0, r2
 80069c8:	f7ff f8fd 	bl	8005bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069cc:	f001 fa42 	bl	8007e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069d0:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <prvAddNewTaskToReadyList+0xcc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <prvAddNewTaskToReadyList+0xc8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d207      	bcs.n	80069f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvAddNewTaskToReadyList+0xdc>)
 80069e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20001ad0 	.word	0x20001ad0
 8006a04:	200015fc 	.word	0x200015fc
 8006a08:	20001adc 	.word	0x20001adc
 8006a0c:	20001aec 	.word	0x20001aec
 8006a10:	20001ad8 	.word	0x20001ad8
 8006a14:	20001600 	.word	0x20001600
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <vTaskDelay+0x60>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <vTaskDelay+0x30>
	__asm volatile
 8006a36:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60bb      	str	r3, [r7, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a4c:	f000 f88a 	bl	8006b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fcfe 	bl	8007454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a58:	f000 f892 	bl	8006b80 <xTaskResumeAll>
 8006a5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <vTaskDelay+0x64>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20001af8 	.word	0x20001af8
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a92:	463a      	mov	r2, r7
 8006a94:	1d39      	adds	r1, r7, #4
 8006a96:	f107 0308 	add.w	r3, r7, #8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff f832 	bl	8005b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	9202      	str	r2, [sp, #8]
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	460a      	mov	r2, r1
 8006ab2:	4924      	ldr	r1, [pc, #144]	; (8006b44 <vTaskStartScheduler+0xc0>)
 8006ab4:	4824      	ldr	r0, [pc, #144]	; (8006b48 <vTaskStartScheduler+0xc4>)
 8006ab6:	f7ff fdf9 	bl	80066ac <xTaskCreateStatic>
 8006aba:	4603      	mov	r3, r0
 8006abc:	4a23      	ldr	r2, [pc, #140]	; (8006b4c <vTaskStartScheduler+0xc8>)
 8006abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ac0:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <vTaskStartScheduler+0xc8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e001      	b.n	8006ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d102      	bne.n	8006ade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ad8:	f000 fd10 	bl	80074fc <xTimerCreateTimerTask>
 8006adc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d11b      	bne.n	8006b1c <vTaskStartScheduler+0x98>
	__asm volatile
 8006ae4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	613b      	str	r3, [r7, #16]
}
 8006af6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <vTaskStartScheduler+0xcc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3354      	adds	r3, #84	; 0x54
 8006afe:	4a15      	ldr	r2, [pc, #84]	; (8006b54 <vTaskStartScheduler+0xd0>)
 8006b00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <vTaskStartScheduler+0xd4>)
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <vTaskStartScheduler+0xd8>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b10:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <vTaskStartScheduler+0xdc>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b16:	f001 f8cb 	bl	8007cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b1a:	e00e      	b.n	8006b3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d10a      	bne.n	8006b3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b24:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	60fb      	str	r3, [r7, #12]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <vTaskStartScheduler+0xb4>
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	08008e44 	.word	0x08008e44
 8006b48:	08007189 	.word	0x08007189
 8006b4c:	20001af4 	.word	0x20001af4
 8006b50:	200015fc 	.word	0x200015fc
 8006b54:	20000068 	.word	0x20000068
 8006b58:	20001af0 	.word	0x20001af0
 8006b5c:	20001adc 	.word	0x20001adc
 8006b60:	20001ad4 	.word	0x20001ad4

08006b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <vTaskSuspendAll+0x18>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <vTaskSuspendAll+0x18>)
 8006b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	20001af8 	.word	0x20001af8

08006b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b8e:	4b42      	ldr	r3, [pc, #264]	; (8006c98 <xTaskResumeAll+0x118>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <xTaskResumeAll+0x2c>
	__asm volatile
 8006b96:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	603b      	str	r3, [r7, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bac:	f001 f922 	bl	8007df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bb0:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <xTaskResumeAll+0x118>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	4a38      	ldr	r2, [pc, #224]	; (8006c98 <xTaskResumeAll+0x118>)
 8006bb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bba:	4b37      	ldr	r3, [pc, #220]	; (8006c98 <xTaskResumeAll+0x118>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d162      	bne.n	8006c88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bc2:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <xTaskResumeAll+0x11c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d05e      	beq.n	8006c88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bca:	e02f      	b.n	8006c2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bcc:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <xTaskResumeAll+0x120>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff f851 	bl	8005c80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff f84c 	bl	8005c80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <xTaskResumeAll+0x124>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d903      	bls.n	8006bfc <xTaskResumeAll+0x7c>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <xTaskResumeAll+0x124>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <xTaskResumeAll+0x128>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe ffd7 	bl	8005bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4b23      	ldr	r3, [pc, #140]	; (8006cac <xTaskResumeAll+0x12c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c26:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <xTaskResumeAll+0x130>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <xTaskResumeAll+0x120>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1cb      	bne.n	8006bcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c3a:	f000 fb5f 	bl	80072fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <xTaskResumeAll+0x134>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c4a:	f000 f847 	bl	8006cdc <xTaskIncrementTick>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <xTaskResumeAll+0x130>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f1      	bne.n	8006c4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c66:	4b13      	ldr	r3, [pc, #76]	; (8006cb4 <xTaskResumeAll+0x134>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xTaskResumeAll+0x130>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <xTaskResumeAll+0x138>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c88:	f001 f8e4 	bl	8007e54 <vPortExitCritical>

	return xAlreadyYielded;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20001af8 	.word	0x20001af8
 8006c9c:	20001ad0 	.word	0x20001ad0
 8006ca0:	20001a90 	.word	0x20001a90
 8006ca4:	20001ad8 	.word	0x20001ad8
 8006ca8:	20001600 	.word	0x20001600
 8006cac:	200015fc 	.word	0x200015fc
 8006cb0:	20001ae4 	.word	0x20001ae4
 8006cb4:	20001ae0 	.word	0x20001ae0
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <xTaskGetTickCount+0x1c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cc8:	687b      	ldr	r3, [r7, #4]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20001ad4 	.word	0x20001ad4

08006cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce6:	4b4f      	ldr	r3, [pc, #316]	; (8006e24 <xTaskIncrementTick+0x148>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 808f 	bne.w	8006e0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cf0:	4b4d      	ldr	r3, [pc, #308]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cf8:	4a4b      	ldr	r2, [pc, #300]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d120      	bne.n	8006d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d04:	4b49      	ldr	r3, [pc, #292]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d0e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <xTaskIncrementTick+0x46>
 8006d24:	4b41      	ldr	r3, [pc, #260]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	4b41      	ldr	r3, [pc, #260]	; (8006e30 <xTaskIncrementTick+0x154>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3f      	ldr	r2, [pc, #252]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	4a3f      	ldr	r2, [pc, #252]	; (8006e30 <xTaskIncrementTick+0x154>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <xTaskIncrementTick+0x158>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <xTaskIncrementTick+0x158>)
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	f000 fadb 	bl	80072fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d46:	4b3c      	ldr	r3, [pc, #240]	; (8006e38 <xTaskIncrementTick+0x15c>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d349      	bcc.n	8006de4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d50:	4b36      	ldr	r3, [pc, #216]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <xTaskIncrementTick+0x15c>)
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	601a      	str	r2, [r3, #0]
					break;
 8006d62:	e03f      	b.n	8006de4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d64:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d203      	bcs.n	8006d84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d7c:	4a2e      	ldr	r2, [pc, #184]	; (8006e38 <xTaskIncrementTick+0x15c>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d82:	e02f      	b.n	8006de4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe ff79 	bl	8005c80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3318      	adds	r3, #24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe ff70 	bl	8005c80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <xTaskIncrementTick+0x160>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <xTaskIncrementTick+0xd8>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	4a22      	ldr	r2, [pc, #136]	; (8006e3c <xTaskIncrementTick+0x160>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <xTaskIncrementTick+0x164>)
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f7fe fefb 	bl	8005bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <xTaskIncrementTick+0x168>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3b8      	bcc.n	8006d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de2:	e7b5      	b.n	8006d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <xTaskIncrementTick+0x168>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	4915      	ldr	r1, [pc, #84]	; (8006e40 <xTaskIncrementTick+0x164>)
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d901      	bls.n	8006e00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e00:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <xTaskIncrementTick+0x16c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e004      	b.n	8006e18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <xTaskIncrementTick+0x170>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <xTaskIncrementTick+0x170>)
 8006e16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e18:	697b      	ldr	r3, [r7, #20]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20001af8 	.word	0x20001af8
 8006e28:	20001ad4 	.word	0x20001ad4
 8006e2c:	20001a88 	.word	0x20001a88
 8006e30:	20001a8c 	.word	0x20001a8c
 8006e34:	20001ae8 	.word	0x20001ae8
 8006e38:	20001af0 	.word	0x20001af0
 8006e3c:	20001ad8 	.word	0x20001ad8
 8006e40:	20001600 	.word	0x20001600
 8006e44:	200015fc 	.word	0x200015fc
 8006e48:	20001ae4 	.word	0x20001ae4
 8006e4c:	20001ae0 	.word	0x20001ae0

08006e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e56:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <vTaskSwitchContext+0xb0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e5e:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <vTaskSwitchContext+0xb4>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e64:	e046      	b.n	8006ef4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006e66:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <vTaskSwitchContext+0xb4>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6c:	4b26      	ldr	r3, [pc, #152]	; (8006f08 <vTaskSwitchContext+0xb8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e010      	b.n	8006e96 <vTaskSwitchContext+0x46>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e7a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <vTaskSwitchContext+0x3e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	491d      	ldr	r1, [pc, #116]	; (8006f0c <vTaskSwitchContext+0xbc>)
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0e4      	beq.n	8006e74 <vTaskSwitchContext+0x24>
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <vTaskSwitchContext+0xbc>)
 8006eb6:	4413      	add	r3, r2
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	605a      	str	r2, [r3, #4]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d104      	bne.n	8006eda <vTaskSwitchContext+0x8a>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	605a      	str	r2, [r3, #4]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a0b      	ldr	r2, [pc, #44]	; (8006f10 <vTaskSwitchContext+0xc0>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <vTaskSwitchContext+0xb8>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <vTaskSwitchContext+0xc0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3354      	adds	r3, #84	; 0x54
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <vTaskSwitchContext+0xc4>)
 8006ef2:	6013      	str	r3, [r2, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	20001af8 	.word	0x20001af8
 8006f04:	20001ae4 	.word	0x20001ae4
 8006f08:	20001ad8 	.word	0x20001ad8
 8006f0c:	20001600 	.word	0x20001600
 8006f10:	200015fc 	.word	0x200015fc
 8006f14:	20000068 	.word	0x20000068

08006f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f28:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	60fb      	str	r3, [r7, #12]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f3e:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <vTaskPlaceOnEventList+0x44>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3318      	adds	r3, #24
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe fe61 	bl	8005c0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f000 fa80 	bl	8007454 <prvAddCurrentTaskToDelayedList>
}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200015fc 	.word	0x200015fc

08006f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f72:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	617b      	str	r3, [r7, #20]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3318      	adds	r3, #24
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7fe fe18 	bl	8005bc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	68b8      	ldr	r0, [r7, #8]
 8006fa6:	f000 fa55 	bl	8007454 <prvAddCurrentTaskToDelayedList>
	}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200015fc 	.word	0x200015fc

08006fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fce:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	60fb      	str	r3, [r7, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	3318      	adds	r3, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fe49 	bl	8005c80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <xTaskRemoveFromEventList+0xb0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11d      	bne.n	8007032 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fe40 	bl	8005c80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	4b19      	ldr	r3, [pc, #100]	; (800706c <xTaskRemoveFromEventList+0xb4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d903      	bls.n	8007014 <xTaskRemoveFromEventList+0x5c>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <xTaskRemoveFromEventList+0xb4>)
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	4613      	mov	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <xTaskRemoveFromEventList+0xb8>)
 8007022:	441a      	add	r2, r3
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	3304      	adds	r3, #4
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7fe fdcb 	bl	8005bc6 <vListInsertEnd>
 8007030:	e005      	b.n	800703e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3318      	adds	r3, #24
 8007036:	4619      	mov	r1, r3
 8007038:	480e      	ldr	r0, [pc, #56]	; (8007074 <xTaskRemoveFromEventList+0xbc>)
 800703a:	f7fe fdc4 	bl	8005bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <xTaskRemoveFromEventList+0xc0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	429a      	cmp	r2, r3
 800704a:	d905      	bls.n	8007058 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <xTaskRemoveFromEventList+0xc4>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e001      	b.n	800705c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800705c:	697b      	ldr	r3, [r7, #20]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20001af8 	.word	0x20001af8
 800706c:	20001ad8 	.word	0x20001ad8
 8007070:	20001600 	.word	0x20001600
 8007074:	20001a90 	.word	0x20001a90
 8007078:	200015fc 	.word	0x200015fc
 800707c:	20001ae4 	.word	0x20001ae4

08007080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <vTaskInternalSetTimeOutState+0x24>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <vTaskInternalSetTimeOutState+0x28>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20001ae8 	.word	0x20001ae8
 80070a8:	20001ad4 	.word	0x20001ad4

080070ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070bc:	f04f 0360 	mov.w	r3, #96	; 0x60
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	613b      	str	r3, [r7, #16]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070d8:	f04f 0360 	mov.w	r3, #96	; 0x60
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	60fb      	str	r3, [r7, #12]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070ee:	f000 fe81 	bl	8007df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <xTaskCheckForTimeOut+0xbc>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d102      	bne.n	8007112 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e023      	b.n	800715a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <xTaskCheckForTimeOut+0xc0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d007      	beq.n	800712e <xTaskCheckForTimeOut+0x82>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
 800712c:	e015      	b.n	800715a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	429a      	cmp	r2, r3
 8007136:	d20b      	bcs.n	8007150 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff ff9b 	bl	8007080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	e004      	b.n	800715a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800715a:	f000 fe7b 	bl	8007e54 <vPortExitCritical>

	return xReturn;
 800715e:	69fb      	ldr	r3, [r7, #28]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20001ad4 	.word	0x20001ad4
 800716c:	20001ae8 	.word	0x20001ae8

08007170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007174:	4b03      	ldr	r3, [pc, #12]	; (8007184 <vTaskMissedYield+0x14>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20001ae4 	.word	0x20001ae4

08007188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007190:	f000 f852 	bl	8007238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007194:	4b06      	ldr	r3, [pc, #24]	; (80071b0 <prvIdleTask+0x28>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d9f9      	bls.n	8007190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <prvIdleTask+0x2c>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071ac:	e7f0      	b.n	8007190 <prvIdleTask+0x8>
 80071ae:	bf00      	nop
 80071b0:	20001600 	.word	0x20001600
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
 80071c2:	e00c      	b.n	80071de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a12      	ldr	r2, [pc, #72]	; (8007218 <prvInitialiseTaskLists+0x60>)
 80071d0:	4413      	add	r3, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fcca 	bl	8005b6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3301      	adds	r3, #1
 80071dc:	607b      	str	r3, [r7, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b37      	cmp	r3, #55	; 0x37
 80071e2:	d9ef      	bls.n	80071c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e4:	480d      	ldr	r0, [pc, #52]	; (800721c <prvInitialiseTaskLists+0x64>)
 80071e6:	f7fe fcc1 	bl	8005b6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ea:	480d      	ldr	r0, [pc, #52]	; (8007220 <prvInitialiseTaskLists+0x68>)
 80071ec:	f7fe fcbe 	bl	8005b6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f0:	480c      	ldr	r0, [pc, #48]	; (8007224 <prvInitialiseTaskLists+0x6c>)
 80071f2:	f7fe fcbb 	bl	8005b6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071f6:	480c      	ldr	r0, [pc, #48]	; (8007228 <prvInitialiseTaskLists+0x70>)
 80071f8:	f7fe fcb8 	bl	8005b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071fc:	480b      	ldr	r0, [pc, #44]	; (800722c <prvInitialiseTaskLists+0x74>)
 80071fe:	f7fe fcb5 	bl	8005b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <prvInitialiseTaskLists+0x78>)
 8007204:	4a05      	ldr	r2, [pc, #20]	; (800721c <prvInitialiseTaskLists+0x64>)
 8007206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <prvInitialiseTaskLists+0x7c>)
 800720a:	4a05      	ldr	r2, [pc, #20]	; (8007220 <prvInitialiseTaskLists+0x68>)
 800720c:	601a      	str	r2, [r3, #0]
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20001600 	.word	0x20001600
 800721c:	20001a60 	.word	0x20001a60
 8007220:	20001a74 	.word	0x20001a74
 8007224:	20001a90 	.word	0x20001a90
 8007228:	20001aa4 	.word	0x20001aa4
 800722c:	20001abc 	.word	0x20001abc
 8007230:	20001a88 	.word	0x20001a88
 8007234:	20001a8c 	.word	0x20001a8c

08007238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800723e:	e019      	b.n	8007274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007240:	f000 fdd8 	bl	8007df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007244:	4b10      	ldr	r3, [pc, #64]	; (8007288 <prvCheckTasksWaitingTermination+0x50>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fd15 	bl	8005c80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007256:	4b0d      	ldr	r3, [pc, #52]	; (800728c <prvCheckTasksWaitingTermination+0x54>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3b01      	subs	r3, #1
 800725c:	4a0b      	ldr	r2, [pc, #44]	; (800728c <prvCheckTasksWaitingTermination+0x54>)
 800725e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3b01      	subs	r3, #1
 8007266:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726a:	f000 fdf3 	bl	8007e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f810 	bl	8007294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <prvCheckTasksWaitingTermination+0x58>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e1      	bne.n	8007240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20001aa4 	.word	0x20001aa4
 800728c:	20001ad0 	.word	0x20001ad0
 8007290:	20001ab8 	.word	0x20001ab8

08007294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3354      	adds	r3, #84	; 0x54
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 faaf 	bl	8008804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d108      	bne.n	80072c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 ff8b 	bl	80081d0 <vPortFree>
				vPortFree( pxTCB );
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 ff88 	bl	80081d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072c0:	e018      	b.n	80072f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d103      	bne.n	80072d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 ff7f 	bl	80081d0 <vPortFree>
	}
 80072d2:	e00f      	b.n	80072f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d00a      	beq.n	80072f4 <prvDeleteTCB+0x60>
	__asm volatile
 80072de:	f04f 0360 	mov.w	r3, #96	; 0x60
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60fb      	str	r3, [r7, #12]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <prvDeleteTCB+0x5e>
	}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007302:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <prvResetNextTaskUnblockTime+0x38>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <prvResetNextTaskUnblockTime+0x3c>)
 800730e:	f04f 32ff 	mov.w	r2, #4294967295
 8007312:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007314:	e008      	b.n	8007328 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <prvResetNextTaskUnblockTime+0x38>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a04      	ldr	r2, [pc, #16]	; (8007338 <prvResetNextTaskUnblockTime+0x3c>)
 8007326:	6013      	str	r3, [r2, #0]
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20001a88 	.word	0x20001a88
 8007338:	20001af0 	.word	0x20001af0

0800733c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <xTaskGetSchedulerState+0x34>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800734a:	2301      	movs	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	e008      	b.n	8007362 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <xTaskGetSchedulerState+0x38>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007358:	2302      	movs	r3, #2
 800735a:	607b      	str	r3, [r7, #4]
 800735c:	e001      	b.n	8007362 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800735e:	2300      	movs	r3, #0
 8007360:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007362:	687b      	ldr	r3, [r7, #4]
	}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	20001adc 	.word	0x20001adc
 8007374:	20001af8 	.word	0x20001af8

08007378 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d056      	beq.n	800743c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800738e:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <xTaskPriorityDisinherit+0xd0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d00a      	beq.n	80073ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007398:	f04f 0360 	mov.w	r3, #96	; 0x60
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073b6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	60bb      	str	r3, [r7, #8]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d0:	1e5a      	subs	r2, r3, #1
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073de:	429a      	cmp	r2, r3
 80073e0:	d02c      	beq.n	800743c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d128      	bne.n	800743c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fc46 	bl	8005c80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <xTaskPriorityDisinherit+0xd4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d903      	bls.n	800741c <xTaskPriorityDisinherit+0xa4>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	4a0c      	ldr	r2, [pc, #48]	; (800744c <xTaskPriorityDisinherit+0xd4>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4a09      	ldr	r2, [pc, #36]	; (8007450 <xTaskPriorityDisinherit+0xd8>)
 800742a:	441a      	add	r2, r3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f7fe fbc7 	bl	8005bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800743c:	697b      	ldr	r3, [r7, #20]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	200015fc 	.word	0x200015fc
 800744c:	20001ad8 	.word	0x20001ad8
 8007450:	20001600 	.word	0x20001600

08007454 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800745e:	4b21      	ldr	r3, [pc, #132]	; (80074e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007464:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3304      	adds	r3, #4
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fc08 	bl	8005c80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d10a      	bne.n	800748e <prvAddCurrentTaskToDelayedList+0x3a>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800747e:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4819      	ldr	r0, [pc, #100]	; (80074ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007488:	f7fe fb9d 	bl	8005bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800748c:	e026      	b.n	80074dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4413      	add	r3, r2
 8007494:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d209      	bcs.n	80074ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074a6:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f7fe fbab 	bl	8005c0e <vListInsert>
}
 80074b8:	e010      	b.n	80074dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f7fe fba1 	bl	8005c0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d202      	bcs.n	80074dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074d6:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6013      	str	r3, [r2, #0]
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20001ad4 	.word	0x20001ad4
 80074e8:	200015fc 	.word	0x200015fc
 80074ec:	20001abc 	.word	0x20001abc
 80074f0:	20001a8c 	.word	0x20001a8c
 80074f4:	20001a88 	.word	0x20001a88
 80074f8:	20001af0 	.word	0x20001af0

080074fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08a      	sub	sp, #40	; 0x28
 8007500:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007506:	f000 fb07 	bl	8007b18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800750a:	4b1c      	ldr	r3, [pc, #112]	; (800757c <xTimerCreateTimerTask+0x80>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d021      	beq.n	8007556 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800751a:	1d3a      	adds	r2, r7, #4
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	f107 030c 	add.w	r3, r7, #12
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fb07 	bl	8005b38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	9202      	str	r2, [sp, #8]
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	2302      	movs	r3, #2
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	2300      	movs	r3, #0
 800753a:	460a      	mov	r2, r1
 800753c:	4910      	ldr	r1, [pc, #64]	; (8007580 <xTimerCreateTimerTask+0x84>)
 800753e:	4811      	ldr	r0, [pc, #68]	; (8007584 <xTimerCreateTimerTask+0x88>)
 8007540:	f7ff f8b4 	bl	80066ac <xTaskCreateStatic>
 8007544:	4603      	mov	r3, r0
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <xTimerCreateTimerTask+0x8c>)
 8007548:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <xTimerCreateTimerTask+0x8c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007552:	2301      	movs	r3, #1
 8007554:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800755c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	613b      	str	r3, [r7, #16]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007572:	697b      	ldr	r3, [r7, #20]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20001b2c 	.word	0x20001b2c
 8007580:	08008e4c 	.word	0x08008e4c
 8007584:	080076c1 	.word	0x080076c1
 8007588:	20001b30 	.word	0x20001b30

0800758c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	; 0x28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80075a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	623b      	str	r3, [r7, #32]
}
 80075b6:	bf00      	nop
 80075b8:	e7fe      	b.n	80075b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075ba:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <xTimerGenericCommand+0x98>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d02a      	beq.n	8007618 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	dc18      	bgt.n	8007606 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075d4:	f7ff feb2 	bl	800733c <xTaskGetSchedulerState>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d109      	bne.n	80075f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <xTimerGenericCommand+0x98>)
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	f107 0110 	add.w	r1, r7, #16
 80075e6:	2300      	movs	r3, #0
 80075e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ea:	f7fe fc77 	bl	8005edc <xQueueGenericSend>
 80075ee:	6278      	str	r0, [r7, #36]	; 0x24
 80075f0:	e012      	b.n	8007618 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <xTimerGenericCommand+0x98>)
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	f107 0110 	add.w	r1, r7, #16
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	f7fe fc6d 	bl	8005edc <xQueueGenericSend>
 8007602:	6278      	str	r0, [r7, #36]	; 0x24
 8007604:	e008      	b.n	8007618 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <xTimerGenericCommand+0x98>)
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f107 0110 	add.w	r1, r7, #16
 800760e:	2300      	movs	r3, #0
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	f7fe fd61 	bl	80060d8 <xQueueGenericSendFromISR>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800761a:	4618      	mov	r0, r3
 800761c:	3728      	adds	r7, #40	; 0x28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20001b2c 	.word	0x20001b2c

08007628 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007632:	4b22      	ldr	r3, [pc, #136]	; (80076bc <prvProcessExpiredTimer+0x94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3304      	adds	r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe fb1d 	bl	8005c80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d022      	beq.n	800769a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	18d1      	adds	r1, r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	f000 f8d1 	bl	8007808 <prvInsertTimerInActiveList>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01f      	beq.n	80076ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2300      	movs	r3, #0
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	2100      	movs	r1, #0
 8007676:	6978      	ldr	r0, [r7, #20]
 8007678:	f7ff ff88 	bl	800758c <xTimerGenericCommand>
 800767c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d113      	bne.n	80076ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007684:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	6978      	ldr	r0, [r7, #20]
 80076b2:	4798      	blx	r3
}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20001b24 	.word	0x20001b24

080076c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076c8:	f107 0308 	add.w	r3, r7, #8
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f857 	bl	8007780 <prvGetNextExpireTime>
 80076d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4619      	mov	r1, r3
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f803 	bl	80076e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076de:	f000 f8d5 	bl	800788c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076e2:	e7f1      	b.n	80076c8 <prvTimerTask+0x8>

080076e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076ee:	f7ff fa39 	bl	8006b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f866 	bl	80077c8 <prvSampleTimeNow>
 80076fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d130      	bne.n	8007766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <prvProcessTimerOrBlockTask+0x3c>
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	429a      	cmp	r2, r3
 8007710:	d806      	bhi.n	8007720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007712:	f7ff fa35 	bl	8006b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff ff85 	bl	8007628 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800771e:	e024      	b.n	800776a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <prvProcessTimerOrBlockTask+0x90>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <prvProcessTimerOrBlockTask+0x50>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <prvProcessTimerOrBlockTask+0x52>
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <prvProcessTimerOrBlockTask+0x94>)
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	4619      	mov	r1, r3
 8007746:	f7fe ff7d 	bl	8006644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800774a:	f7ff fa19 	bl	8006b80 <xTaskResumeAll>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007754:	4b09      	ldr	r3, [pc, #36]	; (800777c <prvProcessTimerOrBlockTask+0x98>)
 8007756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	f3bf 8f6f 	isb	sy
}
 8007764:	e001      	b.n	800776a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007766:	f7ff fa0b 	bl	8006b80 <xTaskResumeAll>
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20001b28 	.word	0x20001b28
 8007778:	20001b2c 	.word	0x20001b2c
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <prvGetNextExpireTime+0x44>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <prvGetNextExpireTime+0x16>
 8007792:	2201      	movs	r2, #1
 8007794:	e000      	b.n	8007798 <prvGetNextExpireTime+0x18>
 8007796:	2200      	movs	r2, #0
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <prvGetNextExpireTime+0x44>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e001      	b.n	80077b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077b4:	68fb      	ldr	r3, [r7, #12]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20001b24 	.word	0x20001b24

080077c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077d0:	f7ff fa74 	bl	8006cbc <xTaskGetTickCount>
 80077d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <prvSampleTimeNow+0x3c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d205      	bcs.n	80077ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077e0:	f000 f936 	bl	8007a50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077f2:	4a04      	ldr	r2, [pc, #16]	; (8007804 <prvSampleTimeNow+0x3c>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80077f8:	68fb      	ldr	r3, [r7, #12]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20001b34 	.word	0x20001b34

08007808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d812      	bhi.n	8007854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	1ad2      	subs	r2, r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800783c:	2301      	movs	r3, #1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e01b      	b.n	800787a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007842:	4b10      	ldr	r3, [pc, #64]	; (8007884 <prvInsertTimerInActiveList+0x7c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3304      	adds	r3, #4
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f7fe f9de 	bl	8005c0e <vListInsert>
 8007852:	e012      	b.n	800787a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d206      	bcs.n	800786a <prvInsertTimerInActiveList+0x62>
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d302      	bcc.n	800786a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e007      	b.n	800787a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <prvInsertTimerInActiveList+0x80>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fe f9ca 	bl	8005c0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800787a:	697b      	ldr	r3, [r7, #20]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20001b28 	.word	0x20001b28
 8007888:	20001b24 	.word	0x20001b24

0800788c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08e      	sub	sp, #56	; 0x38
 8007890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007892:	e0ca      	b.n	8007a2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da18      	bge.n	80078cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800789a:	1d3b      	adds	r3, r7, #4
 800789c:	3304      	adds	r3, #4
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078a6:	f04f 0360 	mov.w	r3, #96	; 0x60
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	61fb      	str	r3, [r7, #28]
}
 80078b8:	bf00      	nop
 80078ba:	e7fe      	b.n	80078ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c2:	6850      	ldr	r0, [r2, #4]
 80078c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c6:	6892      	ldr	r2, [r2, #8]
 80078c8:	4611      	mov	r1, r2
 80078ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f2c0 80ab 	blt.w	8007a2a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe f9cb 	bl	8005c80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ea:	463b      	mov	r3, r7
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff ff6b 	bl	80077c8 <prvSampleTimeNow>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	f200 8096 	bhi.w	8007a28 <prvProcessReceivedCommands+0x19c>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <prvProcessReceivedCommands+0x78>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	0800792d 	.word	0x0800792d
 8007908:	0800792d 	.word	0x0800792d
 800790c:	0800792d 	.word	0x0800792d
 8007910:	080079a1 	.word	0x080079a1
 8007914:	080079b5 	.word	0x080079b5
 8007918:	080079ff 	.word	0x080079ff
 800791c:	0800792d 	.word	0x0800792d
 8007920:	0800792d 	.word	0x0800792d
 8007924:	080079a1 	.word	0x080079a1
 8007928:	080079b5 	.word	0x080079b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	b2da      	uxtb	r2, r3
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	18d1      	adds	r1, r2, r3
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794c:	f7ff ff5c 	bl	8007808 <prvInsertTimerInActiveList>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d069      	beq.n	8007a2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d05e      	beq.n	8007a2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	441a      	add	r2, r3
 8007974:	2300      	movs	r3, #0
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	2100      	movs	r1, #0
 800797c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800797e:	f7ff fe05 	bl	800758c <xTimerGenericCommand>
 8007982:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d14f      	bne.n	8007a2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800798a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	61bb      	str	r3, [r7, #24]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a6:	f023 0301 	bic.w	r3, r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80079b2:	e03a      	b.n	8007a2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80079d4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	617b      	str	r3, [r7, #20]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	18d1      	adds	r1, r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f8:	f7ff ff06 	bl	8007808 <prvInsertTimerInActiveList>
					break;
 80079fc:	e015      	b.n	8007a2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d103      	bne.n	8007a14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0e:	f000 fbdf 	bl	80081d0 <vPortFree>
 8007a12:	e00a      	b.n	8007a2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a26:	e000      	b.n	8007a2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007a28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <prvProcessReceivedCommands+0x1c0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	1d39      	adds	r1, r7, #4
 8007a30:	2200      	movs	r2, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fbec 	bl	8006210 <xQueueReceive>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f47f af2a 	bne.w	8007894 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3730      	adds	r7, #48	; 0x30
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20001b2c 	.word	0x20001b2c

08007a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a56:	e048      	b.n	8007aea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a58:	4b2d      	ldr	r3, [pc, #180]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a62:	4b2b      	ldr	r3, [pc, #172]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe f905 	bl	8005c80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02e      	beq.n	8007aea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4413      	add	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d90e      	bls.n	8007abc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aaa:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fe f8aa 	bl	8005c0e <vListInsert>
 8007aba:	e016      	b.n	8007aea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fd60 	bl	800758c <xTimerGenericCommand>
 8007acc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ad4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	603b      	str	r3, [r7, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1b1      	bne.n	8007a58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007af4:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <prvSwitchTimerLists+0xc4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <prvSwitchTimerLists+0xc0>)
 8007b00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b02:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <prvSwitchTimerLists+0xc4>)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	6013      	str	r3, [r2, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20001b24 	.word	0x20001b24
 8007b14:	20001b28 	.word	0x20001b28

08007b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b1e:	f000 f969 	bl	8007df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <prvCheckForValidListAndQueue+0x60>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d120      	bne.n	8007b6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b2a:	4814      	ldr	r0, [pc, #80]	; (8007b7c <prvCheckForValidListAndQueue+0x64>)
 8007b2c:	f7fe f81e 	bl	8005b6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b30:	4813      	ldr	r0, [pc, #76]	; (8007b80 <prvCheckForValidListAndQueue+0x68>)
 8007b32:	f7fe f81b 	bl	8005b6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b36:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <prvCheckForValidListAndQueue+0x6c>)
 8007b38:	4a10      	ldr	r2, [pc, #64]	; (8007b7c <prvCheckForValidListAndQueue+0x64>)
 8007b3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <prvCheckForValidListAndQueue+0x70>)
 8007b3e:	4a10      	ldr	r2, [pc, #64]	; (8007b80 <prvCheckForValidListAndQueue+0x68>)
 8007b40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b42:	2300      	movs	r3, #0
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <prvCheckForValidListAndQueue+0x74>)
 8007b48:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <prvCheckForValidListAndQueue+0x78>)
 8007b4a:	2110      	movs	r1, #16
 8007b4c:	200a      	movs	r0, #10
 8007b4e:	f7fe f929 	bl	8005da4 <xQueueGenericCreateStatic>
 8007b52:	4603      	mov	r3, r0
 8007b54:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <prvCheckForValidListAndQueue+0x60>)
 8007b56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b58:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <prvCheckForValidListAndQueue+0x60>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <prvCheckForValidListAndQueue+0x60>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	490b      	ldr	r1, [pc, #44]	; (8007b94 <prvCheckForValidListAndQueue+0x7c>)
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fd42 	bl	80065f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b6c:	f000 f972 	bl	8007e54 <vPortExitCritical>
}
 8007b70:	bf00      	nop
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20001b2c 	.word	0x20001b2c
 8007b7c:	20001afc 	.word	0x20001afc
 8007b80:	20001b10 	.word	0x20001b10
 8007b84:	20001b24 	.word	0x20001b24
 8007b88:	20001b28 	.word	0x20001b28
 8007b8c:	20001bd8 	.word	0x20001bd8
 8007b90:	20001b38 	.word	0x20001b38
 8007b94:	08008e54 	.word	0x08008e54

08007b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3b04      	subs	r3, #4
 8007ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3b04      	subs	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3b04      	subs	r3, #4
 8007bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bc8:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <pxPortInitialiseStack+0x64>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3b14      	subs	r3, #20
 8007bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3b04      	subs	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f06f 0202 	mvn.w	r2, #2
 8007be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3b20      	subs	r3, #32
 8007bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	08007c01 	.word	0x08007c01

08007c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <prvTaskExitError+0x54>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d00a      	beq.n	8007c2a <prvTaskExitError+0x2a>
	__asm volatile
 8007c14:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	60fb      	str	r3, [r7, #12]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <prvTaskExitError+0x28>
	__asm volatile
 8007c2a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	60bb      	str	r3, [r7, #8]
}
 8007c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c3e:	bf00      	nop
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0fc      	beq.n	8007c40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	2000000c 	.word	0x2000000c
	...

08007c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <pxCurrentTCBConst2>)
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	6808      	ldr	r0, [r1, #0]
 8007c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	f380 8809 	msr	PSP, r0
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f04f 0000 	mov.w	r0, #0
 8007c76:	f380 8811 	msr	BASEPRI, r0
 8007c7a:	4770      	bx	lr
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst2>:
 8007c80:	200015fc 	.word	0x200015fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c88:	4808      	ldr	r0, [pc, #32]	; (8007cac <prvPortStartFirstTask+0x24>)
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	6800      	ldr	r0, [r0, #0]
 8007c8e:	f380 8808 	msr	MSP, r0
 8007c92:	f04f 0000 	mov.w	r0, #0
 8007c96:	f380 8814 	msr	CONTROL, r0
 8007c9a:	b662      	cpsie	i
 8007c9c:	b661      	cpsie	f
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	df00      	svc	0
 8007ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007caa:	bf00      	nop
 8007cac:	e000ed08 	.word	0xe000ed08

08007cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cb6:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a46      	ldr	r2, [pc, #280]	; (8007dd4 <xPortStartScheduler+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10a      	bne.n	8007cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007cc0:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cd6:	4b3e      	ldr	r3, [pc, #248]	; (8007dd0 <xPortStartScheduler+0x120>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	; (8007dd8 <xPortStartScheduler+0x128>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10a      	bne.n	8007cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ce0:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007cf6:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xPortStartScheduler+0x12c>)
 8007cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	22ff      	movs	r2, #255	; 0xff
 8007d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	4b31      	ldr	r3, [pc, #196]	; (8007de0 <xPortStartScheduler+0x130>)
 8007d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d20:	2207      	movs	r2, #7
 8007d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d24:	e009      	b.n	8007d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d26:	4b2f      	ldr	r3, [pc, #188]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d0ef      	beq.n	8007d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d46:	4b27      	ldr	r3, [pc, #156]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1c3 0307 	rsb	r3, r3, #7
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d00a      	beq.n	8007d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d52:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	60bb      	str	r3, [r7, #8]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	4a1d      	ldr	r2, [pc, #116]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d72:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <xPortStartScheduler+0x134>)
 8007d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d86:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d92:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <xPortStartScheduler+0x138>)
 8007d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d9e:	f000 f8dd 	bl	8007f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007da2:	4b12      	ldr	r3, [pc, #72]	; (8007dec <xPortStartScheduler+0x13c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007da8:	f000 f8fc 	bl	8007fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007dac:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xPortStartScheduler+0x140>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0f      	ldr	r2, [pc, #60]	; (8007df0 <xPortStartScheduler+0x140>)
 8007db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007db8:	f7ff ff66 	bl	8007c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dbc:	f7ff f848 	bl	8006e50 <vTaskSwitchContext>
	prvTaskExitError();
 8007dc0:	f7ff ff1e 	bl	8007c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	e000ed00 	.word	0xe000ed00
 8007dd4:	410fc271 	.word	0x410fc271
 8007dd8:	410fc270 	.word	0x410fc270
 8007ddc:	e000e400 	.word	0xe000e400
 8007de0:	20001c28 	.word	0x20001c28
 8007de4:	20001c2c 	.word	0x20001c2c
 8007de8:	e000ed20 	.word	0xe000ed20
 8007dec:	2000000c 	.word	0x2000000c
 8007df0:	e000ef34 	.word	0xe000ef34

08007df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
	__asm volatile
 8007dfa:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	607b      	str	r3, [r7, #4]
}
 8007e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <vPortEnterCritical+0x58>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10f      	bne.n	8007e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <vPortEnterCritical+0x5c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e2a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	603b      	str	r3, [r7, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <vPortEnterCritical+0x4a>
	}
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000000c 	.word	0x2000000c
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <vPortExitCritical+0x24>
	__asm volatile
 8007e62:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <vPortExitCritical+0x50>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <vPortExitCritical+0x42>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f383 8811 	msr	BASEPRI, r3
}
 8007e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	2000000c 	.word	0x2000000c
	...

08007eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007eb0:	f3ef 8009 	mrs	r0, PSP
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <pxCurrentTCBConst>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f01e 0f10 	tst.w	lr, #16
 8007ec0:	bf08      	it	eq
 8007ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	6010      	str	r0, [r2, #0]
 8007ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ed0:	f04f 0060 	mov.w	r0, #96	; 0x60
 8007ed4:	f380 8811 	msr	BASEPRI, r0
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f7fe ffb6 	bl	8006e50 <vTaskSwitchContext>
 8007ee4:	f04f 0000 	mov.w	r0, #0
 8007ee8:	f380 8811 	msr	BASEPRI, r0
 8007eec:	bc09      	pop	{r0, r3}
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	6808      	ldr	r0, [r1, #0]
 8007ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef6:	f01e 0f10 	tst.w	lr, #16
 8007efa:	bf08      	it	eq
 8007efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f00:	f380 8809 	msr	PSP, r0
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	f3af 8000 	nop.w

08007f10 <pxCurrentTCBConst>:
 8007f10:	200015fc 	.word	0x200015fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f32:	f7fe fed3 	bl	8006cdc <xTaskIncrementTick>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <xPortSysTickHandler+0x40>)
 8007f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	2300      	movs	r3, #0
 8007f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f383 8811 	msr	BASEPRI, r3
}
 8007f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <vPortSetupTimerInterrupt+0x38>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <vPortSetupTimerInterrupt+0x3c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	; (8007f9c <vPortSetupTimerInterrupt+0x40>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	4a09      	ldr	r2, [pc, #36]	; (8007fa0 <vPortSetupTimerInterrupt+0x44>)
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f7e:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <vPortSetupTimerInterrupt+0x34>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	e000e010 	.word	0xe000e010
 8007f94:	e000e018 	.word	0xe000e018
 8007f98:	20000000 	.word	0x20000000
 8007f9c:	10624dd3 	.word	0x10624dd3
 8007fa0:	e000e014 	.word	0xe000e014

08007fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fb4 <vPortEnableVFP+0x10>
 8007fa8:	6801      	ldr	r1, [r0, #0]
 8007faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fae:	6001      	str	r1, [r0, #0]
 8007fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fb2:	bf00      	nop
 8007fb4:	e000ed88 	.word	0xe000ed88

08007fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d914      	bls.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <vPortValidateInterruptPriority+0x70>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fd4:	4b15      	ldr	r3, [pc, #84]	; (800802c <vPortValidateInterruptPriority+0x74>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	7afa      	ldrb	r2, [r7, #11]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d20a      	bcs.n	8007ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007fde:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ff4:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <vPortValidateInterruptPriority+0x78>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <vPortValidateInterruptPriority+0x7c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d90a      	bls.n	800801a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008004:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	603b      	str	r3, [r7, #0]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <vPortValidateInterruptPriority+0x60>
	}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	e000e3f0 	.word	0xe000e3f0
 800802c:	20001c28 	.word	0x20001c28
 8008030:	e000ed0c 	.word	0xe000ed0c
 8008034:	20001c2c 	.word	0x20001c2c

08008038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008044:	f7fe fd8e 	bl	8006b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008048:	4b5b      	ldr	r3, [pc, #364]	; (80081b8 <pvPortMalloc+0x180>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008050:	f000 f920 	bl	8008294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008054:	4b59      	ldr	r3, [pc, #356]	; (80081bc <pvPortMalloc+0x184>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8093 	bne.w	8008188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01d      	beq.n	80080a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d014      	beq.n	80080a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <pvPortMalloc+0x6c>
	__asm volatile
 800808e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	617b      	str	r3, [r7, #20]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d06e      	beq.n	8008188 <pvPortMalloc+0x150>
 80080aa:	4b45      	ldr	r3, [pc, #276]	; (80081c0 <pvPortMalloc+0x188>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d869      	bhi.n	8008188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080b4:	4b43      	ldr	r3, [pc, #268]	; (80081c4 <pvPortMalloc+0x18c>)
 80080b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080b8:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <pvPortMalloc+0x18c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080be:	e004      	b.n	80080ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d903      	bls.n	80080dc <pvPortMalloc+0xa4>
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f1      	bne.n	80080c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <pvPortMalloc+0x180>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d050      	beq.n	8008188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2208      	movs	r2, #8
 80080ec:	4413      	add	r3, r2
 80080ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	2308      	movs	r3, #8
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	429a      	cmp	r2, r3
 8008106:	d91f      	bls.n	8008148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <pvPortMalloc+0xf8>
	__asm volatile
 800811a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	613b      	str	r3, [r7, #16]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008142:	69b8      	ldr	r0, [r7, #24]
 8008144:	f000 f908 	bl	8008358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008148:	4b1d      	ldr	r3, [pc, #116]	; (80081c0 <pvPortMalloc+0x188>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <pvPortMalloc+0x188>)
 8008154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <pvPortMalloc+0x188>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <pvPortMalloc+0x190>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d203      	bcs.n	800816a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008162:	4b17      	ldr	r3, [pc, #92]	; (80081c0 <pvPortMalloc+0x188>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	; (80081c8 <pvPortMalloc+0x190>)
 8008168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <pvPortMalloc+0x184>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	431a      	orrs	r2, r3
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <pvPortMalloc+0x194>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a11      	ldr	r2, [pc, #68]	; (80081cc <pvPortMalloc+0x194>)
 8008186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008188:	f7fe fcfa 	bl	8006b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <pvPortMalloc+0x174>
	__asm volatile
 8008196:	f04f 0360 	mov.w	r3, #96	; 0x60
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <pvPortMalloc+0x172>
	return pvReturn;
 80081ac:	69fb      	ldr	r3, [r7, #28]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20005838 	.word	0x20005838
 80081bc:	2000584c 	.word	0x2000584c
 80081c0:	2000583c 	.word	0x2000583c
 80081c4:	20005830 	.word	0x20005830
 80081c8:	20005840 	.word	0x20005840
 80081cc:	20005844 	.word	0x20005844

080081d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d04d      	beq.n	800827e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081e2:	2308      	movs	r3, #8
 80081e4:	425b      	negs	r3, r3
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	4b24      	ldr	r3, [pc, #144]	; (8008288 <vPortFree+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <vPortFree+0x44>
	__asm volatile
 80081fe:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	60fb      	str	r3, [r7, #12]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <vPortFree+0x62>
	__asm volatile
 800821c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60bb      	str	r3, [r7, #8]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <vPortFree+0xb8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01e      	beq.n	800827e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11a      	bne.n	800827e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b0e      	ldr	r3, [pc, #56]	; (8008288 <vPortFree+0xb8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008258:	f7fe fc84 	bl	8006b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <vPortFree+0xbc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4413      	add	r3, r2
 8008266:	4a09      	ldr	r2, [pc, #36]	; (800828c <vPortFree+0xbc>)
 8008268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800826a:	6938      	ldr	r0, [r7, #16]
 800826c:	f000 f874 	bl	8008358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <vPortFree+0xc0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a06      	ldr	r2, [pc, #24]	; (8008290 <vPortFree+0xc0>)
 8008278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800827a:	f7fe fc81 	bl	8006b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800827e:	bf00      	nop
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	2000584c 	.word	0x2000584c
 800828c:	2000583c 	.word	0x2000583c
 8008290:	20005848 	.word	0x20005848

08008294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800829a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800829e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082a0:	4b27      	ldr	r3, [pc, #156]	; (8008340 <prvHeapInit+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00c      	beq.n	80082c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3307      	adds	r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <prvHeapInit+0xac>)
 80082c4:	4413      	add	r3, r2
 80082c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <prvHeapInit+0xb0>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <prvHeapInit+0xb0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082e0:	2208      	movs	r2, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <prvHeapInit+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <prvHeapInit+0xb4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvHeapInit+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvHeapInit+0xb4>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4a0a      	ldr	r2, [pc, #40]	; (800834c <prvHeapInit+0xb8>)
 8008322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <prvHeapInit+0xbc>)
 800832a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <prvHeapInit+0xc0>)
 800832e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20001c30 	.word	0x20001c30
 8008344:	20005830 	.word	0x20005830
 8008348:	20005838 	.word	0x20005838
 800834c:	20005840 	.word	0x20005840
 8008350:	2000583c 	.word	0x2000583c
 8008354:	2000584c 	.word	0x2000584c

08008358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008360:	4b28      	ldr	r3, [pc, #160]	; (8008404 <prvInsertBlockIntoFreeList+0xac>)
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e002      	b.n	800836c <prvInsertBlockIntoFreeList+0x14>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d8f7      	bhi.n	8008366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d108      	bne.n	800839a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	441a      	add	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d118      	bne.n	80083e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d00d      	beq.n	80083d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e003      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d002      	beq.n	80083f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20005830 	.word	0x20005830
 8008408:	20005838 	.word	0x20005838

0800840c <std>:
 800840c:	2300      	movs	r3, #0
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	e9c0 3300 	strd	r3, r3, [r0]
 8008416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800841a:	6083      	str	r3, [r0, #8]
 800841c:	8181      	strh	r1, [r0, #12]
 800841e:	6643      	str	r3, [r0, #100]	; 0x64
 8008420:	81c2      	strh	r2, [r0, #14]
 8008422:	6183      	str	r3, [r0, #24]
 8008424:	4619      	mov	r1, r3
 8008426:	2208      	movs	r2, #8
 8008428:	305c      	adds	r0, #92	; 0x5c
 800842a:	f000 f9d3 	bl	80087d4 <memset>
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <std+0x38>)
 8008430:	6263      	str	r3, [r4, #36]	; 0x24
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <std+0x3c>)
 8008434:	62a3      	str	r3, [r4, #40]	; 0x28
 8008436:	4b05      	ldr	r3, [pc, #20]	; (800844c <std+0x40>)
 8008438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <std+0x44>)
 800843c:	6224      	str	r4, [r4, #32]
 800843e:	6323      	str	r3, [r4, #48]	; 0x30
 8008440:	bd10      	pop	{r4, pc}
 8008442:	bf00      	nop
 8008444:	08008625 	.word	0x08008625
 8008448:	08008647 	.word	0x08008647
 800844c:	0800867f 	.word	0x0800867f
 8008450:	080086a3 	.word	0x080086a3

08008454 <stdio_exit_handler>:
 8008454:	4a02      	ldr	r2, [pc, #8]	; (8008460 <stdio_exit_handler+0xc>)
 8008456:	4903      	ldr	r1, [pc, #12]	; (8008464 <stdio_exit_handler+0x10>)
 8008458:	4803      	ldr	r0, [pc, #12]	; (8008468 <stdio_exit_handler+0x14>)
 800845a:	f000 b869 	b.w	8008530 <_fwalk_sglue>
 800845e:	bf00      	nop
 8008460:	20000010 	.word	0x20000010
 8008464:	08008c8d 	.word	0x08008c8d
 8008468:	2000001c 	.word	0x2000001c

0800846c <cleanup_stdio>:
 800846c:	6841      	ldr	r1, [r0, #4]
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <cleanup_stdio+0x34>)
 8008470:	4299      	cmp	r1, r3
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	d001      	beq.n	800847c <cleanup_stdio+0x10>
 8008478:	f000 fc08 	bl	8008c8c <_fflush_r>
 800847c:	68a1      	ldr	r1, [r4, #8]
 800847e:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <cleanup_stdio+0x38>)
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <cleanup_stdio+0x1e>
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fc01 	bl	8008c8c <_fflush_r>
 800848a:	68e1      	ldr	r1, [r4, #12]
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <cleanup_stdio+0x3c>)
 800848e:	4299      	cmp	r1, r3
 8008490:	d004      	beq.n	800849c <cleanup_stdio+0x30>
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f000 bbf8 	b.w	8008c8c <_fflush_r>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	bf00      	nop
 80084a0:	20005850 	.word	0x20005850
 80084a4:	200058b8 	.word	0x200058b8
 80084a8:	20005920 	.word	0x20005920

080084ac <global_stdio_init.part.0>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <global_stdio_init.part.0+0x30>)
 80084b0:	4c0b      	ldr	r4, [pc, #44]	; (80084e0 <global_stdio_init.part.0+0x34>)
 80084b2:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <global_stdio_init.part.0+0x38>)
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	4620      	mov	r0, r4
 80084b8:	2200      	movs	r2, #0
 80084ba:	2104      	movs	r1, #4
 80084bc:	f7ff ffa6 	bl	800840c <std>
 80084c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084c4:	2201      	movs	r2, #1
 80084c6:	2109      	movs	r1, #9
 80084c8:	f7ff ffa0 	bl	800840c <std>
 80084cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084d0:	2202      	movs	r2, #2
 80084d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d6:	2112      	movs	r1, #18
 80084d8:	f7ff bf98 	b.w	800840c <std>
 80084dc:	20005988 	.word	0x20005988
 80084e0:	20005850 	.word	0x20005850
 80084e4:	08008455 	.word	0x08008455

080084e8 <__sfp_lock_acquire>:
 80084e8:	4801      	ldr	r0, [pc, #4]	; (80084f0 <__sfp_lock_acquire+0x8>)
 80084ea:	f000 ba41 	b.w	8008970 <__retarget_lock_acquire_recursive>
 80084ee:	bf00      	nop
 80084f0:	20005991 	.word	0x20005991

080084f4 <__sfp_lock_release>:
 80084f4:	4801      	ldr	r0, [pc, #4]	; (80084fc <__sfp_lock_release+0x8>)
 80084f6:	f000 ba3c 	b.w	8008972 <__retarget_lock_release_recursive>
 80084fa:	bf00      	nop
 80084fc:	20005991 	.word	0x20005991

08008500 <__sinit>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	f7ff fff0 	bl	80084e8 <__sfp_lock_acquire>
 8008508:	6a23      	ldr	r3, [r4, #32]
 800850a:	b11b      	cbz	r3, 8008514 <__sinit+0x14>
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008510:	f7ff bff0 	b.w	80084f4 <__sfp_lock_release>
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <__sinit+0x28>)
 8008516:	6223      	str	r3, [r4, #32]
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <__sinit+0x2c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f5      	bne.n	800850c <__sinit+0xc>
 8008520:	f7ff ffc4 	bl	80084ac <global_stdio_init.part.0>
 8008524:	e7f2      	b.n	800850c <__sinit+0xc>
 8008526:	bf00      	nop
 8008528:	0800846d 	.word	0x0800846d
 800852c:	20005988 	.word	0x20005988

08008530 <_fwalk_sglue>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4607      	mov	r7, r0
 8008536:	4688      	mov	r8, r1
 8008538:	4614      	mov	r4, r2
 800853a:	2600      	movs	r6, #0
 800853c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008540:	f1b9 0901 	subs.w	r9, r9, #1
 8008544:	d505      	bpl.n	8008552 <_fwalk_sglue+0x22>
 8008546:	6824      	ldr	r4, [r4, #0]
 8008548:	2c00      	cmp	r4, #0
 800854a:	d1f7      	bne.n	800853c <_fwalk_sglue+0xc>
 800854c:	4630      	mov	r0, r6
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	89ab      	ldrh	r3, [r5, #12]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d907      	bls.n	8008568 <_fwalk_sglue+0x38>
 8008558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800855c:	3301      	adds	r3, #1
 800855e:	d003      	beq.n	8008568 <_fwalk_sglue+0x38>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	4306      	orrs	r6, r0
 8008568:	3568      	adds	r5, #104	; 0x68
 800856a:	e7e9      	b.n	8008540 <_fwalk_sglue+0x10>

0800856c <_puts_r>:
 800856c:	6a03      	ldr	r3, [r0, #32]
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	6884      	ldr	r4, [r0, #8]
 8008572:	4605      	mov	r5, r0
 8008574:	460e      	mov	r6, r1
 8008576:	b90b      	cbnz	r3, 800857c <_puts_r+0x10>
 8008578:	f7ff ffc2 	bl	8008500 <__sinit>
 800857c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857e:	07db      	lsls	r3, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x22>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	0598      	lsls	r0, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x22>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 f9f1 	bl	8008970 <__retarget_lock_acquire_recursive>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d513      	bpl.n	80085bc <_puts_r+0x50>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	b18b      	cbz	r3, 80085bc <_puts_r+0x50>
 8008598:	3e01      	subs	r6, #1
 800859a:	68a3      	ldr	r3, [r4, #8]
 800859c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085a0:	3b01      	subs	r3, #1
 80085a2:	60a3      	str	r3, [r4, #8]
 80085a4:	b9e9      	cbnz	r1, 80085e2 <_puts_r+0x76>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	da2e      	bge.n	8008608 <_puts_r+0x9c>
 80085aa:	4622      	mov	r2, r4
 80085ac:	210a      	movs	r1, #10
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 f87b 	bl	80086aa <__swbuf_r>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d007      	beq.n	80085c8 <_puts_r+0x5c>
 80085b8:	250a      	movs	r5, #10
 80085ba:	e007      	b.n	80085cc <_puts_r+0x60>
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f8b0 	bl	8008724 <__swsetup_r>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d0e7      	beq.n	8008598 <_puts_r+0x2c>
 80085c8:	f04f 35ff 	mov.w	r5, #4294967295
 80085cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ce:	07da      	lsls	r2, r3, #31
 80085d0:	d405      	bmi.n	80085de <_puts_r+0x72>
 80085d2:	89a3      	ldrh	r3, [r4, #12]
 80085d4:	059b      	lsls	r3, r3, #22
 80085d6:	d402      	bmi.n	80085de <_puts_r+0x72>
 80085d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085da:	f000 f9ca 	bl	8008972 <__retarget_lock_release_recursive>
 80085de:	4628      	mov	r0, r5
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da04      	bge.n	80085f0 <_puts_r+0x84>
 80085e6:	69a2      	ldr	r2, [r4, #24]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	dc06      	bgt.n	80085fa <_puts_r+0x8e>
 80085ec:	290a      	cmp	r1, #10
 80085ee:	d004      	beq.n	80085fa <_puts_r+0x8e>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	6022      	str	r2, [r4, #0]
 80085f6:	7019      	strb	r1, [r3, #0]
 80085f8:	e7cf      	b.n	800859a <_puts_r+0x2e>
 80085fa:	4622      	mov	r2, r4
 80085fc:	4628      	mov	r0, r5
 80085fe:	f000 f854 	bl	80086aa <__swbuf_r>
 8008602:	3001      	adds	r0, #1
 8008604:	d1c9      	bne.n	800859a <_puts_r+0x2e>
 8008606:	e7df      	b.n	80085c8 <_puts_r+0x5c>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	250a      	movs	r5, #10
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	6022      	str	r2, [r4, #0]
 8008610:	701d      	strb	r5, [r3, #0]
 8008612:	e7db      	b.n	80085cc <_puts_r+0x60>

08008614 <puts>:
 8008614:	4b02      	ldr	r3, [pc, #8]	; (8008620 <puts+0xc>)
 8008616:	4601      	mov	r1, r0
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	f7ff bfa7 	b.w	800856c <_puts_r>
 800861e:	bf00      	nop
 8008620:	20000068 	.word	0x20000068

08008624 <__sread>:
 8008624:	b510      	push	{r4, lr}
 8008626:	460c      	mov	r4, r1
 8008628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862c:	f000 f952 	bl	80088d4 <_read_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	bfab      	itete	ge
 8008634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008636:	89a3      	ldrhlt	r3, [r4, #12]
 8008638:	181b      	addge	r3, r3, r0
 800863a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800863e:	bfac      	ite	ge
 8008640:	6563      	strge	r3, [r4, #84]	; 0x54
 8008642:	81a3      	strhlt	r3, [r4, #12]
 8008644:	bd10      	pop	{r4, pc}

08008646 <__swrite>:
 8008646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864a:	461f      	mov	r7, r3
 800864c:	898b      	ldrh	r3, [r1, #12]
 800864e:	05db      	lsls	r3, r3, #23
 8008650:	4605      	mov	r5, r0
 8008652:	460c      	mov	r4, r1
 8008654:	4616      	mov	r6, r2
 8008656:	d505      	bpl.n	8008664 <__swrite+0x1e>
 8008658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865c:	2302      	movs	r3, #2
 800865e:	2200      	movs	r2, #0
 8008660:	f000 f926 	bl	80088b0 <_lseek_r>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	4632      	mov	r2, r6
 8008672:	463b      	mov	r3, r7
 8008674:	4628      	mov	r0, r5
 8008676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800867a:	f000 b93d 	b.w	80088f8 <_write_r>

0800867e <__sseek>:
 800867e:	b510      	push	{r4, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008686:	f000 f913 	bl	80088b0 <_lseek_r>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	bf15      	itete	ne
 8008690:	6560      	strne	r0, [r4, #84]	; 0x54
 8008692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800869a:	81a3      	strheq	r3, [r4, #12]
 800869c:	bf18      	it	ne
 800869e:	81a3      	strhne	r3, [r4, #12]
 80086a0:	bd10      	pop	{r4, pc}

080086a2 <__sclose>:
 80086a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a6:	f000 b89d 	b.w	80087e4 <_close_r>

080086aa <__swbuf_r>:
 80086aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ac:	460e      	mov	r6, r1
 80086ae:	4614      	mov	r4, r2
 80086b0:	4605      	mov	r5, r0
 80086b2:	b118      	cbz	r0, 80086bc <__swbuf_r+0x12>
 80086b4:	6a03      	ldr	r3, [r0, #32]
 80086b6:	b90b      	cbnz	r3, 80086bc <__swbuf_r+0x12>
 80086b8:	f7ff ff22 	bl	8008500 <__sinit>
 80086bc:	69a3      	ldr	r3, [r4, #24]
 80086be:	60a3      	str	r3, [r4, #8]
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	071a      	lsls	r2, r3, #28
 80086c4:	d525      	bpl.n	8008712 <__swbuf_r+0x68>
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	b31b      	cbz	r3, 8008712 <__swbuf_r+0x68>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6922      	ldr	r2, [r4, #16]
 80086ce:	1a98      	subs	r0, r3, r2
 80086d0:	6963      	ldr	r3, [r4, #20]
 80086d2:	b2f6      	uxtb	r6, r6
 80086d4:	4283      	cmp	r3, r0
 80086d6:	4637      	mov	r7, r6
 80086d8:	dc04      	bgt.n	80086e4 <__swbuf_r+0x3a>
 80086da:	4621      	mov	r1, r4
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 fad5 	bl	8008c8c <_fflush_r>
 80086e2:	b9e0      	cbnz	r0, 800871e <__swbuf_r+0x74>
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	60a3      	str	r3, [r4, #8]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	6022      	str	r2, [r4, #0]
 80086f0:	701e      	strb	r6, [r3, #0]
 80086f2:	6962      	ldr	r2, [r4, #20]
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d004      	beq.n	8008704 <__swbuf_r+0x5a>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	07db      	lsls	r3, r3, #31
 80086fe:	d506      	bpl.n	800870e <__swbuf_r+0x64>
 8008700:	2e0a      	cmp	r6, #10
 8008702:	d104      	bne.n	800870e <__swbuf_r+0x64>
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f000 fac0 	bl	8008c8c <_fflush_r>
 800870c:	b938      	cbnz	r0, 800871e <__swbuf_r+0x74>
 800870e:	4638      	mov	r0, r7
 8008710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008712:	4621      	mov	r1, r4
 8008714:	4628      	mov	r0, r5
 8008716:	f000 f805 	bl	8008724 <__swsetup_r>
 800871a:	2800      	cmp	r0, #0
 800871c:	d0d5      	beq.n	80086ca <__swbuf_r+0x20>
 800871e:	f04f 37ff 	mov.w	r7, #4294967295
 8008722:	e7f4      	b.n	800870e <__swbuf_r+0x64>

08008724 <__swsetup_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <__swsetup_r+0xac>)
 8008728:	4605      	mov	r5, r0
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	460c      	mov	r4, r1
 800872e:	b118      	cbz	r0, 8008738 <__swsetup_r+0x14>
 8008730:	6a03      	ldr	r3, [r0, #32]
 8008732:	b90b      	cbnz	r3, 8008738 <__swsetup_r+0x14>
 8008734:	f7ff fee4 	bl	8008500 <__sinit>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800873e:	0718      	lsls	r0, r3, #28
 8008740:	d422      	bmi.n	8008788 <__swsetup_r+0x64>
 8008742:	06d9      	lsls	r1, r3, #27
 8008744:	d407      	bmi.n	8008756 <__swsetup_r+0x32>
 8008746:	2309      	movs	r3, #9
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e034      	b.n	80087c0 <__swsetup_r+0x9c>
 8008756:	0758      	lsls	r0, r3, #29
 8008758:	d512      	bpl.n	8008780 <__swsetup_r+0x5c>
 800875a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800875c:	b141      	cbz	r1, 8008770 <__swsetup_r+0x4c>
 800875e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008762:	4299      	cmp	r1, r3
 8008764:	d002      	beq.n	800876c <__swsetup_r+0x48>
 8008766:	4628      	mov	r0, r5
 8008768:	f000 f912 	bl	8008990 <_free_r>
 800876c:	2300      	movs	r3, #0
 800876e:	6363      	str	r3, [r4, #52]	; 0x34
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	2300      	movs	r3, #0
 800877a:	6063      	str	r3, [r4, #4]
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f043 0308 	orr.w	r3, r3, #8
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	b94b      	cbnz	r3, 80087a0 <__swsetup_r+0x7c>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008796:	d003      	beq.n	80087a0 <__swsetup_r+0x7c>
 8008798:	4621      	mov	r1, r4
 800879a:	4628      	mov	r0, r5
 800879c:	f000 fac4 	bl	8008d28 <__smakebuf_r>
 80087a0:	89a0      	ldrh	r0, [r4, #12]
 80087a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a6:	f010 0301 	ands.w	r3, r0, #1
 80087aa:	d00a      	beq.n	80087c2 <__swsetup_r+0x9e>
 80087ac:	2300      	movs	r3, #0
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	6963      	ldr	r3, [r4, #20]
 80087b2:	425b      	negs	r3, r3
 80087b4:	61a3      	str	r3, [r4, #24]
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	b943      	cbnz	r3, 80087cc <__swsetup_r+0xa8>
 80087ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087be:	d1c4      	bne.n	800874a <__swsetup_r+0x26>
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	0781      	lsls	r1, r0, #30
 80087c4:	bf58      	it	pl
 80087c6:	6963      	ldrpl	r3, [r4, #20]
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	e7f4      	b.n	80087b6 <__swsetup_r+0x92>
 80087cc:	2000      	movs	r0, #0
 80087ce:	e7f7      	b.n	80087c0 <__swsetup_r+0x9c>
 80087d0:	20000068 	.word	0x20000068

080087d4 <memset>:
 80087d4:	4402      	add	r2, r0
 80087d6:	4603      	mov	r3, r0
 80087d8:	4293      	cmp	r3, r2
 80087da:	d100      	bne.n	80087de <memset+0xa>
 80087dc:	4770      	bx	lr
 80087de:	f803 1b01 	strb.w	r1, [r3], #1
 80087e2:	e7f9      	b.n	80087d8 <memset+0x4>

080087e4 <_close_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_close_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f8 fbf1 	bl	8000fd6 <_close>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_close_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_close_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	2000598c 	.word	0x2000598c

08008804 <_reclaim_reent>:
 8008804:	4b29      	ldr	r3, [pc, #164]	; (80088ac <_reclaim_reent+0xa8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4283      	cmp	r3, r0
 800880a:	b570      	push	{r4, r5, r6, lr}
 800880c:	4604      	mov	r4, r0
 800880e:	d04b      	beq.n	80088a8 <_reclaim_reent+0xa4>
 8008810:	69c3      	ldr	r3, [r0, #28]
 8008812:	b143      	cbz	r3, 8008826 <_reclaim_reent+0x22>
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d144      	bne.n	80088a4 <_reclaim_reent+0xa0>
 800881a:	69e3      	ldr	r3, [r4, #28]
 800881c:	6819      	ldr	r1, [r3, #0]
 800881e:	b111      	cbz	r1, 8008826 <_reclaim_reent+0x22>
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f8b5 	bl	8008990 <_free_r>
 8008826:	6961      	ldr	r1, [r4, #20]
 8008828:	b111      	cbz	r1, 8008830 <_reclaim_reent+0x2c>
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f8b0 	bl	8008990 <_free_r>
 8008830:	69e1      	ldr	r1, [r4, #28]
 8008832:	b111      	cbz	r1, 800883a <_reclaim_reent+0x36>
 8008834:	4620      	mov	r0, r4
 8008836:	f000 f8ab 	bl	8008990 <_free_r>
 800883a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800883c:	b111      	cbz	r1, 8008844 <_reclaim_reent+0x40>
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f8a6 	bl	8008990 <_free_r>
 8008844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008846:	b111      	cbz	r1, 800884e <_reclaim_reent+0x4a>
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f8a1 	bl	8008990 <_free_r>
 800884e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008850:	b111      	cbz	r1, 8008858 <_reclaim_reent+0x54>
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f89c 	bl	8008990 <_free_r>
 8008858:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800885a:	b111      	cbz	r1, 8008862 <_reclaim_reent+0x5e>
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f897 	bl	8008990 <_free_r>
 8008862:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008864:	b111      	cbz	r1, 800886c <_reclaim_reent+0x68>
 8008866:	4620      	mov	r0, r4
 8008868:	f000 f892 	bl	8008990 <_free_r>
 800886c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800886e:	b111      	cbz	r1, 8008876 <_reclaim_reent+0x72>
 8008870:	4620      	mov	r0, r4
 8008872:	f000 f88d 	bl	8008990 <_free_r>
 8008876:	6a23      	ldr	r3, [r4, #32]
 8008878:	b1b3      	cbz	r3, 80088a8 <_reclaim_reent+0xa4>
 800887a:	4620      	mov	r0, r4
 800887c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008880:	4718      	bx	r3
 8008882:	5949      	ldr	r1, [r1, r5]
 8008884:	b941      	cbnz	r1, 8008898 <_reclaim_reent+0x94>
 8008886:	3504      	adds	r5, #4
 8008888:	69e3      	ldr	r3, [r4, #28]
 800888a:	2d80      	cmp	r5, #128	; 0x80
 800888c:	68d9      	ldr	r1, [r3, #12]
 800888e:	d1f8      	bne.n	8008882 <_reclaim_reent+0x7e>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f87d 	bl	8008990 <_free_r>
 8008896:	e7c0      	b.n	800881a <_reclaim_reent+0x16>
 8008898:	680e      	ldr	r6, [r1, #0]
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f878 	bl	8008990 <_free_r>
 80088a0:	4631      	mov	r1, r6
 80088a2:	e7ef      	b.n	8008884 <_reclaim_reent+0x80>
 80088a4:	2500      	movs	r5, #0
 80088a6:	e7ef      	b.n	8008888 <_reclaim_reent+0x84>
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	bf00      	nop
 80088ac:	20000068 	.word	0x20000068

080088b0 <_lseek_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_lseek_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f8 fbb0 	bl	8001024 <_lseek>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_lseek_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_lseek_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	2000598c 	.word	0x2000598c

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f8 fb3e 	bl	8000f64 <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	2000598c 	.word	0x2000598c

080088f8 <_write_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d07      	ldr	r5, [pc, #28]	; (8008918 <_write_r+0x20>)
 80088fc:	4604      	mov	r4, r0
 80088fe:	4608      	mov	r0, r1
 8008900:	4611      	mov	r1, r2
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	f7f8 fb49 	bl	8000f9e <_write>
 800890c:	1c43      	adds	r3, r0, #1
 800890e:	d102      	bne.n	8008916 <_write_r+0x1e>
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	b103      	cbz	r3, 8008916 <_write_r+0x1e>
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	2000598c 	.word	0x2000598c

0800891c <__errno>:
 800891c:	4b01      	ldr	r3, [pc, #4]	; (8008924 <__errno+0x8>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000068 	.word	0x20000068

08008928 <__libc_init_array>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4d0d      	ldr	r5, [pc, #52]	; (8008960 <__libc_init_array+0x38>)
 800892c:	4c0d      	ldr	r4, [pc, #52]	; (8008964 <__libc_init_array+0x3c>)
 800892e:	1b64      	subs	r4, r4, r5
 8008930:	10a4      	asrs	r4, r4, #2
 8008932:	2600      	movs	r6, #0
 8008934:	42a6      	cmp	r6, r4
 8008936:	d109      	bne.n	800894c <__libc_init_array+0x24>
 8008938:	4d0b      	ldr	r5, [pc, #44]	; (8008968 <__libc_init_array+0x40>)
 800893a:	4c0c      	ldr	r4, [pc, #48]	; (800896c <__libc_init_array+0x44>)
 800893c:	f000 fa62 	bl	8008e04 <_init>
 8008940:	1b64      	subs	r4, r4, r5
 8008942:	10a4      	asrs	r4, r4, #2
 8008944:	2600      	movs	r6, #0
 8008946:	42a6      	cmp	r6, r4
 8008948:	d105      	bne.n	8008956 <__libc_init_array+0x2e>
 800894a:	bd70      	pop	{r4, r5, r6, pc}
 800894c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008950:	4798      	blx	r3
 8008952:	3601      	adds	r6, #1
 8008954:	e7ee      	b.n	8008934 <__libc_init_array+0xc>
 8008956:	f855 3b04 	ldr.w	r3, [r5], #4
 800895a:	4798      	blx	r3
 800895c:	3601      	adds	r6, #1
 800895e:	e7f2      	b.n	8008946 <__libc_init_array+0x1e>
 8008960:	08008ea0 	.word	0x08008ea0
 8008964:	08008ea0 	.word	0x08008ea0
 8008968:	08008ea0 	.word	0x08008ea0
 800896c:	08008ea4 	.word	0x08008ea4

08008970 <__retarget_lock_acquire_recursive>:
 8008970:	4770      	bx	lr

08008972 <__retarget_lock_release_recursive>:
 8008972:	4770      	bx	lr

08008974 <memcpy>:
 8008974:	440a      	add	r2, r1
 8008976:	4291      	cmp	r1, r2
 8008978:	f100 33ff 	add.w	r3, r0, #4294967295
 800897c:	d100      	bne.n	8008980 <memcpy+0xc>
 800897e:	4770      	bx	lr
 8008980:	b510      	push	{r4, lr}
 8008982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898a:	4291      	cmp	r1, r2
 800898c:	d1f9      	bne.n	8008982 <memcpy+0xe>
 800898e:	bd10      	pop	{r4, pc}

08008990 <_free_r>:
 8008990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008992:	2900      	cmp	r1, #0
 8008994:	d044      	beq.n	8008a20 <_free_r+0x90>
 8008996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899a:	9001      	str	r0, [sp, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f1a1 0404 	sub.w	r4, r1, #4
 80089a2:	bfb8      	it	lt
 80089a4:	18e4      	addlt	r4, r4, r3
 80089a6:	f000 f8df 	bl	8008b68 <__malloc_lock>
 80089aa:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <_free_r+0x94>)
 80089ac:	9801      	ldr	r0, [sp, #4]
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	b933      	cbnz	r3, 80089c0 <_free_r+0x30>
 80089b2:	6063      	str	r3, [r4, #4]
 80089b4:	6014      	str	r4, [r2, #0]
 80089b6:	b003      	add	sp, #12
 80089b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089bc:	f000 b8da 	b.w	8008b74 <__malloc_unlock>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d908      	bls.n	80089d6 <_free_r+0x46>
 80089c4:	6825      	ldr	r5, [r4, #0]
 80089c6:	1961      	adds	r1, r4, r5
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf01      	itttt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	1949      	addeq	r1, r1, r5
 80089d2:	6021      	streq	r1, [r4, #0]
 80089d4:	e7ed      	b.n	80089b2 <_free_r+0x22>
 80089d6:	461a      	mov	r2, r3
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b10b      	cbz	r3, 80089e0 <_free_r+0x50>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d9fa      	bls.n	80089d6 <_free_r+0x46>
 80089e0:	6811      	ldr	r1, [r2, #0]
 80089e2:	1855      	adds	r5, r2, r1
 80089e4:	42a5      	cmp	r5, r4
 80089e6:	d10b      	bne.n	8008a00 <_free_r+0x70>
 80089e8:	6824      	ldr	r4, [r4, #0]
 80089ea:	4421      	add	r1, r4
 80089ec:	1854      	adds	r4, r2, r1
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	6011      	str	r1, [r2, #0]
 80089f2:	d1e0      	bne.n	80089b6 <_free_r+0x26>
 80089f4:	681c      	ldr	r4, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	6053      	str	r3, [r2, #4]
 80089fa:	440c      	add	r4, r1
 80089fc:	6014      	str	r4, [r2, #0]
 80089fe:	e7da      	b.n	80089b6 <_free_r+0x26>
 8008a00:	d902      	bls.n	8008a08 <_free_r+0x78>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	e7d6      	b.n	80089b6 <_free_r+0x26>
 8008a08:	6825      	ldr	r5, [r4, #0]
 8008a0a:	1961      	adds	r1, r4, r5
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf04      	itt	eq
 8008a10:	6819      	ldreq	r1, [r3, #0]
 8008a12:	685b      	ldreq	r3, [r3, #4]
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	bf04      	itt	eq
 8008a18:	1949      	addeq	r1, r1, r5
 8008a1a:	6021      	streq	r1, [r4, #0]
 8008a1c:	6054      	str	r4, [r2, #4]
 8008a1e:	e7ca      	b.n	80089b6 <_free_r+0x26>
 8008a20:	b003      	add	sp, #12
 8008a22:	bd30      	pop	{r4, r5, pc}
 8008a24:	20005994 	.word	0x20005994

08008a28 <sbrk_aligned>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4e0e      	ldr	r6, [pc, #56]	; (8008a64 <sbrk_aligned+0x3c>)
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	6831      	ldr	r1, [r6, #0]
 8008a30:	4605      	mov	r5, r0
 8008a32:	b911      	cbnz	r1, 8008a3a <sbrk_aligned+0x12>
 8008a34:	f000 f9d6 	bl	8008de4 <_sbrk_r>
 8008a38:	6030      	str	r0, [r6, #0]
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 f9d1 	bl	8008de4 <_sbrk_r>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	d00a      	beq.n	8008a5c <sbrk_aligned+0x34>
 8008a46:	1cc4      	adds	r4, r0, #3
 8008a48:	f024 0403 	bic.w	r4, r4, #3
 8008a4c:	42a0      	cmp	r0, r4
 8008a4e:	d007      	beq.n	8008a60 <sbrk_aligned+0x38>
 8008a50:	1a21      	subs	r1, r4, r0
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 f9c6 	bl	8008de4 <_sbrk_r>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d101      	bne.n	8008a60 <sbrk_aligned+0x38>
 8008a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a60:	4620      	mov	r0, r4
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	20005998 	.word	0x20005998

08008a68 <_malloc_r>:
 8008a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a6c:	1ccd      	adds	r5, r1, #3
 8008a6e:	f025 0503 	bic.w	r5, r5, #3
 8008a72:	3508      	adds	r5, #8
 8008a74:	2d0c      	cmp	r5, #12
 8008a76:	bf38      	it	cc
 8008a78:	250c      	movcc	r5, #12
 8008a7a:	2d00      	cmp	r5, #0
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	db01      	blt.n	8008a84 <_malloc_r+0x1c>
 8008a80:	42a9      	cmp	r1, r5
 8008a82:	d905      	bls.n	8008a90 <_malloc_r+0x28>
 8008a84:	230c      	movs	r3, #12
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	2600      	movs	r6, #0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b64 <_malloc_r+0xfc>
 8008a94:	f000 f868 	bl	8008b68 <__malloc_lock>
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	461c      	mov	r4, r3
 8008a9e:	bb5c      	cbnz	r4, 8008af8 <_malloc_r+0x90>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7ff ffc0 	bl	8008a28 <sbrk_aligned>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	4604      	mov	r4, r0
 8008aac:	d155      	bne.n	8008b5a <_malloc_r+0xf2>
 8008aae:	f8d8 4000 	ldr.w	r4, [r8]
 8008ab2:	4626      	mov	r6, r4
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	d145      	bne.n	8008b44 <_malloc_r+0xdc>
 8008ab8:	2c00      	cmp	r4, #0
 8008aba:	d048      	beq.n	8008b4e <_malloc_r+0xe6>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	eb04 0903 	add.w	r9, r4, r3
 8008ac6:	f000 f98d 	bl	8008de4 <_sbrk_r>
 8008aca:	4581      	cmp	r9, r0
 8008acc:	d13f      	bne.n	8008b4e <_malloc_r+0xe6>
 8008ace:	6821      	ldr	r1, [r4, #0]
 8008ad0:	1a6d      	subs	r5, r5, r1
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ffa7 	bl	8008a28 <sbrk_aligned>
 8008ada:	3001      	adds	r0, #1
 8008adc:	d037      	beq.n	8008b4e <_malloc_r+0xe6>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	442b      	add	r3, r5
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d038      	beq.n	8008b5e <_malloc_r+0xf6>
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	42a2      	cmp	r2, r4
 8008af0:	d12b      	bne.n	8008b4a <_malloc_r+0xe2>
 8008af2:	2200      	movs	r2, #0
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	e00f      	b.n	8008b18 <_malloc_r+0xb0>
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	1b52      	subs	r2, r2, r5
 8008afc:	d41f      	bmi.n	8008b3e <_malloc_r+0xd6>
 8008afe:	2a0b      	cmp	r2, #11
 8008b00:	d917      	bls.n	8008b32 <_malloc_r+0xca>
 8008b02:	1961      	adds	r1, r4, r5
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	6025      	str	r5, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	6059      	strne	r1, [r3, #4]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	bf08      	it	eq
 8008b10:	f8c8 1000 	streq.w	r1, [r8]
 8008b14:	5162      	str	r2, [r4, r5]
 8008b16:	604b      	str	r3, [r1, #4]
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f104 060b 	add.w	r6, r4, #11
 8008b1e:	f000 f829 	bl	8008b74 <__malloc_unlock>
 8008b22:	f026 0607 	bic.w	r6, r6, #7
 8008b26:	1d23      	adds	r3, r4, #4
 8008b28:	1af2      	subs	r2, r6, r3
 8008b2a:	d0ae      	beq.n	8008a8a <_malloc_r+0x22>
 8008b2c:	1b9b      	subs	r3, r3, r6
 8008b2e:	50a3      	str	r3, [r4, r2]
 8008b30:	e7ab      	b.n	8008a8a <_malloc_r+0x22>
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	6862      	ldr	r2, [r4, #4]
 8008b36:	d1dd      	bne.n	8008af4 <_malloc_r+0x8c>
 8008b38:	f8c8 2000 	str.w	r2, [r8]
 8008b3c:	e7ec      	b.n	8008b18 <_malloc_r+0xb0>
 8008b3e:	4623      	mov	r3, r4
 8008b40:	6864      	ldr	r4, [r4, #4]
 8008b42:	e7ac      	b.n	8008a9e <_malloc_r+0x36>
 8008b44:	4634      	mov	r4, r6
 8008b46:	6876      	ldr	r6, [r6, #4]
 8008b48:	e7b4      	b.n	8008ab4 <_malloc_r+0x4c>
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	e7cc      	b.n	8008ae8 <_malloc_r+0x80>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4638      	mov	r0, r7
 8008b54:	f000 f80e 	bl	8008b74 <__malloc_unlock>
 8008b58:	e797      	b.n	8008a8a <_malloc_r+0x22>
 8008b5a:	6025      	str	r5, [r4, #0]
 8008b5c:	e7dc      	b.n	8008b18 <_malloc_r+0xb0>
 8008b5e:	605b      	str	r3, [r3, #4]
 8008b60:	deff      	udf	#255	; 0xff
 8008b62:	bf00      	nop
 8008b64:	20005994 	.word	0x20005994

08008b68 <__malloc_lock>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__malloc_lock+0x8>)
 8008b6a:	f7ff bf01 	b.w	8008970 <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	20005990 	.word	0x20005990

08008b74 <__malloc_unlock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__malloc_unlock+0x8>)
 8008b76:	f7ff befc 	b.w	8008972 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20005990 	.word	0x20005990

08008b80 <__sflush_r>:
 8008b80:	898a      	ldrh	r2, [r1, #12]
 8008b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	4605      	mov	r5, r0
 8008b88:	0710      	lsls	r0, r2, #28
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	d458      	bmi.n	8008c40 <__sflush_r+0xc0>
 8008b8e:	684b      	ldr	r3, [r1, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc05      	bgt.n	8008ba0 <__sflush_r+0x20>
 8008b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	dc02      	bgt.n	8008ba0 <__sflush_r+0x20>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	d0f9      	beq.n	8008b9a <__sflush_r+0x1a>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bac:	682f      	ldr	r7, [r5, #0]
 8008bae:	6a21      	ldr	r1, [r4, #32]
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	d032      	beq.n	8008c1a <__sflush_r+0x9a>
 8008bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	075a      	lsls	r2, r3, #29
 8008bba:	d505      	bpl.n	8008bc8 <__sflush_r+0x48>
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	1ac0      	subs	r0, r0, r3
 8008bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bc2:	b10b      	cbz	r3, 8008bc8 <__sflush_r+0x48>
 8008bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc6:	1ac0      	subs	r0, r0, r3
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b0      	blx	r6
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	d106      	bne.n	8008be8 <__sflush_r+0x68>
 8008bda:	6829      	ldr	r1, [r5, #0]
 8008bdc:	291d      	cmp	r1, #29
 8008bde:	d82b      	bhi.n	8008c38 <__sflush_r+0xb8>
 8008be0:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <__sflush_r+0x108>)
 8008be2:	410a      	asrs	r2, r1
 8008be4:	07d6      	lsls	r6, r2, #31
 8008be6:	d427      	bmi.n	8008c38 <__sflush_r+0xb8>
 8008be8:	2200      	movs	r2, #0
 8008bea:	6062      	str	r2, [r4, #4]
 8008bec:	04d9      	lsls	r1, r3, #19
 8008bee:	6922      	ldr	r2, [r4, #16]
 8008bf0:	6022      	str	r2, [r4, #0]
 8008bf2:	d504      	bpl.n	8008bfe <__sflush_r+0x7e>
 8008bf4:	1c42      	adds	r2, r0, #1
 8008bf6:	d101      	bne.n	8008bfc <__sflush_r+0x7c>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b903      	cbnz	r3, 8008bfe <__sflush_r+0x7e>
 8008bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c00:	602f      	str	r7, [r5, #0]
 8008c02:	2900      	cmp	r1, #0
 8008c04:	d0c9      	beq.n	8008b9a <__sflush_r+0x1a>
 8008c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	d002      	beq.n	8008c14 <__sflush_r+0x94>
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7ff febe 	bl	8008990 <_free_r>
 8008c14:	2000      	movs	r0, #0
 8008c16:	6360      	str	r0, [r4, #52]	; 0x34
 8008c18:	e7c0      	b.n	8008b9c <__sflush_r+0x1c>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	47b0      	blx	r6
 8008c20:	1c41      	adds	r1, r0, #1
 8008c22:	d1c8      	bne.n	8008bb6 <__sflush_r+0x36>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0c5      	beq.n	8008bb6 <__sflush_r+0x36>
 8008c2a:	2b1d      	cmp	r3, #29
 8008c2c:	d001      	beq.n	8008c32 <__sflush_r+0xb2>
 8008c2e:	2b16      	cmp	r3, #22
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0xb6>
 8008c32:	602f      	str	r7, [r5, #0]
 8008c34:	e7b1      	b.n	8008b9a <__sflush_r+0x1a>
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	e7ad      	b.n	8008b9c <__sflush_r+0x1c>
 8008c40:	690f      	ldr	r7, [r1, #16]
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	d0a9      	beq.n	8008b9a <__sflush_r+0x1a>
 8008c46:	0793      	lsls	r3, r2, #30
 8008c48:	680e      	ldr	r6, [r1, #0]
 8008c4a:	bf08      	it	eq
 8008c4c:	694b      	ldreq	r3, [r1, #20]
 8008c4e:	600f      	str	r7, [r1, #0]
 8008c50:	bf18      	it	ne
 8008c52:	2300      	movne	r3, #0
 8008c54:	eba6 0807 	sub.w	r8, r6, r7
 8008c58:	608b      	str	r3, [r1, #8]
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	dd9c      	ble.n	8008b9a <__sflush_r+0x1a>
 8008c60:	6a21      	ldr	r1, [r4, #32]
 8008c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c64:	4643      	mov	r3, r8
 8008c66:	463a      	mov	r2, r7
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b0      	blx	r6
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	dc06      	bgt.n	8008c7e <__sflush_r+0xfe>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c76:	81a3      	strh	r3, [r4, #12]
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	e78e      	b.n	8008b9c <__sflush_r+0x1c>
 8008c7e:	4407      	add	r7, r0
 8008c80:	eba8 0800 	sub.w	r8, r8, r0
 8008c84:	e7e9      	b.n	8008c5a <__sflush_r+0xda>
 8008c86:	bf00      	nop
 8008c88:	dfbffffe 	.word	0xdfbffffe

08008c8c <_fflush_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	690b      	ldr	r3, [r1, #16]
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b913      	cbnz	r3, 8008c9c <_fflush_r+0x10>
 8008c96:	2500      	movs	r5, #0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	b118      	cbz	r0, 8008ca6 <_fflush_r+0x1a>
 8008c9e:	6a03      	ldr	r3, [r0, #32]
 8008ca0:	b90b      	cbnz	r3, 8008ca6 <_fflush_r+0x1a>
 8008ca2:	f7ff fc2d 	bl	8008500 <__sinit>
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0f3      	beq.n	8008c96 <_fflush_r+0xa>
 8008cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cb0:	07d0      	lsls	r0, r2, #31
 8008cb2:	d404      	bmi.n	8008cbe <_fflush_r+0x32>
 8008cb4:	0599      	lsls	r1, r3, #22
 8008cb6:	d402      	bmi.n	8008cbe <_fflush_r+0x32>
 8008cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cba:	f7ff fe59 	bl	8008970 <__retarget_lock_acquire_recursive>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7ff ff5d 	bl	8008b80 <__sflush_r>
 8008cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc8:	07da      	lsls	r2, r3, #31
 8008cca:	4605      	mov	r5, r0
 8008ccc:	d4e4      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	059b      	lsls	r3, r3, #22
 8008cd2:	d4e1      	bmi.n	8008c98 <_fflush_r+0xc>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd6:	f7ff fe4c 	bl	8008972 <__retarget_lock_release_recursive>
 8008cda:	e7dd      	b.n	8008c98 <_fflush_r+0xc>

08008cdc <__swhatbuf_r>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	b096      	sub	sp, #88	; 0x58
 8008ce8:	4615      	mov	r5, r2
 8008cea:	461e      	mov	r6, r3
 8008cec:	da0d      	bge.n	8008d0a <__swhatbuf_r+0x2e>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cf4:	f04f 0100 	mov.w	r1, #0
 8008cf8:	bf0c      	ite	eq
 8008cfa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cfe:	2340      	movne	r3, #64	; 0x40
 8008d00:	2000      	movs	r0, #0
 8008d02:	6031      	str	r1, [r6, #0]
 8008d04:	602b      	str	r3, [r5, #0]
 8008d06:	b016      	add	sp, #88	; 0x58
 8008d08:	bd70      	pop	{r4, r5, r6, pc}
 8008d0a:	466a      	mov	r2, sp
 8008d0c:	f000 f848 	bl	8008da0 <_fstat_r>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dbec      	blt.n	8008cee <__swhatbuf_r+0x12>
 8008d14:	9901      	ldr	r1, [sp, #4]
 8008d16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d1e:	4259      	negs	r1, r3
 8008d20:	4159      	adcs	r1, r3
 8008d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d26:	e7eb      	b.n	8008d00 <__swhatbuf_r+0x24>

08008d28 <__smakebuf_r>:
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d2c:	079d      	lsls	r5, r3, #30
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	d507      	bpl.n	8008d44 <__smakebuf_r+0x1c>
 8008d34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	6163      	str	r3, [r4, #20]
 8008d40:	b002      	add	sp, #8
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	ab01      	add	r3, sp, #4
 8008d46:	466a      	mov	r2, sp
 8008d48:	f7ff ffc8 	bl	8008cdc <__swhatbuf_r>
 8008d4c:	9900      	ldr	r1, [sp, #0]
 8008d4e:	4605      	mov	r5, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff fe89 	bl	8008a68 <_malloc_r>
 8008d56:	b948      	cbnz	r0, 8008d6c <__smakebuf_r+0x44>
 8008d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5c:	059a      	lsls	r2, r3, #22
 8008d5e:	d4ef      	bmi.n	8008d40 <__smakebuf_r+0x18>
 8008d60:	f023 0303 	bic.w	r3, r3, #3
 8008d64:	f043 0302 	orr.w	r3, r3, #2
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e7e3      	b.n	8008d34 <__smakebuf_r+0xc>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	6020      	str	r0, [r4, #0]
 8008d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d74:	81a3      	strh	r3, [r4, #12]
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	6163      	str	r3, [r4, #20]
 8008d7a:	9b01      	ldr	r3, [sp, #4]
 8008d7c:	6120      	str	r0, [r4, #16]
 8008d7e:	b15b      	cbz	r3, 8008d98 <__smakebuf_r+0x70>
 8008d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d84:	4630      	mov	r0, r6
 8008d86:	f000 f81d 	bl	8008dc4 <_isatty_r>
 8008d8a:	b128      	cbz	r0, 8008d98 <__smakebuf_r+0x70>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	f043 0301 	orr.w	r3, r3, #1
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	431d      	orrs	r5, r3
 8008d9c:	81a5      	strh	r5, [r4, #12]
 8008d9e:	e7cf      	b.n	8008d40 <__smakebuf_r+0x18>

08008da0 <_fstat_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	; (8008dc0 <_fstat_r+0x20>)
 8008da4:	2300      	movs	r3, #0
 8008da6:	4604      	mov	r4, r0
 8008da8:	4608      	mov	r0, r1
 8008daa:	4611      	mov	r1, r2
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	f7f8 f91e 	bl	8000fee <_fstat>
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	d102      	bne.n	8008dbc <_fstat_r+0x1c>
 8008db6:	682b      	ldr	r3, [r5, #0]
 8008db8:	b103      	cbz	r3, 8008dbc <_fstat_r+0x1c>
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
 8008dbe:	bf00      	nop
 8008dc0:	2000598c 	.word	0x2000598c

08008dc4 <_isatty_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_isatty_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f8 f91d 	bl	800100e <_isatty>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_isatty_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_isatty_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	2000598c 	.word	0x2000598c

08008de4 <_sbrk_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_sbrk_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f8 f926 	bl	8001040 <_sbrk>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_sbrk_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_sbrk_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	2000598c 	.word	0x2000598c

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
