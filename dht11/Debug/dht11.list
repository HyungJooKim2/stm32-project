
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cec  08004cec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000940  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009a8  200009a8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000127cd  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000267e  00000000  00000000  000328a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001068  00000000  00000000  00034f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cb7  00000000  00000000  00035f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265b0  00000000  00000000  00036c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000130c1  00000000  00000000  0005d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4159  00000000  00000000  000702b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d58  00000000  00000000  00154414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0015916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b94 	.word	0x08004b94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08004b94 	.word	0x08004b94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <app>:
extern UART_HandleTypeDef huart3;

extern void htc11_proc(void);

void app(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
//	static uint16_t prev, curr;

	htc11_init();
 8000590:	f000 f8a4 	bl	80006dc <htc11_init>

	while (1) {
		htc11_proc();
 8000594:	f000 f8b0 	bl	80006f8 <htc11_proc>
 8000598:	e7fc      	b.n	8000594 <app+0x8>
	...

0800059c <__io_putchar>:
//		HAL_Delay(1000);
	}
}

int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <__io_putchar+0x20>)
 80005ae:	f002 fcfc 	bl	8002faa <HAL_UART_Transmit>
  return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200002fc 	.word	0x200002fc

080005c0 <get_time>:

extern TIM_HandleTypeDef htim14;
#define D_TIM_HANDLE	&htim14

static uint16_t get_time(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(D_TIM_HANDLE);
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <get_time+0x18>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ca:	b29b      	uxth	r3, r3
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200002b4 	.word	0x200002b4

080005dc <pin_high>:

// PC8 핀 출력을 1로
// 하위 16비트가 핀을 1로 설정하는 비트임
// 예로 PA3 핀을 1로 설정하려면 0x00000004; 를 BSRR 레지스터에 입력하면 됨.
static void pin_high(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	GPIOC->BSRR = 0x0000100;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <pin_high+0x18>)
 80005e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e6:	619a      	str	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40020800 	.word	0x40020800

080005f8 <pin_low>:

// PC8 핀 출력을 0으로
// 상위 16비트가 핀을 0으로 설정하는 비트임
// 예는 pin_high와 같은 개념임
static void pin_low(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	GPIOC->BSRR = 0x01000000;
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <pin_low+0x18>)
 80005fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000602:	619a      	str	r2, [r3, #24]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40020800 	.word	0x40020800

08000614 <pin_get>:

// PC8 핀 상태를 읽음
// 하위 16비트 해당 핀은 비트와 동일
static uint8_t pin_get(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	return (uint8_t)((GPIOC->IDR & 0x00100) >> 8);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <pin_get+0x1c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40020800 	.word	0x40020800

08000634 <pin_out_wait>:


// us단위 대기..
// 16비트이므로 최대 (65535 - 1)us 만큼 가능
static void pin_out_wait(uint16_t time)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t start, curr;

	start = get_time();
 800063e:	f7ff ffbf 	bl	80005c0 <get_time>
 8000642:	4603      	mov	r3, r0
 8000644:	81fb      	strh	r3, [r7, #14]
	while (1) {
		curr = get_time();
 8000646:	f7ff ffbb 	bl	80005c0 <get_time>
 800064a:	4603      	mov	r3, r0
 800064c:	81bb      	strh	r3, [r7, #12]
		if ((uint16_t)(curr - start) > time) break;
 800064e:	89bb      	ldrh	r3, [r7, #12]
 8000650:	b29a      	uxth	r2, r3
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	b29b      	uxth	r3, r3
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	88fa      	ldrh	r2, [r7, #6]
 800065c:	429a      	cmp	r2, r3
 800065e:	d300      	bcc.n	8000662 <pin_out_wait+0x2e>
		curr = get_time();
 8000660:	e7f1      	b.n	8000646 <pin_out_wait+0x12>
		if ((uint16_t)(curr - start) > time) break;
 8000662:	bf00      	nop
	}
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <pin_get_change>:
// rising edge면 low level 유지 시간을 time으로 return
// falling edge면 high level 유지 시간을 time으로 return
// DHT11의 각 시그널의 길이는 80us 넘지 않음
// 150us 이상 넘으면 센서 응답의 끝으로 볼 수 있음
static int8_t pin_get_change(uint16_t *time)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	volatile uint8_t pin_prev;
	volatile uint16_t start;

	pin_prev= pin_get();     	// 현재 핀 상태 저장
 8000674:	f7ff ffce 	bl	8000614 <pin_get>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
	start = get_time();				// 시작하는 시간 저장
 800067c:	f7ff ffa0 	bl	80005c0 <get_time>
 8000680:	4603      	mov	r3, r0
 8000682:	81bb      	strh	r3, [r7, #12]

	while (1) {
		if (pin_prev != pin_get()) { 		// 핀 상태가 변하는가?
 8000684:	f7ff ffc6 	bl	8000614 <pin_get>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	429a      	cmp	r2, r3
 8000692:	d014      	beq.n	80006be <pin_get_change+0x52>
			*time = get_time() - start;		// 변했을 때 핀의 상태가 얼마나 	유지된 시간
 8000694:	f7ff ff94 	bl	80005c0 <get_time>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	89bb      	ldrh	r3, [r7, #12]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	801a      	strh	r2, [r3, #0]
			break;
 80006a8:	bf00      	nop
		} else {
			if (get_time() - start > 150) return -1;		// 그렇지 않고 150us이상 변화가 없으면 time-out
		}
	}

	return !pin_get();      // 핀 상태 return
 80006aa:	f7ff ffb3 	bl	8000614 <pin_get>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf0c      	ite	eq
 80006b4:	2301      	moveq	r3, #1
 80006b6:	2300      	movne	r3, #0
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	e00a      	b.n	80006d4 <pin_get_change+0x68>
			if (get_time() - start > 150) return -1;		// 그렇지 않고 150us이상 변화가 없으면 time-out
 80006be:	f7ff ff7f 	bl	80005c0 <get_time>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b96      	cmp	r3, #150	; 0x96
 80006ce:	ddd9      	ble.n	8000684 <pin_get_change+0x18>
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <htc11_init>:
	int8_t sts;
	uint16_t time;
} PIN_T;

void htc11_init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	printf("Push User Button to get a data from DHT11..\r\n");
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <htc11_init+0x14>)
 80006e2:	f003 fbef 	bl	8003ec4 <puts>
	HAL_TIM_Base_Start(D_TIM_HANDLE);
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <htc11_init+0x18>)
 80006e8:	f002 fb0a 	bl	8002d00 <HAL_TIM_Base_Start>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	08004bac 	.word	0x08004bac
 80006f4:	200002b4 	.word	0x200002b4

080006f8 <htc11_proc>:

void htc11_proc(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b0e9      	sub	sp, #420	; 0x1a4
 80006fc:	af00      	add	r7, sp, #0
	int8_t err;
	uint8_t checksum;
	{
		// 1초이상 기다려서 읽어야 한다고 함...
		// 데이터 쉬트에 그렇게 써져 있음.
		if (getkey() == 1) {
 80006fe:	f000 f965 	bl	80009cc <getkey>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	f040 8145 	bne.w	8000994 <htc11_proc+0x29c>

			printf("HDT11 Sensing Start!\n");
 800070a:	48a5      	ldr	r0, [pc, #660]	; (80009a0 <htc11_proc+0x2a8>)
 800070c:	f003 fbda 	bl	8003ec4 <puts>
			memset(data, 0, 5);
 8000710:	463b      	mov	r3, r7
 8000712:	2205      	movs	r2, #5
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f003 fcb4 	bl	8004084 <memset>
			err = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b

			//set_time(0);
			//default : output, open_drain, high signal
			//pin_mode_out();       // open drain이라 pin in/out mode 변경 필요 없음
			// 디바이스(DHT11)에 시작 요청
			pin_low();
 8000722:	f7ff ff69 	bl	80005f8 <pin_low>
			pin_out_wait(18000);
 8000726:	f244 6050 	movw	r0, #18000	; 0x4650
 800072a:	f7ff ff83 	bl	8000634 <pin_out_wait>
			pin_high();
 800072e:	f7ff ff55 	bl	80005dc <pin_high>
			pin_out_wait(40);
 8000732:	2028      	movs	r0, #40	; 0x28
 8000734:	f7ff ff7e 	bl	8000634 <pin_out_wait>

			//pin_mode_in();
			//set_time(0);
			//start = get_time();
			// 디바이스가 여기서부터 응답한 값들임
			for (i=0; i<83; i++) { //83개만 읽으면 됨... : 테스트 결과
 8000738:	2300      	movs	r3, #0
 800073a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800073e:	e027      	b.n	8000790 <htc11_proc+0x98>
				pin_sts[i].sts = pin_get_change(&pin_sts[i].time);
 8000740:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000744:	f107 0208 	add.w	r2, r7, #8
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	3302      	adds	r3, #2
 800074e:	f897 419f 	ldrb.w	r4, [r7, #415]	; 0x19f
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff8a 	bl	800066c <pin_get_change>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000760:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000764:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
				if (pin_sts[i].sts == -1) {
 8000768:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 800076c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000770:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000774:	f913 3022 	ldrsb.w	r3, [r3, r2, lsl #2]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d103      	bne.n	8000786 <htc11_proc+0x8e>
					err = -1;      // 센서 응답 끝이나 응답이 없을 때
 800077e:	23ff      	movs	r3, #255	; 0xff
 8000780:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
					break;
 8000784:	e008      	b.n	8000798 <htc11_proc+0xa0>
			for (i=0; i<83; i++) { //83개만 읽으면 됨... : 테스트 결과
 8000786:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800078a:	3301      	adds	r3, #1
 800078c:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8000790:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000794:	2b52      	cmp	r3, #82	; 0x52
 8000796:	d9d3      	bls.n	8000740 <htc11_proc+0x48>

			//pin_high();

			//pin_mode_out();

			printf("err code = %d\n", err);
 8000798:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 800079c:	4619      	mov	r1, r3
 800079e:	4881      	ldr	r0, [pc, #516]	; (80009a4 <htc11_proc+0x2ac>)
 80007a0:	f003 fb2a 	bl	8003df8 <iprintf>
			printf("i = %d\n", i);
 80007a4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80007a8:	4619      	mov	r1, r3
 80007aa:	487f      	ldr	r0, [pc, #508]	; (80009a8 <htc11_proc+0x2b0>)
 80007ac:	f003 fb24 	bl	8003df8 <iprintf>

			// 테스트 해 보니 DHT11은 83개 signal 출력
			if (i < 83) {
 80007b0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80007b4:	2b52      	cmp	r3, #82	; 0x52
 80007b6:	d803      	bhi.n	80007c0 <htc11_proc+0xc8>
				printf("read bit error....\n");
 80007b8:	487c      	ldr	r0, [pc, #496]	; (80009ac <htc11_proc+0x2b4>)
 80007ba:	f003 fb83 	bl	8003ec4 <puts>
					printf("Temperature:%d.%dC\n", data[2], data[3]);
				}
			}
		}
	}
}
 80007be:	e0e9      	b.n	8000994 <htc11_proc+0x29c>
				for (j=0; j<i; j++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80007c6:	e01c      	b.n	8000802 <htc11_proc+0x10a>
					printf("%2d, %2d, %6d\n", j, pin_sts[j].sts, pin_sts[j].time);
 80007c8:	f897 119e 	ldrb.w	r1, [r7, #414]	; 0x19e
 80007cc:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80007d0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80007d8:	f913 3022 	ldrsb.w	r3, [r3, r2, lsl #2]
 80007dc:	4618      	mov	r0, r3
 80007de:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80007e2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80007e6:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	4602      	mov	r2, r0
 80007f2:	486f      	ldr	r0, [pc, #444]	; (80009b0 <htc11_proc+0x2b8>)
 80007f4:	f003 fb00 	bl	8003df8 <iprintf>
				for (j=0; j<i; j++) {
 80007f8:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80007fc:	3301      	adds	r3, #1
 80007fe:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8000802:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 8000806:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800080a:	429a      	cmp	r2, r3
 800080c:	d3dc      	bcc.n	80007c8 <htc11_proc+0xd0>
				l = 0; k = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8000814:	2300      	movs	r3, #0
 8000816:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
				for (j=3; j<i; j+=2) {
 800081a:	2303      	movs	r3, #3
 800081c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8000820:	e03f      	b.n	80008a2 <htc11_proc+0x1aa>
					if (pin_sts[j].time > 50) {
 8000822:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8000826:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800082a:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	885b      	ldrh	r3, [r3, #2]
 8000834:	2b32      	cmp	r3, #50	; 0x32
 8000836:	d917      	bls.n	8000868 <htc11_proc+0x170>
						data[l] |= (0x80 >> k);
 8000838:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800083c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000840:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8000844:	5cd3      	ldrb	r3, [r2, r3]
 8000846:	b25a      	sxtb	r2, r3
 8000848:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	fa41 f303 	asr.w	r3, r1, r3
 8000852:	b25b      	sxtb	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b25a      	sxtb	r2, r3
 8000858:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800085c:	b2d1      	uxtb	r1, r2
 800085e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000862:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8000866:	54d1      	strb	r1, [r2, r3]
					k++;
 8000868:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800086c:	3301      	adds	r3, #1
 800086e:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
					k %= 8;	// 8비트 단위
 8000872:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
					if (k == 0) {  // k가 0이면 다음 바이트
 800087e:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 8000882:	2b00      	cmp	r3, #0
 8000884:	d108      	bne.n	8000898 <htc11_proc+0x1a0>
						l++;
 8000886:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800088a:	3301      	adds	r3, #1
 800088c:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
						if (l >= 5) break;    // 5바이트 넘으면 끝.
 8000890:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8000894:	2b04      	cmp	r3, #4
 8000896:	d80b      	bhi.n	80008b0 <htc11_proc+0x1b8>
				for (j=3; j<i; j+=2) {
 8000898:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800089c:	3302      	adds	r3, #2
 800089e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80008a2:	f897 219e 	ldrb.w	r2, [r7, #414]	; 0x19e
 80008a6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3b9      	bcc.n	8000822 <htc11_proc+0x12a>
 80008ae:	e000      	b.n	80008b2 <htc11_proc+0x1ba>
						if (l >= 5) break;    // 5바이트 넘으면 끝.
 80008b0:	bf00      	nop
				printf("result------\n");
 80008b2:	4840      	ldr	r0, [pc, #256]	; (80009b4 <htc11_proc+0x2bc>)
 80008b4:	f003 fb06 	bl	8003ec4 <puts>
				for (i=0; i<l; i++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80008be:	e019      	b.n	80008f4 <htc11_proc+0x1fc>
					printf("[%3d]%3d,%02x\n", i, data[i], data[i]);
 80008c0:	f897 119f 	ldrb.w	r1, [r7, #415]	; 0x19f
 80008c4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80008c8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80008cc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80008d8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80008dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80008e0:	5cd3      	ldrb	r3, [r2, r3]
 80008e2:	4602      	mov	r2, r0
 80008e4:	4834      	ldr	r0, [pc, #208]	; (80009b8 <htc11_proc+0x2c0>)
 80008e6:	f003 fa87 	bl	8003df8 <iprintf>
				for (i=0; i<l; i++) {
 80008ea:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80008f4:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 80008f8:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3df      	bcc.n	80008c0 <htc11_proc+0x1c8>
				checksum = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
				for (i=0; i<4; i++) {
 8000906:	2300      	movs	r3, #0
 8000908:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800090c:	e010      	b.n	8000930 <htc11_proc+0x238>
					checksum += data[i];
 800090e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000912:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000916:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800091a:	5cd2      	ldrb	r2, [r2, r3]
 800091c:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8000920:	4413      	add	r3, r2
 8000922:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
				for (i=0; i<4; i++) {
 8000926:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800092a:	3301      	adds	r3, #1
 800092c:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8000930:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000934:	2b03      	cmp	r3, #3
 8000936:	d9ea      	bls.n	800090e <htc11_proc+0x216>
				if (checksum != data[4]) {
 8000938:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800093c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	f897 219a 	ldrb.w	r2, [r7, #410]	; 0x19a
 8000946:	429a      	cmp	r2, r3
 8000948:	d003      	beq.n	8000952 <htc11_proc+0x25a>
					printf("Checksum error\n");
 800094a:	481c      	ldr	r0, [pc, #112]	; (80009bc <htc11_proc+0x2c4>)
 800094c:	f003 faba 	bl	8003ec4 <puts>
}
 8000950:	e020      	b.n	8000994 <htc11_proc+0x29c>
					printf("Checksum ok!\n");
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <htc11_proc+0x2c8>)
 8000954:	f003 fab6 	bl	8003ec4 <puts>
					printf("Humidity:%d.%d%%\n", data[0], data[1]);
 8000958:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800095c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000968:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	461a      	mov	r2, r3
 8000970:	4814      	ldr	r0, [pc, #80]	; (80009c4 <htc11_proc+0x2cc>)
 8000972:	f003 fa41 	bl	8003df8 <iprintf>
					printf("Temperature:%d.%dC\n", data[2], data[3]);
 8000976:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800097a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	4619      	mov	r1, r3
 8000982:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000986:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800098a:	78db      	ldrb	r3, [r3, #3]
 800098c:	461a      	mov	r2, r3
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <htc11_proc+0x2d0>)
 8000990:	f003 fa32 	bl	8003df8 <iprintf>
}
 8000994:	bf00      	nop
 8000996:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 800099a:	46bd      	mov	sp, r7
 800099c:	bd90      	pop	{r4, r7, pc}
 800099e:	bf00      	nop
 80009a0:	08004bdc 	.word	0x08004bdc
 80009a4:	08004bf4 	.word	0x08004bf4
 80009a8:	08004c04 	.word	0x08004c04
 80009ac:	08004c0c 	.word	0x08004c0c
 80009b0:	08004c20 	.word	0x08004c20
 80009b4:	08004c30 	.word	0x08004c30
 80009b8:	08004c40 	.word	0x08004c40
 80009bc:	08004c50 	.word	0x08004c50
 80009c0:	08004c60 	.word	0x08004c60
 80009c4:	08004c70 	.word	0x08004c70
 80009c8:	08004c84 	.word	0x08004c84

080009cc <getkey>:

#define D_KEY_PORT	USER_Btn_GPIO_Port
#define D_KEY_PIN		USER_Btn_Pin

uint8_t getkey(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
	static uint32_t t_prev = 0;
	static uint8_t k_prev = 0;   //default key
	uint32_t t_curr;
	uint8_t k_curr;
	uint8_t ret = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
	
	t_curr = HAL_GetTick();
 80009d6:	f000 fd73 	bl	80014c0 <HAL_GetTick>
 80009da:	60b8      	str	r0, [r7, #8]
	
	if ((t_curr - t_prev) < 150) return 0;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <getkey+0x5c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b95      	cmp	r3, #149	; 0x95
 80009e6:	d801      	bhi.n	80009ec <getkey+0x20>
 80009e8:	2300      	movs	r3, #0
 80009ea:	e019      	b.n	8000a20 <getkey+0x54>
	t_prev = t_curr;
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <getkey+0x5c>)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	6013      	str	r3, [r2, #0]

	k_curr = (uint8_t)HAL_GPIO_ReadPin(D_KEY_PORT, D_KEY_PIN);
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <getkey+0x60>)
 80009f8:	f001 fb4c 	bl	8002094 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]

	if (k_prev == 0 && k_curr == 1) {
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <getkey+0x64>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d105      	bne.n	8000a14 <getkey+0x48>
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d102      	bne.n	8000a14 <getkey+0x48>
		ret = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e001      	b.n	8000a18 <getkey+0x4c>
  } else {
  	ret = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
  }
	
	k_prev = k_curr;
 8000a18:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <getkey+0x64>)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	7013      	strb	r3, [r2, #0]
	
	return ret;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	20000088 	.word	0x20000088

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fcdc 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f80e 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f000 f940 	bl	8000cc4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a44:	f000 f874 	bl	8000b30 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a48:	f000 f8e4 	bl	8000c14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a4c:	f000 f90c 	bl	8000c68 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM14_Init();
 8000a50:	f000 f8bc 	bl	8000bcc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000a54:	f7ff fd9a 	bl	800058c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <main+0x24>
	...

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	; 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fb0a 	bl	8004084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a27      	ldr	r2, [pc, #156]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000abc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ad0:	23a8      	movs	r3, #168	; 0xa8
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fc25 	bl	8002330 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aec:	f000 f9c0 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fe86 	bl	8002820 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b1a:	f000 f9a9 	bl	8000e70 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3750      	adds	r7, #80	; 0x50
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b36:	4a20      	ldr	r2, [pc, #128]	; (8000bb8 <MX_ETH_Init+0x88>)
 8000b38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b48:	22e1      	movs	r2, #225	; 0xe1
 8000b4a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b60:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <MX_ETH_Init+0x8c>)
 8000b62:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b6a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <MX_ETH_Init+0x90>)
 8000b70:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <MX_ETH_Init+0x94>)
 8000b76:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b7a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b7e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_ETH_Init+0x84>)
 8000b82:	f000 fdb3 	bl	80016ec <HAL_ETH_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 f970 	bl	8000e70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b90:	2238      	movs	r2, #56	; 0x38
 8000b92:	2100      	movs	r1, #0
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_ETH_Init+0x98>)
 8000b96:	f003 fa75 	bl	8004084 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_ETH_Init+0x98>)
 8000b9c:	2221      	movs	r2, #33	; 0x21
 8000b9e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_ETH_Init+0x98>)
 8000ba2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ba6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_ETH_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000204 	.word	0x20000204
 8000bb8:	40028000 	.word	0x40028000
 8000bbc:	2000084c 	.word	0x2000084c
 8000bc0:	20000164 	.word	0x20000164
 8000bc4:	200000c4 	.word	0x200000c4
 8000bc8:	2000008c 	.word	0x2000008c

08000bcc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <MX_TIM14_Init+0x44>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bd8:	2253      	movs	r2, #83	; 0x53
 8000bda:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_TIM14_Init+0x40>)
 8000bf8:	f002 f832 	bl	8002c60 <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000c02:	f000 f935 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200002b4 	.word	0x200002b4
 8000c10:	40002000 	.word	0x40002000

08000c14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_USART3_UART_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART3_UART_Init+0x4c>)
 8000c4c:	f002 f960 	bl	8002f10 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c56:	f000 f90b 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200002fc 	.word	0x200002fc
 8000c64:	40004800 	.word	0x40004800

08000c68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	f001 fa23 	bl	80020f6 <HAL_PCD_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f8db 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000340 	.word	0x20000340

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	; 0x30
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	4b60      	ldr	r3, [pc, #384]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a5f      	ldr	r2, [pc, #380]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b56      	ldr	r3, [pc, #344]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a51      	ldr	r2, [pc, #324]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b4f      	ldr	r3, [pc, #316]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <MX_GPIO_Init+0x19c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	4837      	ldr	r0, [pc, #220]	; (8000e64 <MX_GPIO_Init+0x1a0>)
 8000d88:	f001 f99c 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d92:	4834      	ldr	r0, [pc, #208]	; (8000e64 <MX_GPIO_Init+0x1a0>)
 8000d94:	f001 f996 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2140      	movs	r1, #64	; 0x40
 8000d9c:	4832      	ldr	r0, [pc, #200]	; (8000e68 <MX_GPIO_Init+0x1a4>)
 8000d9e:	f001 f991 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	4830      	ldr	r0, [pc, #192]	; (8000e6c <MX_GPIO_Init+0x1a8>)
 8000daa:	f001 f98b 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4829      	ldr	r0, [pc, #164]	; (8000e6c <MX_GPIO_Init+0x1a8>)
 8000dc6:	f000 ffb9 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000dce:	2311      	movs	r3, #17
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4820      	ldr	r0, [pc, #128]	; (8000e64 <MX_GPIO_Init+0x1a0>)
 8000de2:	f000 ffab 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000de6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <MX_GPIO_Init+0x1a0>)
 8000e00:	f000 ff9c 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4813      	ldr	r0, [pc, #76]	; (8000e68 <MX_GPIO_Init+0x1a4>)
 8000e1c:	f000 ff8e 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_GPIO_Init+0x1a4>)
 8000e34:	f000 ff82 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e3e:	2311      	movs	r3, #17
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_GPIO_Init+0x1a8>)
 8000e52:	f000 ff73 	bl	8001d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40020800 	.word	0x40020800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	; 0x38
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a55      	ldr	r2, [pc, #340]	; (8001040 <HAL_ETH_MspInit+0x174>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 80a4 	bne.w	8001038 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
 8000ef4:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	4b45      	ldr	r3, [pc, #276]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a44      	ldr	r2, [pc, #272]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b42      	ldr	r3, [pc, #264]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a3d      	ldr	r2, [pc, #244]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a36      	ldr	r2, [pc, #216]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a2f      	ldr	r2, [pc, #188]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a28      	ldr	r2, [pc, #160]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fb4:	2332      	movs	r3, #50	; 0x32
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <HAL_ETH_MspInit+0x17c>)
 8000fd0:	f000 feb4 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fd4:	2386      	movs	r3, #134	; 0x86
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4817      	ldr	r0, [pc, #92]	; (800104c <HAL_ETH_MspInit+0x180>)
 8000ff0:	f000 fea4 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001006:	230b      	movs	r3, #11
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_ETH_MspInit+0x184>)
 8001012:	f000 fe93 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001016:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <HAL_ETH_MspInit+0x188>)
 8001034:	f000 fe82 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3738      	adds	r7, #56	; 0x38
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40028000 	.word	0x40028000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020800 	.word	0x40020800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40021800 	.word	0x40021800

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_TIM_Base_MspInit+0x40>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_TIM_Base_MspInit+0x40>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_Base_MspInit+0x40>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40002000 	.word	0x40002000
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_UART_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12c      	bne.n	8001118 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001108:	2307      	movs	r3, #7
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x8c>)
 8001114:	f000 fe12 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004800 	.word	0x40004800
 8001124:	40023800 	.word	0x40023800
 8001128:	40020c00 	.word	0x40020c00

0800112c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114c:	d13f      	bne.n	80011ce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800116a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800117c:	230a      	movs	r3, #10
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <HAL_PCD_MspInit+0xb0>)
 8001188:	f000 fdd8 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800118c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_PCD_MspInit+0xb0>)
 80011a2:	f000 fdcb 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6353      	str	r3, [r2, #52]	; 0x34
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_PCD_MspInit+0xac>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f934 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e00a      	b.n	800125c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001246:	f3af 8000 	nop.w
 800124a:	4601      	mov	r1, r0
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	60ba      	str	r2, [r7, #8]
 8001252:	b2ca      	uxtb	r2, r1
 8001254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	dbf0      	blt.n	8001246 <_read+0x12>
  }

  return len;
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e009      	b.n	8001294 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	60ba      	str	r2, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f987 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf1      	blt.n	8001280 <_write+0x12>
  }
  return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	605a      	str	r2, [r3, #4]
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_isatty>:

int _isatty(int file)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f002 feee 	bl	8004120 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20030000 	.word	0x20030000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000854 	.word	0x20000854
 8001378:	200009a8 	.word	0x200009a8

0800137c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013bc:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ca:	f7ff ffd7 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fead 	bl	800412c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff fb2f 	bl	8000a34 <main>
  bx  lr    
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013e4:	08004cf4 	.word	0x08004cf4
  ldr r2, =_sbss
 80013e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013ec:	200009a8 	.word	0x200009a8

080013f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_Init+0x40>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_Init+0x40>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x40>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f931 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fd28 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f93b 	bl	80016d2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f911 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000858 	.word	0x20000858

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000858 	.word	0x20000858

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff47 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff5c 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffb0 	bl	8001640 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06c      	b.n	80017d8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2223      	movs	r2, #35	; 0x23
 800170c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fbdb 	bl	8000ecc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_ETH_Init+0xf4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <HAL_ETH_Init+0xf4>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_ETH_Init+0xf4>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001738:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800173c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4927      	ldr	r1, [pc, #156]	; (80017e4 <HAL_ETH_Init+0xf8>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_ETH_Init+0xf8>)
 800174e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001766:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001768:	f7ff feaa 	bl	80014c0 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800176e:	e011      	b.n	8001794 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001770:	f7ff fea6 	bl	80014c0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800177e:	d909      	bls.n	8001794 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	22e0      	movs	r2, #224	; 0xe0
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e021      	b.n	80017d8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e4      	bne.n	8001770 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f958 	bl	8001a5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f9ff 	bl	8001bb0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fa55 	bl	8001c62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	461a      	mov	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f9bd 	bl	8001b40 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2210      	movs	r2, #16
 80017d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800

080017e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4b51      	ldr	r3, [pc, #324]	; (8001944 <ETH_SetMACConfig+0x15c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	7c1b      	ldrb	r3, [r3, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <ETH_SetMACConfig+0x28>
 800180a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800180e:	e000      	b.n	8001812 <ETH_SetMACConfig+0x2a>
 8001810:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7c5b      	ldrb	r3, [r3, #17]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <ETH_SetMACConfig+0x38>
 800181a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800181e:	e000      	b.n	8001822 <ETH_SetMACConfig+0x3a>
 8001820:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001822:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	7fdb      	ldrb	r3, [r3, #31]
 800182e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001830:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	7f92      	ldrb	r2, [r2, #30]
 800183c:	2a00      	cmp	r2, #0
 800183e:	d102      	bne.n	8001846 <ETH_SetMACConfig+0x5e>
 8001840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001844:	e000      	b.n	8001848 <ETH_SetMACConfig+0x60>
 8001846:	2200      	movs	r2, #0
                        macconf->Speed |
 8001848:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	7f1b      	ldrb	r3, [r3, #28]
 800184e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001850:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	791b      	ldrb	r3, [r3, #4]
 800185c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800185e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001866:	2a00      	cmp	r2, #0
 8001868:	d102      	bne.n	8001870 <ETH_SetMACConfig+0x88>
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	e000      	b.n	8001872 <ETH_SetMACConfig+0x8a>
 8001870:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001872:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7bdb      	ldrb	r3, [r3, #15]
 8001878:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800187a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001880:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001888:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800188a:	4313      	orrs	r3, r2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff fe18 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018be:	4013      	ands	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d101      	bne.n	80018d6 <ETH_SetMACConfig+0xee>
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	e000      	b.n	80018d8 <ETH_SetMACConfig+0xf0>
 80018d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80018d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80018de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80018e6:	2a01      	cmp	r2, #1
 80018e8:	d101      	bne.n	80018ee <ETH_SetMACConfig+0x106>
 80018ea:	2208      	movs	r2, #8
 80018ec:	e000      	b.n	80018f0 <ETH_SetMACConfig+0x108>
 80018ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80018f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80018f8:	2a01      	cmp	r2, #1
 80018fa:	d101      	bne.n	8001900 <ETH_SetMACConfig+0x118>
 80018fc:	2204      	movs	r2, #4
 80018fe:	e000      	b.n	8001902 <ETH_SetMACConfig+0x11a>
 8001900:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800190a:	2a01      	cmp	r2, #1
 800190c:	d101      	bne.n	8001912 <ETH_SetMACConfig+0x12a>
 800190e:	2202      	movs	r2, #2
 8001910:	e000      	b.n	8001914 <ETH_SetMACConfig+0x12c>
 8001912:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001914:	4313      	orrs	r3, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff fdd3 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	ff20810f 	.word	0xff20810f

08001948 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <ETH_SetDMAConfig+0x110>)
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	7b1b      	ldrb	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <ETH_SetDMAConfig+0x2c>
 800196e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001972:	e000      	b.n	8001976 <ETH_SetDMAConfig+0x2e>
 8001974:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800197c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	7f52      	ldrb	r2, [r2, #29]
 8001982:	2a00      	cmp	r2, #0
 8001984:	d102      	bne.n	800198c <ETH_SetDMAConfig+0x44>
 8001986:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800198a:	e000      	b.n	800198e <ETH_SetDMAConfig+0x46>
 800198c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800198e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7b9b      	ldrb	r3, [r3, #14]
 8001994:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001996:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800199c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
 80019a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80019a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	7f9b      	ldrb	r3, [r3, #30]
 80019aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80019ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80019b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019bc:	4313      	orrs	r3, r2
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019cc:	461a      	mov	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fd7a 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001a12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001a1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001a20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fd4b 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	f8de3f23 	.word	0xf8de3f23

08001a5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a6      	sub	sp, #152	; 0x98
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fe86 	bl	80017e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b10:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff08 	bl	8001948 <ETH_SetDMAConfig>
}
 8001b38:	bf00      	nop
 8001b3a:	3798      	adds	r7, #152	; 0x98
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3305      	adds	r3, #5
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	3204      	adds	r2, #4
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <ETH_MACAddressConfig+0x68>)
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	061a      	lsls	r2, r3, #24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3302      	adds	r3, #2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4313      	orrs	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <ETH_MACAddressConfig+0x6c>)
 8001b92:	4413      	add	r3, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40028040 	.word	0x40028040
 8001bac:	40028044 	.word	0x40028044

08001bb0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e03e      	b.n	8001c3c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	3206      	adds	r2, #6
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d80c      	bhi.n	8001c20 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	e004      	b.n	8001c2a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d9bd      	bls.n	8001bbe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	611a      	str	r2, [r3, #16]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e046      	b.n	8001cfe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001cb4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	3212      	adds	r2, #18
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d80c      	bhi.n	8001cee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6919      	ldr	r1, [r3, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	e004      	b.n	8001cf8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d9b5      	bls.n	8001c70 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	60da      	str	r2, [r3, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e177      	b.n	8002048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8166 	bne.w	8002042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80c0 	beq.w	8002042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_GPIO_Init+0x324>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_GPIO_Init+0x324>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_GPIO_Init+0x324>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a61      	ldr	r2, [pc, #388]	; (8002064 <HAL_GPIO_Init+0x328>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_GPIO_Init+0x32c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d037      	beq.n	8001f7a <HAL_GPIO_Init+0x23e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a57      	ldr	r2, [pc, #348]	; (800206c <HAL_GPIO_Init+0x330>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_GPIO_Init+0x23a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a56      	ldr	r2, [pc, #344]	; (8002070 <HAL_GPIO_Init+0x334>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x236>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <HAL_GPIO_Init+0x338>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x232>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <HAL_GPIO_Init+0x33c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a53      	ldr	r2, [pc, #332]	; (800207c <HAL_GPIO_Init+0x340>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x22a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_GPIO_Init+0x344>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a51      	ldr	r2, [pc, #324]	; (8002084 <HAL_GPIO_Init+0x348>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x222>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a50      	ldr	r2, [pc, #320]	; (8002088 <HAL_GPIO_Init+0x34c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x21e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4f      	ldr	r2, [pc, #316]	; (800208c <HAL_GPIO_Init+0x350>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f52:	2309      	movs	r3, #9
 8001f54:	e012      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f56:	230a      	movs	r3, #10
 8001f58:	e010      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	e00e      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x240>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	; (8002064 <HAL_GPIO_Init+0x328>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_GPIO_Init+0x354>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a34      	ldr	r2, [pc, #208]	; (8002090 <HAL_GPIO_Init+0x354>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <HAL_GPIO_Init+0x354>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a29      	ldr	r2, [pc, #164]	; (8002090 <HAL_GPIO_Init+0x354>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_GPIO_Init+0x354>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_GPIO_Init+0x354>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_GPIO_Init+0x354>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_GPIO_Init+0x354>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae84 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40021c00 	.word	0x40021c00
 8002088:	40022000 	.word	0x40022000
 800208c:	40022400 	.word	0x40022400
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f8:	b08f      	sub	sp, #60	; 0x3c
 80020fa:	af0a      	add	r7, sp, #40	; 0x28
 80020fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e10f      	b.n	8002328 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff f802 	bl	800112c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2203      	movs	r2, #3
 800212c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fb05 	bl	8003756 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	687e      	ldr	r6, [r7, #4]
 8002154:	466d      	mov	r5, sp
 8002156:	f106 0410 	add.w	r4, r6, #16
 800215a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002166:	e885 0003 	stmia.w	r5, {r0, r1}
 800216a:	1d33      	adds	r3, r6, #4
 800216c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216e:	6838      	ldr	r0, [r7, #0]
 8002170:	f001 fa90 	bl	8003694 <USB_CoreInit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0d0      	b.n	8002328 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f001 faf3 	bl	8003778 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e04a      	b.n	800222e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	333d      	adds	r3, #61	; 0x3d
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	333c      	adds	r3, #60	; 0x3c
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	b298      	uxth	r0, r3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3344      	adds	r3, #68	; 0x44
 80021d4:	4602      	mov	r2, r0
 80021d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3340      	adds	r3, #64	; 0x40
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3348      	adds	r3, #72	; 0x48
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334c      	adds	r3, #76	; 0x4c
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3354      	adds	r3, #84	; 0x54
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	3301      	adds	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	d3af      	bcc.n	8002198 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e044      	b.n	80022c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	3301      	adds	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d3b5      	bcc.n	800223e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	687e      	ldr	r6, [r7, #4]
 80022da:	466d      	mov	r5, sp
 80022dc:	f106 0410 	add.w	r4, r6, #16
 80022e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f0:	1d33      	adds	r3, r6, #4
 80022f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f001 fa8b 	bl	8003810 <USB_DevInit>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00d      	b.n	8002328 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fc56 	bl	8003bd2 <USB_DevDisconnect>

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e267      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d00c      	beq.n	8002374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002362:	2b08      	cmp	r3, #8
 8002364:	d112      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002372:	d10b      	bne.n	800238c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05b      	beq.n	8002438 <HAL_RCC_OscConfig+0x108>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d157      	bne.n	8002438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e242      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d106      	bne.n	80023a4 <HAL_RCC_OscConfig+0x74>
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e01d      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b70      	ldr	r3, [pc, #448]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6f      	ldr	r2, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a6c      	ldr	r2, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0xb0>
 80023c8:	4b69      	ldr	r3, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a68      	ldr	r2, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4b66      	ldr	r3, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80023da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff f86a 	bl	80014c0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff f866 	bl	80014c0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e207      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0xc0>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f856 	bl	80014c0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff f852 	bl	80014c0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1f3      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0xe8>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d063      	beq.n	800250e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800245a:	2b08      	cmp	r3, #8
 800245c:	d11c      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d116      	bne.n	8002498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e1c7      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	e03a      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <HAL_RCC_OscConfig+0x244>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7ff f80b 	bl	80014c0 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7ff f807 	bl	80014c0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1a8      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4925      	ldr	r1, [pc, #148]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x244>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe ffea 	bl	80014c0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f0:	f7fe ffe6 	bl	80014c0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e187      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d036      	beq.n	8002588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_RCC_OscConfig+0x248>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe ffca 	bl	80014c0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe ffc6 	bl	80014c0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e167      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x240>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x200>
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_OscConfig+0x248>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe ffb3 	bl	80014c0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	e00e      	b.n	800257c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7fe ffaf 	bl	80014c0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d907      	bls.n	800257c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e150      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	42470000 	.word	0x42470000
 8002578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ea      	bne.n	800255e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8097 	beq.w	80026c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a7c      	ldr	r2, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b7a      	ldr	r3, [pc, #488]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b74      	ldr	r3, [pc, #464]	; (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a73      	ldr	r2, [pc, #460]	; (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe ff6f 	bl	80014c0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe ff6b 	bl	80014c0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e10c      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_OscConfig+0x474>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x2ea>
 800260c:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x324>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x30c>
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a5e      	ldr	r2, [pc, #376]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
 800262e:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a5b      	ldr	r2, [pc, #364]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x324>
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002642:	f023 0301 	bic.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe ff30 	bl	80014c0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe ff2c 	bl	80014c0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0cb      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ee      	beq.n	8002664 <HAL_RCC_OscConfig+0x334>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7fe ff1a 	bl	80014c0 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe ff16 	bl	80014c0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0b5      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a1 	beq.w	8002810 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d05c      	beq.n	8002794 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d141      	bne.n	8002766 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_OscConfig+0x478>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe feea 	bl	80014c0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fee6 	bl	80014c0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e087      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	019b      	lsls	r3, r3, #6
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	491b      	ldr	r1, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x478>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe febf 	bl	80014c0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe febb 	bl	80014c0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e05c      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x416>
 8002764:	e054      	b.n	8002810 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_RCC_OscConfig+0x478>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fea8 	bl	80014c0 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fea4 	bl	80014c0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e045      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_OscConfig+0x470>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x444>
 8002792:	e03d      	b.n	8002810 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e038      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40007000 	.word	0x40007000
 80027a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x4ec>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d028      	beq.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d121      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d11a      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0cc      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002834:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d90c      	bls.n	800285c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d044      	beq.n	8002940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d003      	beq.n	80028de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e067      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fe:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f023 0203 	bic.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4934      	ldr	r1, [pc, #208]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002910:	f7fe fdd6 	bl	80014c0 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	e00a      	b.n	800292e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe fdd2 	bl	80014c0 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f241 3288 	movw	r2, #5000	; 0x1388
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e04f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d1eb      	bne.n	8002918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d20c      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f821 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fd36 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08004c98 	.word	0x08004c98
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b094      	sub	sp, #80	; 0x50
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	647b      	str	r3, [r7, #68]	; 0x44
 80029f8:	2300      	movs	r3, #0
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029fc:	2300      	movs	r3, #0
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a04:	4b79      	ldr	r3, [pc, #484]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x40>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f200 80e1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1e:	e0db      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a24:	e0db      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e0d8      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a5e:	4622      	mov	r2, r4
 8002a60:	462b      	mov	r3, r5
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	0159      	lsls	r1, r3, #5
 8002a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a70:	0150      	lsls	r0, r2, #5
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4621      	mov	r1, r4
 8002a78:	1a51      	subs	r1, r2, r1
 8002a7a:	6139      	str	r1, [r7, #16]
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a90:	4659      	mov	r1, fp
 8002a92:	018b      	lsls	r3, r1, #6
 8002a94:	4651      	mov	r1, sl
 8002a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	018a      	lsls	r2, r1, #6
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	eb18 0303 	adds.w	r3, r8, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	462b      	mov	r3, r5
 8002acc:	eb49 0303 	adc.w	r3, r9, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	024b      	lsls	r3, r1, #9
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae8:	4621      	mov	r1, r4
 8002aea:	024a      	lsls	r2, r1, #9
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afc:	f7fd fbc8 	bl	8000290 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b08:	e058      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	4611      	mov	r1, r2
 8002b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0159      	lsls	r1, r3, #5
 8002b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b36:	0150      	lsls	r0, r2, #5
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b60:	eb63 050b 	sbc.w	r5, r3, fp
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	00eb      	lsls	r3, r5, #3
 8002b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	4643      	mov	r3, r8
 8002b7a:	18e3      	adds	r3, r4, r3
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb45 0303 	adc.w	r3, r5, r3
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	61fa      	str	r2, [r7, #28]
 8002bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb0:	f7fd fb6e 	bl	8000290 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3750      	adds	r7, #80	; 0x50
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08004ca8 	.word	0x08004ca8

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffdc 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004ca8 	.word	0x08004ca8

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe f9e6 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 f896 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e046      	b.n	8002da6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <HAL_TIM_Base_Start+0xb4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d01d      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_TIM_Base_Start+0xb8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d018      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_TIM_Base_Start+0xbc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_TIM_Base_Start+0xc0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00e      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIM_Base_Start+0xc4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_TIM_Base_Start+0xc8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_TIM_Base_Start+0x70>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIM_Base_Start+0xcc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d010      	beq.n	8002da4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	e007      	b.n	8002da4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40010400 	.word	0x40010400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40001800 	.word	0x40001800

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a40      	ldr	r2, [pc, #256]	; (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3d      	ldr	r2, [pc, #244]	; (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	; (8002eec <TIM_Base_SetConfig+0x11c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d027      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	; (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d023      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <TIM_Base_SetConfig+0x11c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <TIM_Base_SetConfig+0x128>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <TIM_Base_SetConfig+0x12c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <TIM_Base_SetConfig+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <TIM_Base_SetConfig+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xf8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	40002000 	.word	0x40002000

08002f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03f      	b.n	8002fa2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f8b0 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f929 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d17c      	bne.n	80030c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_UART_Transmit+0x2c>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e075      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit+0x3e>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e06e      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ffe:	f7fe fa5f 	bl	80014c0 <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003018:	d108      	bne.n	800302c <HAL_UART_Transmit+0x82>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e003      	b.n	8003034 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800303c:	e02a      	b.n	8003094 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f840 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e036      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800306c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	3302      	adds	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e007      	b.n	8003086 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1cf      	bne.n	800303e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f810 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e006      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3720      	adds	r7, #32
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b090      	sub	sp, #64	; 0x40
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030de:	e050      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d04c      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x30>
 80030ee:	f7fe f9e7 	bl	80014c0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d241      	bcs.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800311e:	637a      	str	r2, [r7, #52]	; 0x34
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003152:	623a      	str	r2, [r7, #32]
 8003154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	69f9      	ldr	r1, [r7, #28]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d09f      	beq.n	80030e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3740      	adds	r7, #64	; 0x40
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b0c0      	sub	sp, #256	; 0x100
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	68d9      	ldr	r1, [r3, #12]
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	ea40 0301 	orr.w	r3, r0, r1
 80031d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003204:	f021 010c 	bic.w	r1, r1, #12
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003212:	430b      	orrs	r3, r1
 8003214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	6999      	ldr	r1, [r3, #24]
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	ea40 0301 	orr.w	r3, r0, r1
 8003232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b8f      	ldr	r3, [pc, #572]	; (8003478 <UART_SetConfig+0x2cc>)
 800323c:	429a      	cmp	r2, r3
 800323e:	d005      	beq.n	800324c <UART_SetConfig+0xa0>
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b8d      	ldr	r3, [pc, #564]	; (800347c <UART_SetConfig+0x2d0>)
 8003248:	429a      	cmp	r2, r3
 800324a:	d104      	bne.n	8003256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7ff fcf4 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003250:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003254:	e003      	b.n	800325e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003256:	f7ff fcdb 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 800325a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003268:	f040 810c 	bne.w	8003484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003276:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800327a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800327e:	4622      	mov	r2, r4
 8003280:	462b      	mov	r3, r5
 8003282:	1891      	adds	r1, r2, r2
 8003284:	65b9      	str	r1, [r7, #88]	; 0x58
 8003286:	415b      	adcs	r3, r3
 8003288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800328e:	4621      	mov	r1, r4
 8003290:	eb12 0801 	adds.w	r8, r2, r1
 8003294:	4629      	mov	r1, r5
 8003296:	eb43 0901 	adc.w	r9, r3, r1
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ae:	4690      	mov	r8, r2
 80032b0:	4699      	mov	r9, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	eb18 0303 	adds.w	r3, r8, r3
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032bc:	462b      	mov	r3, r5
 80032be:	eb49 0303 	adc.w	r3, r9, r3
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032da:	460b      	mov	r3, r1
 80032dc:	18db      	adds	r3, r3, r3
 80032de:	653b      	str	r3, [r7, #80]	; 0x50
 80032e0:	4613      	mov	r3, r2
 80032e2:	eb42 0303 	adc.w	r3, r2, r3
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
 80032e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032f0:	f7fc ffce 	bl	8000290 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <UART_SetConfig+0x2d4>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011c      	lsls	r4, r3, #4
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800330c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	64b9      	str	r1, [r7, #72]	; 0x48
 800331c:	415b      	adcs	r3, r3
 800331e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003324:	4641      	mov	r1, r8
 8003326:	eb12 0a01 	adds.w	sl, r2, r1
 800332a:	4649      	mov	r1, r9
 800332c:	eb43 0b01 	adc.w	fp, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800333c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003344:	4692      	mov	sl, r2
 8003346:	469b      	mov	fp, r3
 8003348:	4643      	mov	r3, r8
 800334a:	eb1a 0303 	adds.w	r3, sl, r3
 800334e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003352:	464b      	mov	r3, r9
 8003354:	eb4b 0303 	adc.w	r3, fp, r3
 8003358:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003368:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800336c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003370:	460b      	mov	r3, r1
 8003372:	18db      	adds	r3, r3, r3
 8003374:	643b      	str	r3, [r7, #64]	; 0x40
 8003376:	4613      	mov	r3, r2
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
 800337e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003386:	f7fc ff83 	bl	8000290 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4611      	mov	r1, r2
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <UART_SetConfig+0x2d4>)
 8003392:	fba3 2301 	umull	r2, r3, r3, r1
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2264      	movs	r2, #100	; 0x64
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	1acb      	subs	r3, r1, r3
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <UART_SetConfig+0x2d4>)
 80033a8:	fba3 2302 	umull	r2, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033b4:	441c      	add	r4, r3
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80033d0:	415b      	adcs	r3, r3
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6339      	str	r1, [r7, #48]	; 0x30
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800340c:	464b      	mov	r3, r9
 800340e:	460a      	mov	r2, r1
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003424:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800342c:	460b      	mov	r3, r1
 800342e:	18db      	adds	r3, r3, r3
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
 8003432:	4613      	mov	r3, r2
 8003434:	eb42 0303 	adc.w	r3, r2, r3
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800343e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003442:	f7fc ff25 	bl	8000290 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <UART_SetConfig+0x2d4>)
 800344c:	fba3 1302 	umull	r1, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	2164      	movs	r1, #100	; 0x64
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	3332      	adds	r3, #50	; 0x32
 800345e:	4a08      	ldr	r2, [pc, #32]	; (8003480 <UART_SetConfig+0x2d4>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	f003 0207 	and.w	r2, r3, #7
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4422      	add	r2, r4
 8003472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003474:	e106      	b.n	8003684 <UART_SetConfig+0x4d8>
 8003476:	bf00      	nop
 8003478:	40011000 	.word	0x40011000
 800347c:	40011400 	.word	0x40011400
 8003480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800348e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003496:	4642      	mov	r2, r8
 8003498:	464b      	mov	r3, r9
 800349a:	1891      	adds	r1, r2, r2
 800349c:	6239      	str	r1, [r7, #32]
 800349e:	415b      	adcs	r3, r3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034a6:	4641      	mov	r1, r8
 80034a8:	1854      	adds	r4, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb43 0501 	adc.w	r5, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	00eb      	lsls	r3, r5, #3
 80034ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034be:	00e2      	lsls	r2, r4, #3
 80034c0:	4614      	mov	r4, r2
 80034c2:	461d      	mov	r5, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	18e3      	adds	r3, r4, r3
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034cc:	464b      	mov	r3, r9
 80034ce:	eb45 0303 	adc.w	r3, r5, r3
 80034d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034f2:	4629      	mov	r1, r5
 80034f4:	008b      	lsls	r3, r1, #2
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fc:	4621      	mov	r1, r4
 80034fe:	008a      	lsls	r2, r1, #2
 8003500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003504:	f7fc fec4 	bl	8000290 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4b60      	ldr	r3, [pc, #384]	; (8003690 <UART_SetConfig+0x4e4>)
 800350e:	fba3 2302 	umull	r2, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	011c      	lsls	r4, r3, #4
 8003516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003528:	4642      	mov	r2, r8
 800352a:	464b      	mov	r3, r9
 800352c:	1891      	adds	r1, r2, r2
 800352e:	61b9      	str	r1, [r7, #24]
 8003530:	415b      	adcs	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	4641      	mov	r1, r8
 800353a:	1851      	adds	r1, r2, r1
 800353c:	6139      	str	r1, [r7, #16]
 800353e:	4649      	mov	r1, r9
 8003540:	414b      	adcs	r3, r1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003550:	4659      	mov	r1, fp
 8003552:	00cb      	lsls	r3, r1, #3
 8003554:	4651      	mov	r1, sl
 8003556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355a:	4651      	mov	r1, sl
 800355c:	00ca      	lsls	r2, r1, #3
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	4603      	mov	r3, r0
 8003564:	4642      	mov	r2, r8
 8003566:	189b      	adds	r3, r3, r2
 8003568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800356c:	464b      	mov	r3, r9
 800356e:	460a      	mov	r2, r1
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	67bb      	str	r3, [r7, #120]	; 0x78
 8003582:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003590:	4649      	mov	r1, r9
 8003592:	008b      	lsls	r3, r1, #2
 8003594:	4641      	mov	r1, r8
 8003596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359a:	4641      	mov	r1, r8
 800359c:	008a      	lsls	r2, r1, #2
 800359e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035a2:	f7fc fe75 	bl	8000290 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b38      	ldr	r3, [pc, #224]	; (8003690 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a33      	ldr	r2, [pc, #204]	; (8003690 <UART_SetConfig+0x4e4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035cc:	441c      	add	r4, r3
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	673b      	str	r3, [r7, #112]	; 0x70
 80035d6:	677a      	str	r2, [r7, #116]	; 0x74
 80035d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ec:	4641      	mov	r1, r8
 80035ee:	1851      	adds	r1, r2, r1
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	4649      	mov	r1, r9
 80035f4:	414b      	adcs	r3, r1
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003604:	4659      	mov	r1, fp
 8003606:	00cb      	lsls	r3, r1, #3
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360e:	4651      	mov	r1, sl
 8003610:	00ca      	lsls	r2, r1, #3
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4603      	mov	r3, r0
 8003618:	4642      	mov	r2, r8
 800361a:	189b      	adds	r3, r3, r2
 800361c:	66bb      	str	r3, [r7, #104]	; 0x68
 800361e:	464b      	mov	r3, r9
 8003620:	460a      	mov	r2, r1
 8003622:	eb42 0303 	adc.w	r3, r2, r3
 8003626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
 8003632:	667a      	str	r2, [r7, #100]	; 0x64
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003640:	4649      	mov	r1, r9
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	4641      	mov	r1, r8
 8003646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364a:	4641      	mov	r1, r8
 800364c:	008a      	lsls	r2, r1, #2
 800364e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003652:	f7fc fe1d 	bl	8000290 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <UART_SetConfig+0x4e4>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	3332      	adds	r3, #50	; 0x32
 800366e:	4a08      	ldr	r2, [pc, #32]	; (8003690 <UART_SetConfig+0x4e4>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 020f 	and.w	r2, r3, #15
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4422      	add	r2, r4
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003690:	51eb851f 	.word	0x51eb851f

08003694 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003694:	b084      	sub	sp, #16
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	f107 001c 	add.w	r0, r7, #28
 80036a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d122      	bne.n	80036f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 faa2 	bl	8003c30 <USB_CoreReset>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	e01a      	b.n	8003728 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa96 	bl	8003c30 <USB_CoreReset>
 8003704:	4603      	mov	r3, r0
 8003706:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
 800371a:	e005      	b.n	8003728 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10b      	bne.n	8003746 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f043 0206 	orr.w	r2, r3, #6
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003752:	b004      	add	sp, #16
 8003754:	4770      	bx	lr

08003756 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f023 0201 	bic.w	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7fd fe96 	bl	80014d8 <HAL_Delay>
      ms++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa2e 	bl	8003c14 <USB_GetMode>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d01e      	beq.n	80037fc <USB_SetCurrentMode+0x84>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b31      	cmp	r3, #49	; 0x31
 80037c2:	d9f0      	bls.n	80037a6 <USB_SetCurrentMode+0x2e>
 80037c4:	e01a      	b.n	80037fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d115      	bne.n	80037f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037d8:	2001      	movs	r0, #1
 80037da:	f7fd fe7d 	bl	80014d8 <HAL_Delay>
      ms++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3301      	adds	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa15 	bl	8003c14 <USB_GetMode>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <USB_SetCurrentMode+0x84>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b31      	cmp	r3, #49	; 0x31
 80037f4:	d9f0      	bls.n	80037d8 <USB_SetCurrentMode+0x60>
 80037f6:	e001      	b.n	80037fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e005      	b.n	8003808 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b32      	cmp	r3, #50	; 0x32
 8003800:	d101      	bne.n	8003806 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003810:	b084      	sub	sp, #16
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800381e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	e009      	b.n	8003844 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3340      	adds	r3, #64	; 0x40
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	2200      	movs	r2, #0
 800383c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	3301      	adds	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0e      	cmp	r3, #14
 8003848:	d9f2      	bls.n	8003830 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11c      	bne.n	800388a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
 8003888:	e00b      	b.n	80038a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b4:	4619      	mov	r1, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	461a      	mov	r2, r3
 80038be:	680b      	ldr	r3, [r1, #0]
 80038c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10c      	bne.n	80038e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038ce:	2100      	movs	r1, #0
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f965 	bl	8003ba0 <USB_SetDevSpeed>
 80038d6:	e008      	b.n	80038ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038d8:	2101      	movs	r1, #1
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f960 	bl	8003ba0 <USB_SetDevSpeed>
 80038e0:	e003      	b.n	80038ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038e2:	2103      	movs	r1, #3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f95b 	bl	8003ba0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038ea:	2110      	movs	r1, #16
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8f3 	bl	8003ad8 <USB_FlushTxFifo>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f91f 	bl	8003b40 <USB_FlushRxFifo>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	461a      	mov	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	461a      	mov	r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	461a      	mov	r2, r3
 800392c:	2300      	movs	r3, #0
 800392e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e043      	b.n	80039be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800394c:	d118      	bne.n	8003980 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003960:	461a      	mov	r2, r3
 8003962:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e013      	b.n	8003992 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	461a      	mov	r2, r3
 8003978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e008      	b.n	8003992 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	2300      	movs	r3, #0
 8003990:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	461a      	mov	r2, r3
 80039a0:	2300      	movs	r3, #0
 80039a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	461a      	mov	r2, r3
 80039b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3301      	adds	r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3b7      	bcc.n	8003936 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e043      	b.n	8003a54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e2:	d118      	bne.n	8003a16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	461a      	mov	r2, r3
 80039f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e013      	b.n	8003a28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e008      	b.n	8003a28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	461a      	mov	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	461a      	mov	r2, r3
 8003a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3301      	adds	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3b7      	bcc.n	80039cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <USB_DevInit+0x2c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f043 0208 	orr.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad0:	b004      	add	sp, #16
 8003ad2:	4770      	bx	lr
 8003ad4:	803c3800 	.word	0x803c3800

08003ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <USB_FlushTxFifo+0x64>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e01b      	b.n	8003b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	daf2      	bge.n	8003ae6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	019b      	lsls	r3, r3, #6
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <USB_FlushTxFifo+0x64>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e006      	b.n	8003b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d0f0      	beq.n	8003b10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	00030d40 	.word	0x00030d40

08003b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <USB_FlushRxFifo+0x5c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e018      	b.n	8003b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	daf2      	bge.n	8003b4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <USB_FlushRxFifo+0x5c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e006      	b.n	8003b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d0f0      	beq.n	8003b70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	00030d40 	.word	0x00030d40

08003ba0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bec:	f023 0303 	bic.w	r3, r3, #3
 8003bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0301 	and.w	r3, r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <USB_CoreReset+0x64>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e01b      	b.n	8003c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	daf2      	bge.n	8003c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <USB_CoreReset+0x64>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e006      	b.n	8003c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d0f0      	beq.n	8003c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	00030d40 	.word	0x00030d40

08003c98 <std>:
 8003c98:	2300      	movs	r3, #0
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ca6:	6083      	str	r3, [r0, #8]
 8003ca8:	8181      	strh	r1, [r0, #12]
 8003caa:	6643      	str	r3, [r0, #100]	; 0x64
 8003cac:	81c2      	strh	r2, [r0, #14]
 8003cae:	6183      	str	r3, [r0, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	305c      	adds	r0, #92	; 0x5c
 8003cb6:	f000 f9e5 	bl	8004084 <memset>
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <std+0x38>)
 8003cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <std+0x3c>)
 8003cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <std+0x40>)
 8003cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <std+0x44>)
 8003cc8:	6224      	str	r4, [r4, #32]
 8003cca:	6323      	str	r3, [r4, #48]	; 0x30
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003ed5 	.word	0x08003ed5
 8003cd4:	08003ef7 	.word	0x08003ef7
 8003cd8:	08003f2f 	.word	0x08003f2f
 8003cdc:	08003f53 	.word	0x08003f53

08003ce0 <stdio_exit_handler>:
 8003ce0:	4a02      	ldr	r2, [pc, #8]	; (8003cec <stdio_exit_handler+0xc>)
 8003ce2:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <stdio_exit_handler+0x10>)
 8003ce4:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <stdio_exit_handler+0x14>)
 8003ce6:	f000 b869 	b.w	8003dbc <_fwalk_sglue>
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	08004a1d 	.word	0x08004a1d
 8003cf4:	20000018 	.word	0x20000018

08003cf8 <cleanup_stdio>:
 8003cf8:	6841      	ldr	r1, [r0, #4]
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <cleanup_stdio+0x34>)
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	4604      	mov	r4, r0
 8003d02:	d001      	beq.n	8003d08 <cleanup_stdio+0x10>
 8003d04:	f000 fe8a 	bl	8004a1c <_fflush_r>
 8003d08:	68a1      	ldr	r1, [r4, #8]
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <cleanup_stdio+0x38>)
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	d002      	beq.n	8003d16 <cleanup_stdio+0x1e>
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 fe83 	bl	8004a1c <_fflush_r>
 8003d16:	68e1      	ldr	r1, [r4, #12]
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <cleanup_stdio+0x3c>)
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d004      	beq.n	8003d28 <cleanup_stdio+0x30>
 8003d1e:	4620      	mov	r0, r4
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f000 be7a 	b.w	8004a1c <_fflush_r>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	2000085c 	.word	0x2000085c
 8003d30:	200008c4 	.word	0x200008c4
 8003d34:	2000092c 	.word	0x2000092c

08003d38 <global_stdio_init.part.0>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <global_stdio_init.part.0+0x30>)
 8003d3c:	4c0b      	ldr	r4, [pc, #44]	; (8003d6c <global_stdio_init.part.0+0x34>)
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <global_stdio_init.part.0+0x38>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4620      	mov	r0, r4
 8003d44:	2200      	movs	r2, #0
 8003d46:	2104      	movs	r1, #4
 8003d48:	f7ff ffa6 	bl	8003c98 <std>
 8003d4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d50:	2201      	movs	r2, #1
 8003d52:	2109      	movs	r1, #9
 8003d54:	f7ff ffa0 	bl	8003c98 <std>
 8003d58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d62:	2112      	movs	r1, #18
 8003d64:	f7ff bf98 	b.w	8003c98 <std>
 8003d68:	20000994 	.word	0x20000994
 8003d6c:	2000085c 	.word	0x2000085c
 8003d70:	08003ce1 	.word	0x08003ce1

08003d74 <__sfp_lock_acquire>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__sfp_lock_acquire+0x8>)
 8003d76:	f000 b9fd 	b.w	8004174 <__retarget_lock_acquire_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	2000099d 	.word	0x2000099d

08003d80 <__sfp_lock_release>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__sfp_lock_release+0x8>)
 8003d82:	f000 b9f8 	b.w	8004176 <__retarget_lock_release_recursive>
 8003d86:	bf00      	nop
 8003d88:	2000099d 	.word	0x2000099d

08003d8c <__sinit>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	4604      	mov	r4, r0
 8003d90:	f7ff fff0 	bl	8003d74 <__sfp_lock_acquire>
 8003d94:	6a23      	ldr	r3, [r4, #32]
 8003d96:	b11b      	cbz	r3, 8003da0 <__sinit+0x14>
 8003d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d9c:	f7ff bff0 	b.w	8003d80 <__sfp_lock_release>
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__sinit+0x28>)
 8003da2:	6223      	str	r3, [r4, #32]
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__sinit+0x2c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f5      	bne.n	8003d98 <__sinit+0xc>
 8003dac:	f7ff ffc4 	bl	8003d38 <global_stdio_init.part.0>
 8003db0:	e7f2      	b.n	8003d98 <__sinit+0xc>
 8003db2:	bf00      	nop
 8003db4:	08003cf9 	.word	0x08003cf9
 8003db8:	20000994 	.word	0x20000994

08003dbc <_fwalk_sglue>:
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	4688      	mov	r8, r1
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd0:	d505      	bpl.n	8003dde <_fwalk_sglue+0x22>
 8003dd2:	6824      	ldr	r4, [r4, #0]
 8003dd4:	2c00      	cmp	r4, #0
 8003dd6:	d1f7      	bne.n	8003dc8 <_fwalk_sglue+0xc>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d907      	bls.n	8003df4 <_fwalk_sglue+0x38>
 8003de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de8:	3301      	adds	r3, #1
 8003dea:	d003      	beq.n	8003df4 <_fwalk_sglue+0x38>
 8003dec:	4629      	mov	r1, r5
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c0      	blx	r8
 8003df2:	4306      	orrs	r6, r0
 8003df4:	3568      	adds	r5, #104	; 0x68
 8003df6:	e7e9      	b.n	8003dcc <_fwalk_sglue+0x10>

08003df8 <iprintf>:
 8003df8:	b40f      	push	{r0, r1, r2, r3}
 8003dfa:	b507      	push	{r0, r1, r2, lr}
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <iprintf+0x20>)
 8003dfe:	ab04      	add	r3, sp, #16
 8003e00:	6808      	ldr	r0, [r1, #0]
 8003e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e06:	6881      	ldr	r1, [r0, #8]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	f000 fad7 	bl	80043bc <_vfiprintf_r>
 8003e0e:	b003      	add	sp, #12
 8003e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e14:	b004      	add	sp, #16
 8003e16:	4770      	bx	lr
 8003e18:	20000064 	.word	0x20000064

08003e1c <_puts_r>:
 8003e1c:	6a03      	ldr	r3, [r0, #32]
 8003e1e:	b570      	push	{r4, r5, r6, lr}
 8003e20:	6884      	ldr	r4, [r0, #8]
 8003e22:	4605      	mov	r5, r0
 8003e24:	460e      	mov	r6, r1
 8003e26:	b90b      	cbnz	r3, 8003e2c <_puts_r+0x10>
 8003e28:	f7ff ffb0 	bl	8003d8c <__sinit>
 8003e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d405      	bmi.n	8003e3e <_puts_r+0x22>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	0598      	lsls	r0, r3, #22
 8003e36:	d402      	bmi.n	8003e3e <_puts_r+0x22>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f000 f99b 	bl	8004174 <__retarget_lock_acquire_recursive>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	0719      	lsls	r1, r3, #28
 8003e42:	d513      	bpl.n	8003e6c <_puts_r+0x50>
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	b18b      	cbz	r3, 8003e6c <_puts_r+0x50>
 8003e48:	3e01      	subs	r6, #1
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	b9e9      	cbnz	r1, 8003e92 <_puts_r+0x76>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da2e      	bge.n	8003eb8 <_puts_r+0x9c>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	210a      	movs	r1, #10
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 f87b 	bl	8003f5a <__swbuf_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d007      	beq.n	8003e78 <_puts_r+0x5c>
 8003e68:	250a      	movs	r5, #10
 8003e6a:	e007      	b.n	8003e7c <_puts_r+0x60>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f8b0 	bl	8003fd4 <__swsetup_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0e7      	beq.n	8003e48 <_puts_r+0x2c>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295
 8003e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d405      	bmi.n	8003e8e <_puts_r+0x72>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_puts_r+0x72>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f000 f974 	bl	8004176 <__retarget_lock_release_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da04      	bge.n	8003ea0 <_puts_r+0x84>
 8003e96:	69a2      	ldr	r2, [r4, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dc06      	bgt.n	8003eaa <_puts_r+0x8e>
 8003e9c:	290a      	cmp	r1, #10
 8003e9e:	d004      	beq.n	8003eaa <_puts_r+0x8e>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	e7cf      	b.n	8003e4a <_puts_r+0x2e>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f854 	bl	8003f5a <__swbuf_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d1c9      	bne.n	8003e4a <_puts_r+0x2e>
 8003eb6:	e7df      	b.n	8003e78 <_puts_r+0x5c>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	250a      	movs	r5, #10
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	701d      	strb	r5, [r3, #0]
 8003ec2:	e7db      	b.n	8003e7c <_puts_r+0x60>

08003ec4 <puts>:
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <puts+0xc>)
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f7ff bfa7 	b.w	8003e1c <_puts_r>
 8003ece:	bf00      	nop
 8003ed0:	20000064 	.word	0x20000064

08003ed4 <__sread>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003edc:	f000 f8fc 	bl	80040d8 <_read_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	bfab      	itete	ge
 8003ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee8:	181b      	addge	r3, r3, r0
 8003eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eee:	bfac      	ite	ge
 8003ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ef2:	81a3      	strhlt	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__swrite>:
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	05db      	lsls	r3, r3, #23
 8003f00:	4605      	mov	r5, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1e>
 8003f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f000 f8d0 	bl	80040b4 <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	4632      	mov	r2, r6
 8003f22:	463b      	mov	r3, r7
 8003f24:	4628      	mov	r0, r5
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 b8e7 	b.w	80040fc <_write_r>

08003f2e <__sseek>:
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f36:	f000 f8bd 	bl	80040b4 <_lseek_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	bf15      	itete	ne
 8003f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f4a:	81a3      	strheq	r3, [r4, #12]
 8003f4c:	bf18      	it	ne
 8003f4e:	81a3      	strhne	r3, [r4, #12]
 8003f50:	bd10      	pop	{r4, pc}

08003f52 <__sclose>:
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 b89d 	b.w	8004094 <_close_r>

08003f5a <__swbuf_r>:
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	460e      	mov	r6, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	4605      	mov	r5, r0
 8003f62:	b118      	cbz	r0, 8003f6c <__swbuf_r+0x12>
 8003f64:	6a03      	ldr	r3, [r0, #32]
 8003f66:	b90b      	cbnz	r3, 8003f6c <__swbuf_r+0x12>
 8003f68:	f7ff ff10 	bl	8003d8c <__sinit>
 8003f6c:	69a3      	ldr	r3, [r4, #24]
 8003f6e:	60a3      	str	r3, [r4, #8]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	071a      	lsls	r2, r3, #28
 8003f74:	d525      	bpl.n	8003fc2 <__swbuf_r+0x68>
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	b31b      	cbz	r3, 8003fc2 <__swbuf_r+0x68>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	1a98      	subs	r0, r3, r2
 8003f80:	6963      	ldr	r3, [r4, #20]
 8003f82:	b2f6      	uxtb	r6, r6
 8003f84:	4283      	cmp	r3, r0
 8003f86:	4637      	mov	r7, r6
 8003f88:	dc04      	bgt.n	8003f94 <__swbuf_r+0x3a>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 fd45 	bl	8004a1c <_fflush_r>
 8003f92:	b9e0      	cbnz	r0, 8003fce <__swbuf_r+0x74>
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	701e      	strb	r6, [r3, #0]
 8003fa2:	6962      	ldr	r2, [r4, #20]
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d004      	beq.n	8003fb4 <__swbuf_r+0x5a>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	07db      	lsls	r3, r3, #31
 8003fae:	d506      	bpl.n	8003fbe <__swbuf_r+0x64>
 8003fb0:	2e0a      	cmp	r6, #10
 8003fb2:	d104      	bne.n	8003fbe <__swbuf_r+0x64>
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 fd30 	bl	8004a1c <_fflush_r>
 8003fbc:	b938      	cbnz	r0, 8003fce <__swbuf_r+0x74>
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 f805 	bl	8003fd4 <__swsetup_r>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d0d5      	beq.n	8003f7a <__swbuf_r+0x20>
 8003fce:	f04f 37ff 	mov.w	r7, #4294967295
 8003fd2:	e7f4      	b.n	8003fbe <__swbuf_r+0x64>

08003fd4 <__swsetup_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <__swsetup_r+0xac>)
 8003fd8:	4605      	mov	r5, r0
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	460c      	mov	r4, r1
 8003fde:	b118      	cbz	r0, 8003fe8 <__swsetup_r+0x14>
 8003fe0:	6a03      	ldr	r3, [r0, #32]
 8003fe2:	b90b      	cbnz	r3, 8003fe8 <__swsetup_r+0x14>
 8003fe4:	f7ff fed2 	bl	8003d8c <__sinit>
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fee:	0718      	lsls	r0, r3, #28
 8003ff0:	d422      	bmi.n	8004038 <__swsetup_r+0x64>
 8003ff2:	06d9      	lsls	r1, r3, #27
 8003ff4:	d407      	bmi.n	8004006 <__swsetup_r+0x32>
 8003ff6:	2309      	movs	r3, #9
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	e034      	b.n	8004070 <__swsetup_r+0x9c>
 8004006:	0758      	lsls	r0, r3, #29
 8004008:	d512      	bpl.n	8004030 <__swsetup_r+0x5c>
 800400a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800400c:	b141      	cbz	r1, 8004020 <__swsetup_r+0x4c>
 800400e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004012:	4299      	cmp	r1, r3
 8004014:	d002      	beq.n	800401c <__swsetup_r+0x48>
 8004016:	4628      	mov	r0, r5
 8004018:	f000 f8ae 	bl	8004178 <_free_r>
 800401c:	2300      	movs	r3, #0
 800401e:	6363      	str	r3, [r4, #52]	; 0x34
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	2300      	movs	r3, #0
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	b94b      	cbnz	r3, 8004050 <__swsetup_r+0x7c>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004046:	d003      	beq.n	8004050 <__swsetup_r+0x7c>
 8004048:	4621      	mov	r1, r4
 800404a:	4628      	mov	r0, r5
 800404c:	f000 fd34 	bl	8004ab8 <__smakebuf_r>
 8004050:	89a0      	ldrh	r0, [r4, #12]
 8004052:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004056:	f010 0301 	ands.w	r3, r0, #1
 800405a:	d00a      	beq.n	8004072 <__swsetup_r+0x9e>
 800405c:	2300      	movs	r3, #0
 800405e:	60a3      	str	r3, [r4, #8]
 8004060:	6963      	ldr	r3, [r4, #20]
 8004062:	425b      	negs	r3, r3
 8004064:	61a3      	str	r3, [r4, #24]
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	b943      	cbnz	r3, 800407c <__swsetup_r+0xa8>
 800406a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800406e:	d1c4      	bne.n	8003ffa <__swsetup_r+0x26>
 8004070:	bd38      	pop	{r3, r4, r5, pc}
 8004072:	0781      	lsls	r1, r0, #30
 8004074:	bf58      	it	pl
 8004076:	6963      	ldrpl	r3, [r4, #20]
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	e7f4      	b.n	8004066 <__swsetup_r+0x92>
 800407c:	2000      	movs	r0, #0
 800407e:	e7f7      	b.n	8004070 <__swsetup_r+0x9c>
 8004080:	20000064 	.word	0x20000064

08004084 <memset>:
 8004084:	4402      	add	r2, r0
 8004086:	4603      	mov	r3, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <_close_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d06      	ldr	r5, [pc, #24]	; (80040b0 <_close_r+0x1c>)
 8004098:	2300      	movs	r3, #0
 800409a:	4604      	mov	r4, r0
 800409c:	4608      	mov	r0, r1
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	f7fd f901 	bl	80012a6 <_close>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_close_r+0x1a>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_close_r+0x1a>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	20000998 	.word	0x20000998

080040b4 <_lseek_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4d07      	ldr	r5, [pc, #28]	; (80040d4 <_lseek_r+0x20>)
 80040b8:	4604      	mov	r4, r0
 80040ba:	4608      	mov	r0, r1
 80040bc:	4611      	mov	r1, r2
 80040be:	2200      	movs	r2, #0
 80040c0:	602a      	str	r2, [r5, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f7fd f916 	bl	80012f4 <_lseek>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_lseek_r+0x1e>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_lseek_r+0x1e>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000998 	.word	0x20000998

080040d8 <_read_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_read_r+0x20>)
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fd f8a4 	bl	8001234 <_read>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_read_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_read_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000998 	.word	0x20000998

080040fc <_write_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d07      	ldr	r5, [pc, #28]	; (800411c <_write_r+0x20>)
 8004100:	4604      	mov	r4, r0
 8004102:	4608      	mov	r0, r1
 8004104:	4611      	mov	r1, r2
 8004106:	2200      	movs	r2, #0
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fd f8af 	bl	800126e <_write>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_write_r+0x1e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_write_r+0x1e>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	20000998 	.word	0x20000998

08004120 <__errno>:
 8004120:	4b01      	ldr	r3, [pc, #4]	; (8004128 <__errno+0x8>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000064 	.word	0x20000064

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	4d0d      	ldr	r5, [pc, #52]	; (8004164 <__libc_init_array+0x38>)
 8004130:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004132:	1b64      	subs	r4, r4, r5
 8004134:	10a4      	asrs	r4, r4, #2
 8004136:	2600      	movs	r6, #0
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	4d0b      	ldr	r5, [pc, #44]	; (800416c <__libc_init_array+0x40>)
 800413e:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <__libc_init_array+0x44>)
 8004140:	f000 fd28 	bl	8004b94 <_init>
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	2600      	movs	r6, #0
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	f855 3b04 	ldr.w	r3, [r5], #4
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	f855 3b04 	ldr.w	r3, [r5], #4
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	08004cec 	.word	0x08004cec
 8004168:	08004cec 	.word	0x08004cec
 800416c:	08004cec 	.word	0x08004cec
 8004170:	08004cf0 	.word	0x08004cf0

08004174 <__retarget_lock_acquire_recursive>:
 8004174:	4770      	bx	lr

08004176 <__retarget_lock_release_recursive>:
 8004176:	4770      	bx	lr

08004178 <_free_r>:
 8004178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800417a:	2900      	cmp	r1, #0
 800417c:	d044      	beq.n	8004208 <_free_r+0x90>
 800417e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004182:	9001      	str	r0, [sp, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	f1a1 0404 	sub.w	r4, r1, #4
 800418a:	bfb8      	it	lt
 800418c:	18e4      	addlt	r4, r4, r3
 800418e:	f000 f8df 	bl	8004350 <__malloc_lock>
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <_free_r+0x94>)
 8004194:	9801      	ldr	r0, [sp, #4]
 8004196:	6813      	ldr	r3, [r2, #0]
 8004198:	b933      	cbnz	r3, 80041a8 <_free_r+0x30>
 800419a:	6063      	str	r3, [r4, #4]
 800419c:	6014      	str	r4, [r2, #0]
 800419e:	b003      	add	sp, #12
 80041a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041a4:	f000 b8da 	b.w	800435c <__malloc_unlock>
 80041a8:	42a3      	cmp	r3, r4
 80041aa:	d908      	bls.n	80041be <_free_r+0x46>
 80041ac:	6825      	ldr	r5, [r4, #0]
 80041ae:	1961      	adds	r1, r4, r5
 80041b0:	428b      	cmp	r3, r1
 80041b2:	bf01      	itttt	eq
 80041b4:	6819      	ldreq	r1, [r3, #0]
 80041b6:	685b      	ldreq	r3, [r3, #4]
 80041b8:	1949      	addeq	r1, r1, r5
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	e7ed      	b.n	800419a <_free_r+0x22>
 80041be:	461a      	mov	r2, r3
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b10b      	cbz	r3, 80041c8 <_free_r+0x50>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d9fa      	bls.n	80041be <_free_r+0x46>
 80041c8:	6811      	ldr	r1, [r2, #0]
 80041ca:	1855      	adds	r5, r2, r1
 80041cc:	42a5      	cmp	r5, r4
 80041ce:	d10b      	bne.n	80041e8 <_free_r+0x70>
 80041d0:	6824      	ldr	r4, [r4, #0]
 80041d2:	4421      	add	r1, r4
 80041d4:	1854      	adds	r4, r2, r1
 80041d6:	42a3      	cmp	r3, r4
 80041d8:	6011      	str	r1, [r2, #0]
 80041da:	d1e0      	bne.n	800419e <_free_r+0x26>
 80041dc:	681c      	ldr	r4, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	6053      	str	r3, [r2, #4]
 80041e2:	440c      	add	r4, r1
 80041e4:	6014      	str	r4, [r2, #0]
 80041e6:	e7da      	b.n	800419e <_free_r+0x26>
 80041e8:	d902      	bls.n	80041f0 <_free_r+0x78>
 80041ea:	230c      	movs	r3, #12
 80041ec:	6003      	str	r3, [r0, #0]
 80041ee:	e7d6      	b.n	800419e <_free_r+0x26>
 80041f0:	6825      	ldr	r5, [r4, #0]
 80041f2:	1961      	adds	r1, r4, r5
 80041f4:	428b      	cmp	r3, r1
 80041f6:	bf04      	itt	eq
 80041f8:	6819      	ldreq	r1, [r3, #0]
 80041fa:	685b      	ldreq	r3, [r3, #4]
 80041fc:	6063      	str	r3, [r4, #4]
 80041fe:	bf04      	itt	eq
 8004200:	1949      	addeq	r1, r1, r5
 8004202:	6021      	streq	r1, [r4, #0]
 8004204:	6054      	str	r4, [r2, #4]
 8004206:	e7ca      	b.n	800419e <_free_r+0x26>
 8004208:	b003      	add	sp, #12
 800420a:	bd30      	pop	{r4, r5, pc}
 800420c:	200009a0 	.word	0x200009a0

08004210 <sbrk_aligned>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	4e0e      	ldr	r6, [pc, #56]	; (800424c <sbrk_aligned+0x3c>)
 8004214:	460c      	mov	r4, r1
 8004216:	6831      	ldr	r1, [r6, #0]
 8004218:	4605      	mov	r5, r0
 800421a:	b911      	cbnz	r1, 8004222 <sbrk_aligned+0x12>
 800421c:	f000 fcaa 	bl	8004b74 <_sbrk_r>
 8004220:	6030      	str	r0, [r6, #0]
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f000 fca5 	bl	8004b74 <_sbrk_r>
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d00a      	beq.n	8004244 <sbrk_aligned+0x34>
 800422e:	1cc4      	adds	r4, r0, #3
 8004230:	f024 0403 	bic.w	r4, r4, #3
 8004234:	42a0      	cmp	r0, r4
 8004236:	d007      	beq.n	8004248 <sbrk_aligned+0x38>
 8004238:	1a21      	subs	r1, r4, r0
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fc9a 	bl	8004b74 <_sbrk_r>
 8004240:	3001      	adds	r0, #1
 8004242:	d101      	bne.n	8004248 <sbrk_aligned+0x38>
 8004244:	f04f 34ff 	mov.w	r4, #4294967295
 8004248:	4620      	mov	r0, r4
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	200009a4 	.word	0x200009a4

08004250 <_malloc_r>:
 8004250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004254:	1ccd      	adds	r5, r1, #3
 8004256:	f025 0503 	bic.w	r5, r5, #3
 800425a:	3508      	adds	r5, #8
 800425c:	2d0c      	cmp	r5, #12
 800425e:	bf38      	it	cc
 8004260:	250c      	movcc	r5, #12
 8004262:	2d00      	cmp	r5, #0
 8004264:	4607      	mov	r7, r0
 8004266:	db01      	blt.n	800426c <_malloc_r+0x1c>
 8004268:	42a9      	cmp	r1, r5
 800426a:	d905      	bls.n	8004278 <_malloc_r+0x28>
 800426c:	230c      	movs	r3, #12
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	2600      	movs	r6, #0
 8004272:	4630      	mov	r0, r6
 8004274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004278:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800434c <_malloc_r+0xfc>
 800427c:	f000 f868 	bl	8004350 <__malloc_lock>
 8004280:	f8d8 3000 	ldr.w	r3, [r8]
 8004284:	461c      	mov	r4, r3
 8004286:	bb5c      	cbnz	r4, 80042e0 <_malloc_r+0x90>
 8004288:	4629      	mov	r1, r5
 800428a:	4638      	mov	r0, r7
 800428c:	f7ff ffc0 	bl	8004210 <sbrk_aligned>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	4604      	mov	r4, r0
 8004294:	d155      	bne.n	8004342 <_malloc_r+0xf2>
 8004296:	f8d8 4000 	ldr.w	r4, [r8]
 800429a:	4626      	mov	r6, r4
 800429c:	2e00      	cmp	r6, #0
 800429e:	d145      	bne.n	800432c <_malloc_r+0xdc>
 80042a0:	2c00      	cmp	r4, #0
 80042a2:	d048      	beq.n	8004336 <_malloc_r+0xe6>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	4631      	mov	r1, r6
 80042a8:	4638      	mov	r0, r7
 80042aa:	eb04 0903 	add.w	r9, r4, r3
 80042ae:	f000 fc61 	bl	8004b74 <_sbrk_r>
 80042b2:	4581      	cmp	r9, r0
 80042b4:	d13f      	bne.n	8004336 <_malloc_r+0xe6>
 80042b6:	6821      	ldr	r1, [r4, #0]
 80042b8:	1a6d      	subs	r5, r5, r1
 80042ba:	4629      	mov	r1, r5
 80042bc:	4638      	mov	r0, r7
 80042be:	f7ff ffa7 	bl	8004210 <sbrk_aligned>
 80042c2:	3001      	adds	r0, #1
 80042c4:	d037      	beq.n	8004336 <_malloc_r+0xe6>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	442b      	add	r3, r5
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	f8d8 3000 	ldr.w	r3, [r8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d038      	beq.n	8004346 <_malloc_r+0xf6>
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	42a2      	cmp	r2, r4
 80042d8:	d12b      	bne.n	8004332 <_malloc_r+0xe2>
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e00f      	b.n	8004300 <_malloc_r+0xb0>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	1b52      	subs	r2, r2, r5
 80042e4:	d41f      	bmi.n	8004326 <_malloc_r+0xd6>
 80042e6:	2a0b      	cmp	r2, #11
 80042e8:	d917      	bls.n	800431a <_malloc_r+0xca>
 80042ea:	1961      	adds	r1, r4, r5
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	6025      	str	r5, [r4, #0]
 80042f0:	bf18      	it	ne
 80042f2:	6059      	strne	r1, [r3, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	bf08      	it	eq
 80042f8:	f8c8 1000 	streq.w	r1, [r8]
 80042fc:	5162      	str	r2, [r4, r5]
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	4638      	mov	r0, r7
 8004302:	f104 060b 	add.w	r6, r4, #11
 8004306:	f000 f829 	bl	800435c <__malloc_unlock>
 800430a:	f026 0607 	bic.w	r6, r6, #7
 800430e:	1d23      	adds	r3, r4, #4
 8004310:	1af2      	subs	r2, r6, r3
 8004312:	d0ae      	beq.n	8004272 <_malloc_r+0x22>
 8004314:	1b9b      	subs	r3, r3, r6
 8004316:	50a3      	str	r3, [r4, r2]
 8004318:	e7ab      	b.n	8004272 <_malloc_r+0x22>
 800431a:	42a3      	cmp	r3, r4
 800431c:	6862      	ldr	r2, [r4, #4]
 800431e:	d1dd      	bne.n	80042dc <_malloc_r+0x8c>
 8004320:	f8c8 2000 	str.w	r2, [r8]
 8004324:	e7ec      	b.n	8004300 <_malloc_r+0xb0>
 8004326:	4623      	mov	r3, r4
 8004328:	6864      	ldr	r4, [r4, #4]
 800432a:	e7ac      	b.n	8004286 <_malloc_r+0x36>
 800432c:	4634      	mov	r4, r6
 800432e:	6876      	ldr	r6, [r6, #4]
 8004330:	e7b4      	b.n	800429c <_malloc_r+0x4c>
 8004332:	4613      	mov	r3, r2
 8004334:	e7cc      	b.n	80042d0 <_malloc_r+0x80>
 8004336:	230c      	movs	r3, #12
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4638      	mov	r0, r7
 800433c:	f000 f80e 	bl	800435c <__malloc_unlock>
 8004340:	e797      	b.n	8004272 <_malloc_r+0x22>
 8004342:	6025      	str	r5, [r4, #0]
 8004344:	e7dc      	b.n	8004300 <_malloc_r+0xb0>
 8004346:	605b      	str	r3, [r3, #4]
 8004348:	deff      	udf	#255	; 0xff
 800434a:	bf00      	nop
 800434c:	200009a0 	.word	0x200009a0

08004350 <__malloc_lock>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__malloc_lock+0x8>)
 8004352:	f7ff bf0f 	b.w	8004174 <__retarget_lock_acquire_recursive>
 8004356:	bf00      	nop
 8004358:	2000099c 	.word	0x2000099c

0800435c <__malloc_unlock>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__malloc_unlock+0x8>)
 800435e:	f7ff bf0a 	b.w	8004176 <__retarget_lock_release_recursive>
 8004362:	bf00      	nop
 8004364:	2000099c 	.word	0x2000099c

08004368 <__sfputc_r>:
 8004368:	6893      	ldr	r3, [r2, #8]
 800436a:	3b01      	subs	r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	b410      	push	{r4}
 8004370:	6093      	str	r3, [r2, #8]
 8004372:	da08      	bge.n	8004386 <__sfputc_r+0x1e>
 8004374:	6994      	ldr	r4, [r2, #24]
 8004376:	42a3      	cmp	r3, r4
 8004378:	db01      	blt.n	800437e <__sfputc_r+0x16>
 800437a:	290a      	cmp	r1, #10
 800437c:	d103      	bne.n	8004386 <__sfputc_r+0x1e>
 800437e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004382:	f7ff bdea 	b.w	8003f5a <__swbuf_r>
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	1c58      	adds	r0, r3, #1
 800438a:	6010      	str	r0, [r2, #0]
 800438c:	7019      	strb	r1, [r3, #0]
 800438e:	4608      	mov	r0, r1
 8004390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004394:	4770      	bx	lr

08004396 <__sfputs_r>:
 8004396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004398:	4606      	mov	r6, r0
 800439a:	460f      	mov	r7, r1
 800439c:	4614      	mov	r4, r2
 800439e:	18d5      	adds	r5, r2, r3
 80043a0:	42ac      	cmp	r4, r5
 80043a2:	d101      	bne.n	80043a8 <__sfputs_r+0x12>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e007      	b.n	80043b8 <__sfputs_r+0x22>
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	463a      	mov	r2, r7
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7ff ffda 	bl	8004368 <__sfputc_r>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d1f3      	bne.n	80043a0 <__sfputs_r+0xa>
 80043b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043bc <_vfiprintf_r>:
 80043bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	460d      	mov	r5, r1
 80043c2:	b09d      	sub	sp, #116	; 0x74
 80043c4:	4614      	mov	r4, r2
 80043c6:	4698      	mov	r8, r3
 80043c8:	4606      	mov	r6, r0
 80043ca:	b118      	cbz	r0, 80043d4 <_vfiprintf_r+0x18>
 80043cc:	6a03      	ldr	r3, [r0, #32]
 80043ce:	b90b      	cbnz	r3, 80043d4 <_vfiprintf_r+0x18>
 80043d0:	f7ff fcdc 	bl	8003d8c <__sinit>
 80043d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043d6:	07d9      	lsls	r1, r3, #31
 80043d8:	d405      	bmi.n	80043e6 <_vfiprintf_r+0x2a>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	059a      	lsls	r2, r3, #22
 80043de:	d402      	bmi.n	80043e6 <_vfiprintf_r+0x2a>
 80043e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043e2:	f7ff fec7 	bl	8004174 <__retarget_lock_acquire_recursive>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	d501      	bpl.n	80043f0 <_vfiprintf_r+0x34>
 80043ec:	692b      	ldr	r3, [r5, #16]
 80043ee:	b99b      	cbnz	r3, 8004418 <_vfiprintf_r+0x5c>
 80043f0:	4629      	mov	r1, r5
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7ff fdee 	bl	8003fd4 <__swsetup_r>
 80043f8:	b170      	cbz	r0, 8004418 <_vfiprintf_r+0x5c>
 80043fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043fc:	07dc      	lsls	r4, r3, #31
 80043fe:	d504      	bpl.n	800440a <_vfiprintf_r+0x4e>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	b01d      	add	sp, #116	; 0x74
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	0598      	lsls	r0, r3, #22
 800440e:	d4f7      	bmi.n	8004400 <_vfiprintf_r+0x44>
 8004410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004412:	f7ff feb0 	bl	8004176 <__retarget_lock_release_recursive>
 8004416:	e7f3      	b.n	8004400 <_vfiprintf_r+0x44>
 8004418:	2300      	movs	r3, #0
 800441a:	9309      	str	r3, [sp, #36]	; 0x24
 800441c:	2320      	movs	r3, #32
 800441e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004422:	f8cd 800c 	str.w	r8, [sp, #12]
 8004426:	2330      	movs	r3, #48	; 0x30
 8004428:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80045dc <_vfiprintf_r+0x220>
 800442c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004430:	f04f 0901 	mov.w	r9, #1
 8004434:	4623      	mov	r3, r4
 8004436:	469a      	mov	sl, r3
 8004438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800443c:	b10a      	cbz	r2, 8004442 <_vfiprintf_r+0x86>
 800443e:	2a25      	cmp	r2, #37	; 0x25
 8004440:	d1f9      	bne.n	8004436 <_vfiprintf_r+0x7a>
 8004442:	ebba 0b04 	subs.w	fp, sl, r4
 8004446:	d00b      	beq.n	8004460 <_vfiprintf_r+0xa4>
 8004448:	465b      	mov	r3, fp
 800444a:	4622      	mov	r2, r4
 800444c:	4629      	mov	r1, r5
 800444e:	4630      	mov	r0, r6
 8004450:	f7ff ffa1 	bl	8004396 <__sfputs_r>
 8004454:	3001      	adds	r0, #1
 8004456:	f000 80a9 	beq.w	80045ac <_vfiprintf_r+0x1f0>
 800445a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800445c:	445a      	add	r2, fp
 800445e:	9209      	str	r2, [sp, #36]	; 0x24
 8004460:	f89a 3000 	ldrb.w	r3, [sl]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a1 	beq.w	80045ac <_vfiprintf_r+0x1f0>
 800446a:	2300      	movs	r3, #0
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004474:	f10a 0a01 	add.w	sl, sl, #1
 8004478:	9304      	str	r3, [sp, #16]
 800447a:	9307      	str	r3, [sp, #28]
 800447c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004480:	931a      	str	r3, [sp, #104]	; 0x68
 8004482:	4654      	mov	r4, sl
 8004484:	2205      	movs	r2, #5
 8004486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448a:	4854      	ldr	r0, [pc, #336]	; (80045dc <_vfiprintf_r+0x220>)
 800448c:	f7fb feb0 	bl	80001f0 <memchr>
 8004490:	9a04      	ldr	r2, [sp, #16]
 8004492:	b9d8      	cbnz	r0, 80044cc <_vfiprintf_r+0x110>
 8004494:	06d1      	lsls	r1, r2, #27
 8004496:	bf44      	itt	mi
 8004498:	2320      	movmi	r3, #32
 800449a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800449e:	0713      	lsls	r3, r2, #28
 80044a0:	bf44      	itt	mi
 80044a2:	232b      	movmi	r3, #43	; 0x2b
 80044a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044a8:	f89a 3000 	ldrb.w	r3, [sl]
 80044ac:	2b2a      	cmp	r3, #42	; 0x2a
 80044ae:	d015      	beq.n	80044dc <_vfiprintf_r+0x120>
 80044b0:	9a07      	ldr	r2, [sp, #28]
 80044b2:	4654      	mov	r4, sl
 80044b4:	2000      	movs	r0, #0
 80044b6:	f04f 0c0a 	mov.w	ip, #10
 80044ba:	4621      	mov	r1, r4
 80044bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044c0:	3b30      	subs	r3, #48	; 0x30
 80044c2:	2b09      	cmp	r3, #9
 80044c4:	d94d      	bls.n	8004562 <_vfiprintf_r+0x1a6>
 80044c6:	b1b0      	cbz	r0, 80044f6 <_vfiprintf_r+0x13a>
 80044c8:	9207      	str	r2, [sp, #28]
 80044ca:	e014      	b.n	80044f6 <_vfiprintf_r+0x13a>
 80044cc:	eba0 0308 	sub.w	r3, r0, r8
 80044d0:	fa09 f303 	lsl.w	r3, r9, r3
 80044d4:	4313      	orrs	r3, r2
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	46a2      	mov	sl, r4
 80044da:	e7d2      	b.n	8004482 <_vfiprintf_r+0xc6>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	1d19      	adds	r1, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	9103      	str	r1, [sp, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bfbb      	ittet	lt
 80044e8:	425b      	neglt	r3, r3
 80044ea:	f042 0202 	orrlt.w	r2, r2, #2
 80044ee:	9307      	strge	r3, [sp, #28]
 80044f0:	9307      	strlt	r3, [sp, #28]
 80044f2:	bfb8      	it	lt
 80044f4:	9204      	strlt	r2, [sp, #16]
 80044f6:	7823      	ldrb	r3, [r4, #0]
 80044f8:	2b2e      	cmp	r3, #46	; 0x2e
 80044fa:	d10c      	bne.n	8004516 <_vfiprintf_r+0x15a>
 80044fc:	7863      	ldrb	r3, [r4, #1]
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	d134      	bne.n	800456c <_vfiprintf_r+0x1b0>
 8004502:	9b03      	ldr	r3, [sp, #12]
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	9203      	str	r2, [sp, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	bfb8      	it	lt
 800450e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004512:	3402      	adds	r4, #2
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80045ec <_vfiprintf_r+0x230>
 800451a:	7821      	ldrb	r1, [r4, #0]
 800451c:	2203      	movs	r2, #3
 800451e:	4650      	mov	r0, sl
 8004520:	f7fb fe66 	bl	80001f0 <memchr>
 8004524:	b138      	cbz	r0, 8004536 <_vfiprintf_r+0x17a>
 8004526:	9b04      	ldr	r3, [sp, #16]
 8004528:	eba0 000a 	sub.w	r0, r0, sl
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	4082      	lsls	r2, r0
 8004530:	4313      	orrs	r3, r2
 8004532:	3401      	adds	r4, #1
 8004534:	9304      	str	r3, [sp, #16]
 8004536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453a:	4829      	ldr	r0, [pc, #164]	; (80045e0 <_vfiprintf_r+0x224>)
 800453c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004540:	2206      	movs	r2, #6
 8004542:	f7fb fe55 	bl	80001f0 <memchr>
 8004546:	2800      	cmp	r0, #0
 8004548:	d03f      	beq.n	80045ca <_vfiprintf_r+0x20e>
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <_vfiprintf_r+0x228>)
 800454c:	bb1b      	cbnz	r3, 8004596 <_vfiprintf_r+0x1da>
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	3307      	adds	r3, #7
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	3308      	adds	r3, #8
 8004558:	9303      	str	r3, [sp, #12]
 800455a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800455c:	443b      	add	r3, r7
 800455e:	9309      	str	r3, [sp, #36]	; 0x24
 8004560:	e768      	b.n	8004434 <_vfiprintf_r+0x78>
 8004562:	fb0c 3202 	mla	r2, ip, r2, r3
 8004566:	460c      	mov	r4, r1
 8004568:	2001      	movs	r0, #1
 800456a:	e7a6      	b.n	80044ba <_vfiprintf_r+0xfe>
 800456c:	2300      	movs	r3, #0
 800456e:	3401      	adds	r4, #1
 8004570:	9305      	str	r3, [sp, #20]
 8004572:	4619      	mov	r1, r3
 8004574:	f04f 0c0a 	mov.w	ip, #10
 8004578:	4620      	mov	r0, r4
 800457a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800457e:	3a30      	subs	r2, #48	; 0x30
 8004580:	2a09      	cmp	r2, #9
 8004582:	d903      	bls.n	800458c <_vfiprintf_r+0x1d0>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0c6      	beq.n	8004516 <_vfiprintf_r+0x15a>
 8004588:	9105      	str	r1, [sp, #20]
 800458a:	e7c4      	b.n	8004516 <_vfiprintf_r+0x15a>
 800458c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004590:	4604      	mov	r4, r0
 8004592:	2301      	movs	r3, #1
 8004594:	e7f0      	b.n	8004578 <_vfiprintf_r+0x1bc>
 8004596:	ab03      	add	r3, sp, #12
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	462a      	mov	r2, r5
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <_vfiprintf_r+0x22c>)
 800459e:	a904      	add	r1, sp, #16
 80045a0:	4630      	mov	r0, r6
 80045a2:	f3af 8000 	nop.w
 80045a6:	4607      	mov	r7, r0
 80045a8:	1c78      	adds	r0, r7, #1
 80045aa:	d1d6      	bne.n	800455a <_vfiprintf_r+0x19e>
 80045ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ae:	07d9      	lsls	r1, r3, #31
 80045b0:	d405      	bmi.n	80045be <_vfiprintf_r+0x202>
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	059a      	lsls	r2, r3, #22
 80045b6:	d402      	bmi.n	80045be <_vfiprintf_r+0x202>
 80045b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ba:	f7ff fddc 	bl	8004176 <__retarget_lock_release_recursive>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	065b      	lsls	r3, r3, #25
 80045c2:	f53f af1d 	bmi.w	8004400 <_vfiprintf_r+0x44>
 80045c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c8:	e71c      	b.n	8004404 <_vfiprintf_r+0x48>
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	462a      	mov	r2, r5
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <_vfiprintf_r+0x22c>)
 80045d2:	a904      	add	r1, sp, #16
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 f879 	bl	80046cc <_printf_i>
 80045da:	e7e4      	b.n	80045a6 <_vfiprintf_r+0x1ea>
 80045dc:	08004cb0 	.word	0x08004cb0
 80045e0:	08004cba 	.word	0x08004cba
 80045e4:	00000000 	.word	0x00000000
 80045e8:	08004397 	.word	0x08004397
 80045ec:	08004cb6 	.word	0x08004cb6

080045f0 <_printf_common>:
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	4616      	mov	r6, r2
 80045f6:	4699      	mov	r9, r3
 80045f8:	688a      	ldr	r2, [r1, #8]
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004600:	4293      	cmp	r3, r2
 8004602:	bfb8      	it	lt
 8004604:	4613      	movlt	r3, r2
 8004606:	6033      	str	r3, [r6, #0]
 8004608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460c:	4607      	mov	r7, r0
 800460e:	460c      	mov	r4, r1
 8004610:	b10a      	cbz	r2, 8004616 <_printf_common+0x26>
 8004612:	3301      	adds	r3, #1
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	0699      	lsls	r1, r3, #26
 800461a:	bf42      	ittt	mi
 800461c:	6833      	ldrmi	r3, [r6, #0]
 800461e:	3302      	addmi	r3, #2
 8004620:	6033      	strmi	r3, [r6, #0]
 8004622:	6825      	ldr	r5, [r4, #0]
 8004624:	f015 0506 	ands.w	r5, r5, #6
 8004628:	d106      	bne.n	8004638 <_printf_common+0x48>
 800462a:	f104 0a19 	add.w	sl, r4, #25
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	6832      	ldr	r2, [r6, #0]
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	42ab      	cmp	r3, r5
 8004636:	dc26      	bgt.n	8004686 <_printf_common+0x96>
 8004638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800463c:	1e13      	subs	r3, r2, #0
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	bf18      	it	ne
 8004642:	2301      	movne	r3, #1
 8004644:	0692      	lsls	r2, r2, #26
 8004646:	d42b      	bmi.n	80046a0 <_printf_common+0xb0>
 8004648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800464c:	4649      	mov	r1, r9
 800464e:	4638      	mov	r0, r7
 8004650:	47c0      	blx	r8
 8004652:	3001      	adds	r0, #1
 8004654:	d01e      	beq.n	8004694 <_printf_common+0xa4>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	6922      	ldr	r2, [r4, #16]
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	2b04      	cmp	r3, #4
 8004660:	bf02      	ittt	eq
 8004662:	68e5      	ldreq	r5, [r4, #12]
 8004664:	6833      	ldreq	r3, [r6, #0]
 8004666:	1aed      	subeq	r5, r5, r3
 8004668:	68a3      	ldr	r3, [r4, #8]
 800466a:	bf0c      	ite	eq
 800466c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004670:	2500      	movne	r5, #0
 8004672:	4293      	cmp	r3, r2
 8004674:	bfc4      	itt	gt
 8004676:	1a9b      	subgt	r3, r3, r2
 8004678:	18ed      	addgt	r5, r5, r3
 800467a:	2600      	movs	r6, #0
 800467c:	341a      	adds	r4, #26
 800467e:	42b5      	cmp	r5, r6
 8004680:	d11a      	bne.n	80046b8 <_printf_common+0xc8>
 8004682:	2000      	movs	r0, #0
 8004684:	e008      	b.n	8004698 <_printf_common+0xa8>
 8004686:	2301      	movs	r3, #1
 8004688:	4652      	mov	r2, sl
 800468a:	4649      	mov	r1, r9
 800468c:	4638      	mov	r0, r7
 800468e:	47c0      	blx	r8
 8004690:	3001      	adds	r0, #1
 8004692:	d103      	bne.n	800469c <_printf_common+0xac>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	3501      	adds	r5, #1
 800469e:	e7c6      	b.n	800462e <_printf_common+0x3e>
 80046a0:	18e1      	adds	r1, r4, r3
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	2030      	movs	r0, #48	; 0x30
 80046a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046aa:	4422      	add	r2, r4
 80046ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b4:	3302      	adds	r3, #2
 80046b6:	e7c7      	b.n	8004648 <_printf_common+0x58>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4622      	mov	r2, r4
 80046bc:	4649      	mov	r1, r9
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d0e6      	beq.n	8004694 <_printf_common+0xa4>
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7d9      	b.n	800467e <_printf_common+0x8e>
	...

080046cc <_printf_i>:
 80046cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	7e0f      	ldrb	r7, [r1, #24]
 80046d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046d4:	2f78      	cmp	r7, #120	; 0x78
 80046d6:	4691      	mov	r9, r2
 80046d8:	4680      	mov	r8, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	469a      	mov	sl, r3
 80046de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046e2:	d807      	bhi.n	80046f4 <_printf_i+0x28>
 80046e4:	2f62      	cmp	r7, #98	; 0x62
 80046e6:	d80a      	bhi.n	80046fe <_printf_i+0x32>
 80046e8:	2f00      	cmp	r7, #0
 80046ea:	f000 80d4 	beq.w	8004896 <_printf_i+0x1ca>
 80046ee:	2f58      	cmp	r7, #88	; 0x58
 80046f0:	f000 80c0 	beq.w	8004874 <_printf_i+0x1a8>
 80046f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046fc:	e03a      	b.n	8004774 <_printf_i+0xa8>
 80046fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004702:	2b15      	cmp	r3, #21
 8004704:	d8f6      	bhi.n	80046f4 <_printf_i+0x28>
 8004706:	a101      	add	r1, pc, #4	; (adr r1, 800470c <_printf_i+0x40>)
 8004708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800470c:	08004765 	.word	0x08004765
 8004710:	08004779 	.word	0x08004779
 8004714:	080046f5 	.word	0x080046f5
 8004718:	080046f5 	.word	0x080046f5
 800471c:	080046f5 	.word	0x080046f5
 8004720:	080046f5 	.word	0x080046f5
 8004724:	08004779 	.word	0x08004779
 8004728:	080046f5 	.word	0x080046f5
 800472c:	080046f5 	.word	0x080046f5
 8004730:	080046f5 	.word	0x080046f5
 8004734:	080046f5 	.word	0x080046f5
 8004738:	0800487d 	.word	0x0800487d
 800473c:	080047a5 	.word	0x080047a5
 8004740:	08004837 	.word	0x08004837
 8004744:	080046f5 	.word	0x080046f5
 8004748:	080046f5 	.word	0x080046f5
 800474c:	0800489f 	.word	0x0800489f
 8004750:	080046f5 	.word	0x080046f5
 8004754:	080047a5 	.word	0x080047a5
 8004758:	080046f5 	.word	0x080046f5
 800475c:	080046f5 	.word	0x080046f5
 8004760:	0800483f 	.word	0x0800483f
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	602a      	str	r2, [r5, #0]
 800476c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004774:	2301      	movs	r3, #1
 8004776:	e09f      	b.n	80048b8 <_printf_i+0x1ec>
 8004778:	6820      	ldr	r0, [r4, #0]
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	0607      	lsls	r7, r0, #24
 800477e:	f103 0104 	add.w	r1, r3, #4
 8004782:	6029      	str	r1, [r5, #0]
 8004784:	d501      	bpl.n	800478a <_printf_i+0xbe>
 8004786:	681e      	ldr	r6, [r3, #0]
 8004788:	e003      	b.n	8004792 <_printf_i+0xc6>
 800478a:	0646      	lsls	r6, r0, #25
 800478c:	d5fb      	bpl.n	8004786 <_printf_i+0xba>
 800478e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004792:	2e00      	cmp	r6, #0
 8004794:	da03      	bge.n	800479e <_printf_i+0xd2>
 8004796:	232d      	movs	r3, #45	; 0x2d
 8004798:	4276      	negs	r6, r6
 800479a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479e:	485a      	ldr	r0, [pc, #360]	; (8004908 <_printf_i+0x23c>)
 80047a0:	230a      	movs	r3, #10
 80047a2:	e012      	b.n	80047ca <_printf_i+0xfe>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	6029      	str	r1, [r5, #0]
 80047ac:	0605      	lsls	r5, r0, #24
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0xe8>
 80047b0:	681e      	ldr	r6, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0xee>
 80047b4:	0641      	lsls	r1, r0, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0xe4>
 80047b8:	881e      	ldrh	r6, [r3, #0]
 80047ba:	4853      	ldr	r0, [pc, #332]	; (8004908 <_printf_i+0x23c>)
 80047bc:	2f6f      	cmp	r7, #111	; 0x6f
 80047be:	bf0c      	ite	eq
 80047c0:	2308      	moveq	r3, #8
 80047c2:	230a      	movne	r3, #10
 80047c4:	2100      	movs	r1, #0
 80047c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ca:	6865      	ldr	r5, [r4, #4]
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	bfa2      	ittt	ge
 80047d2:	6821      	ldrge	r1, [r4, #0]
 80047d4:	f021 0104 	bicge.w	r1, r1, #4
 80047d8:	6021      	strge	r1, [r4, #0]
 80047da:	b90e      	cbnz	r6, 80047e0 <_printf_i+0x114>
 80047dc:	2d00      	cmp	r5, #0
 80047de:	d04b      	beq.n	8004878 <_printf_i+0x1ac>
 80047e0:	4615      	mov	r5, r2
 80047e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047e6:	fb03 6711 	mls	r7, r3, r1, r6
 80047ea:	5dc7      	ldrb	r7, [r0, r7]
 80047ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047f0:	4637      	mov	r7, r6
 80047f2:	42bb      	cmp	r3, r7
 80047f4:	460e      	mov	r6, r1
 80047f6:	d9f4      	bls.n	80047e2 <_printf_i+0x116>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10b      	bne.n	8004814 <_printf_i+0x148>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	07de      	lsls	r6, r3, #31
 8004800:	d508      	bpl.n	8004814 <_printf_i+0x148>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	4299      	cmp	r1, r3
 8004808:	bfde      	ittt	le
 800480a:	2330      	movle	r3, #48	; 0x30
 800480c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004810:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004814:	1b52      	subs	r2, r2, r5
 8004816:	6122      	str	r2, [r4, #16]
 8004818:	f8cd a000 	str.w	sl, [sp]
 800481c:	464b      	mov	r3, r9
 800481e:	aa03      	add	r2, sp, #12
 8004820:	4621      	mov	r1, r4
 8004822:	4640      	mov	r0, r8
 8004824:	f7ff fee4 	bl	80045f0 <_printf_common>
 8004828:	3001      	adds	r0, #1
 800482a:	d14a      	bne.n	80048c2 <_printf_i+0x1f6>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b004      	add	sp, #16
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	f043 0320 	orr.w	r3, r3, #32
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	4833      	ldr	r0, [pc, #204]	; (800490c <_printf_i+0x240>)
 8004840:	2778      	movs	r7, #120	; 0x78
 8004842:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	6829      	ldr	r1, [r5, #0]
 800484a:	061f      	lsls	r7, r3, #24
 800484c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004850:	d402      	bmi.n	8004858 <_printf_i+0x18c>
 8004852:	065f      	lsls	r7, r3, #25
 8004854:	bf48      	it	mi
 8004856:	b2b6      	uxthmi	r6, r6
 8004858:	07df      	lsls	r7, r3, #31
 800485a:	bf48      	it	mi
 800485c:	f043 0320 	orrmi.w	r3, r3, #32
 8004860:	6029      	str	r1, [r5, #0]
 8004862:	bf48      	it	mi
 8004864:	6023      	strmi	r3, [r4, #0]
 8004866:	b91e      	cbnz	r6, 8004870 <_printf_i+0x1a4>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	f023 0320 	bic.w	r3, r3, #32
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	2310      	movs	r3, #16
 8004872:	e7a7      	b.n	80047c4 <_printf_i+0xf8>
 8004874:	4824      	ldr	r0, [pc, #144]	; (8004908 <_printf_i+0x23c>)
 8004876:	e7e4      	b.n	8004842 <_printf_i+0x176>
 8004878:	4615      	mov	r5, r2
 800487a:	e7bd      	b.n	80047f8 <_printf_i+0x12c>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	6826      	ldr	r6, [r4, #0]
 8004880:	6961      	ldr	r1, [r4, #20]
 8004882:	1d18      	adds	r0, r3, #4
 8004884:	6028      	str	r0, [r5, #0]
 8004886:	0635      	lsls	r5, r6, #24
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	d501      	bpl.n	8004890 <_printf_i+0x1c4>
 800488c:	6019      	str	r1, [r3, #0]
 800488e:	e002      	b.n	8004896 <_printf_i+0x1ca>
 8004890:	0670      	lsls	r0, r6, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0x1c0>
 8004894:	8019      	strh	r1, [r3, #0]
 8004896:	2300      	movs	r3, #0
 8004898:	6123      	str	r3, [r4, #16]
 800489a:	4615      	mov	r5, r2
 800489c:	e7bc      	b.n	8004818 <_printf_i+0x14c>
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	1d1a      	adds	r2, r3, #4
 80048a2:	602a      	str	r2, [r5, #0]
 80048a4:	681d      	ldr	r5, [r3, #0]
 80048a6:	6862      	ldr	r2, [r4, #4]
 80048a8:	2100      	movs	r1, #0
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7fb fca0 	bl	80001f0 <memchr>
 80048b0:	b108      	cbz	r0, 80048b6 <_printf_i+0x1ea>
 80048b2:	1b40      	subs	r0, r0, r5
 80048b4:	6060      	str	r0, [r4, #4]
 80048b6:	6863      	ldr	r3, [r4, #4]
 80048b8:	6123      	str	r3, [r4, #16]
 80048ba:	2300      	movs	r3, #0
 80048bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c0:	e7aa      	b.n	8004818 <_printf_i+0x14c>
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	462a      	mov	r2, r5
 80048c6:	4649      	mov	r1, r9
 80048c8:	4640      	mov	r0, r8
 80048ca:	47d0      	blx	sl
 80048cc:	3001      	adds	r0, #1
 80048ce:	d0ad      	beq.n	800482c <_printf_i+0x160>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	079b      	lsls	r3, r3, #30
 80048d4:	d413      	bmi.n	80048fe <_printf_i+0x232>
 80048d6:	68e0      	ldr	r0, [r4, #12]
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	4298      	cmp	r0, r3
 80048dc:	bfb8      	it	lt
 80048de:	4618      	movlt	r0, r3
 80048e0:	e7a6      	b.n	8004830 <_printf_i+0x164>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4632      	mov	r2, r6
 80048e6:	4649      	mov	r1, r9
 80048e8:	4640      	mov	r0, r8
 80048ea:	47d0      	blx	sl
 80048ec:	3001      	adds	r0, #1
 80048ee:	d09d      	beq.n	800482c <_printf_i+0x160>
 80048f0:	3501      	adds	r5, #1
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	9903      	ldr	r1, [sp, #12]
 80048f6:	1a5b      	subs	r3, r3, r1
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	dcf2      	bgt.n	80048e2 <_printf_i+0x216>
 80048fc:	e7eb      	b.n	80048d6 <_printf_i+0x20a>
 80048fe:	2500      	movs	r5, #0
 8004900:	f104 0619 	add.w	r6, r4, #25
 8004904:	e7f5      	b.n	80048f2 <_printf_i+0x226>
 8004906:	bf00      	nop
 8004908:	08004cc1 	.word	0x08004cc1
 800490c:	08004cd2 	.word	0x08004cd2

08004910 <__sflush_r>:
 8004910:	898a      	ldrh	r2, [r1, #12]
 8004912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	4605      	mov	r5, r0
 8004918:	0710      	lsls	r0, r2, #28
 800491a:	460c      	mov	r4, r1
 800491c:	d458      	bmi.n	80049d0 <__sflush_r+0xc0>
 800491e:	684b      	ldr	r3, [r1, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	dc05      	bgt.n	8004930 <__sflush_r+0x20>
 8004924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc02      	bgt.n	8004930 <__sflush_r+0x20>
 800492a:	2000      	movs	r0, #0
 800492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004932:	2e00      	cmp	r6, #0
 8004934:	d0f9      	beq.n	800492a <__sflush_r+0x1a>
 8004936:	2300      	movs	r3, #0
 8004938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800493c:	682f      	ldr	r7, [r5, #0]
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	d032      	beq.n	80049aa <__sflush_r+0x9a>
 8004944:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	075a      	lsls	r2, r3, #29
 800494a:	d505      	bpl.n	8004958 <__sflush_r+0x48>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	1ac0      	subs	r0, r0, r3
 8004950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004952:	b10b      	cbz	r3, 8004958 <__sflush_r+0x48>
 8004954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004956:	1ac0      	subs	r0, r0, r3
 8004958:	2300      	movs	r3, #0
 800495a:	4602      	mov	r2, r0
 800495c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	4628      	mov	r0, r5
 8004962:	47b0      	blx	r6
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	d106      	bne.n	8004978 <__sflush_r+0x68>
 800496a:	6829      	ldr	r1, [r5, #0]
 800496c:	291d      	cmp	r1, #29
 800496e:	d82b      	bhi.n	80049c8 <__sflush_r+0xb8>
 8004970:	4a29      	ldr	r2, [pc, #164]	; (8004a18 <__sflush_r+0x108>)
 8004972:	410a      	asrs	r2, r1
 8004974:	07d6      	lsls	r6, r2, #31
 8004976:	d427      	bmi.n	80049c8 <__sflush_r+0xb8>
 8004978:	2200      	movs	r2, #0
 800497a:	6062      	str	r2, [r4, #4]
 800497c:	04d9      	lsls	r1, r3, #19
 800497e:	6922      	ldr	r2, [r4, #16]
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	d504      	bpl.n	800498e <__sflush_r+0x7e>
 8004984:	1c42      	adds	r2, r0, #1
 8004986:	d101      	bne.n	800498c <__sflush_r+0x7c>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b903      	cbnz	r3, 800498e <__sflush_r+0x7e>
 800498c:	6560      	str	r0, [r4, #84]	; 0x54
 800498e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004990:	602f      	str	r7, [r5, #0]
 8004992:	2900      	cmp	r1, #0
 8004994:	d0c9      	beq.n	800492a <__sflush_r+0x1a>
 8004996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800499a:	4299      	cmp	r1, r3
 800499c:	d002      	beq.n	80049a4 <__sflush_r+0x94>
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fbea 	bl	8004178 <_free_r>
 80049a4:	2000      	movs	r0, #0
 80049a6:	6360      	str	r0, [r4, #52]	; 0x34
 80049a8:	e7c0      	b.n	800492c <__sflush_r+0x1c>
 80049aa:	2301      	movs	r3, #1
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b0      	blx	r6
 80049b0:	1c41      	adds	r1, r0, #1
 80049b2:	d1c8      	bne.n	8004946 <__sflush_r+0x36>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0c5      	beq.n	8004946 <__sflush_r+0x36>
 80049ba:	2b1d      	cmp	r3, #29
 80049bc:	d001      	beq.n	80049c2 <__sflush_r+0xb2>
 80049be:	2b16      	cmp	r3, #22
 80049c0:	d101      	bne.n	80049c6 <__sflush_r+0xb6>
 80049c2:	602f      	str	r7, [r5, #0]
 80049c4:	e7b1      	b.n	800492a <__sflush_r+0x1a>
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	e7ad      	b.n	800492c <__sflush_r+0x1c>
 80049d0:	690f      	ldr	r7, [r1, #16]
 80049d2:	2f00      	cmp	r7, #0
 80049d4:	d0a9      	beq.n	800492a <__sflush_r+0x1a>
 80049d6:	0793      	lsls	r3, r2, #30
 80049d8:	680e      	ldr	r6, [r1, #0]
 80049da:	bf08      	it	eq
 80049dc:	694b      	ldreq	r3, [r1, #20]
 80049de:	600f      	str	r7, [r1, #0]
 80049e0:	bf18      	it	ne
 80049e2:	2300      	movne	r3, #0
 80049e4:	eba6 0807 	sub.w	r8, r6, r7
 80049e8:	608b      	str	r3, [r1, #8]
 80049ea:	f1b8 0f00 	cmp.w	r8, #0
 80049ee:	dd9c      	ble.n	800492a <__sflush_r+0x1a>
 80049f0:	6a21      	ldr	r1, [r4, #32]
 80049f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049f4:	4643      	mov	r3, r8
 80049f6:	463a      	mov	r2, r7
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b0      	blx	r6
 80049fc:	2800      	cmp	r0, #0
 80049fe:	dc06      	bgt.n	8004a0e <__sflush_r+0xfe>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e78e      	b.n	800492c <__sflush_r+0x1c>
 8004a0e:	4407      	add	r7, r0
 8004a10:	eba8 0800 	sub.w	r8, r8, r0
 8004a14:	e7e9      	b.n	80049ea <__sflush_r+0xda>
 8004a16:	bf00      	nop
 8004a18:	dfbffffe 	.word	0xdfbffffe

08004a1c <_fflush_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b913      	cbnz	r3, 8004a2c <_fflush_r+0x10>
 8004a26:	2500      	movs	r5, #0
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	b118      	cbz	r0, 8004a36 <_fflush_r+0x1a>
 8004a2e:	6a03      	ldr	r3, [r0, #32]
 8004a30:	b90b      	cbnz	r3, 8004a36 <_fflush_r+0x1a>
 8004a32:	f7ff f9ab 	bl	8003d8c <__sinit>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f3      	beq.n	8004a26 <_fflush_r+0xa>
 8004a3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d404      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4a:	f7ff fb93 	bl	8004174 <__retarget_lock_acquire_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff5d 	bl	8004910 <__sflush_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	d4e4      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d4e1      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a66:	f7ff fb86 	bl	8004176 <__retarget_lock_release_recursive>
 8004a6a:	e7dd      	b.n	8004a28 <_fflush_r+0xc>

08004a6c <__swhatbuf_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	b096      	sub	sp, #88	; 0x58
 8004a78:	4615      	mov	r5, r2
 8004a7a:	461e      	mov	r6, r3
 8004a7c:	da0d      	bge.n	8004a9a <__swhatbuf_r+0x2e>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a8e:	2340      	movne	r3, #64	; 0x40
 8004a90:	2000      	movs	r0, #0
 8004a92:	6031      	str	r1, [r6, #0]
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	b016      	add	sp, #88	; 0x58
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	466a      	mov	r2, sp
 8004a9c:	f000 f848 	bl	8004b30 <_fstat_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	dbec      	blt.n	8004a7e <__swhatbuf_r+0x12>
 8004aa4:	9901      	ldr	r1, [sp, #4]
 8004aa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004aae:	4259      	negs	r1, r3
 8004ab0:	4159      	adcs	r1, r3
 8004ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab6:	e7eb      	b.n	8004a90 <__swhatbuf_r+0x24>

08004ab8 <__smakebuf_r>:
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004abc:	079d      	lsls	r5, r3, #30
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	d507      	bpl.n	8004ad4 <__smakebuf_r+0x1c>
 8004ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2301      	movs	r3, #1
 8004ace:	6163      	str	r3, [r4, #20]
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	ab01      	add	r3, sp, #4
 8004ad6:	466a      	mov	r2, sp
 8004ad8:	f7ff ffc8 	bl	8004a6c <__swhatbuf_r>
 8004adc:	9900      	ldr	r1, [sp, #0]
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff fbb5 	bl	8004250 <_malloc_r>
 8004ae6:	b948      	cbnz	r0, 8004afc <__smakebuf_r+0x44>
 8004ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d4ef      	bmi.n	8004ad0 <__smakebuf_r+0x18>
 8004af0:	f023 0303 	bic.w	r3, r3, #3
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	e7e3      	b.n	8004ac4 <__smakebuf_r+0xc>
 8004afc:	89a3      	ldrh	r3, [r4, #12]
 8004afe:	6020      	str	r0, [r4, #0]
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	81a3      	strh	r3, [r4, #12]
 8004b06:	9b00      	ldr	r3, [sp, #0]
 8004b08:	6163      	str	r3, [r4, #20]
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	6120      	str	r0, [r4, #16]
 8004b0e:	b15b      	cbz	r3, 8004b28 <__smakebuf_r+0x70>
 8004b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 f81d 	bl	8004b54 <_isatty_r>
 8004b1a:	b128      	cbz	r0, 8004b28 <__smakebuf_r+0x70>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	431d      	orrs	r5, r3
 8004b2c:	81a5      	strh	r5, [r4, #12]
 8004b2e:	e7cf      	b.n	8004ad0 <__smakebuf_r+0x18>

08004b30 <_fstat_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d07      	ldr	r5, [pc, #28]	; (8004b50 <_fstat_r+0x20>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f7fc fbbe 	bl	80012be <_fstat>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d102      	bne.n	8004b4c <_fstat_r+0x1c>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	b103      	cbz	r3, 8004b4c <_fstat_r+0x1c>
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000998 	.word	0x20000998

08004b54 <_isatty_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d06      	ldr	r5, [pc, #24]	; (8004b70 <_isatty_r+0x1c>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	f7fc fbbd 	bl	80012de <_isatty>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_isatty_r+0x1a>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_isatty_r+0x1a>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	20000998 	.word	0x20000998

08004b74 <_sbrk_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	; (8004b90 <_sbrk_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc fbc6 	bl	8001310 <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_sbrk_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_sbrk_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000998 	.word	0x20000998

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
