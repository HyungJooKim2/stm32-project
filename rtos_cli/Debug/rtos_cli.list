
rtos_cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e78  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009128  08009128  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00005930  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000599c  2000599c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000207d5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043eb  00000000  00000000  000408b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab8  00000000  00000000  00044ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014bc  00000000  00000000  00046758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002891e  00000000  00000000  00047c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e3ca  00000000  00000000  00070532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef5a8  00000000  00000000  0008e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079ac  00000000  00000000  0017dea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00185850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009010 	.word	0x08009010

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08009010 	.word	0x08009010

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <app>:

static void thread1_Task(void *arg);
static void thread2_Task(void *arg);

void app(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  osKernelInitialize();
 8000590:	f004 fc32 	bl	8004df8 <osKernelInitialize>

  thread1_handle = osThreadNew(thread1_Task, NULL, &thread2_attributes);
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <app+0x30>)
 8000596:	2100      	movs	r1, #0
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <app+0x34>)
 800059a:	f004 fc77 	bl	8004e8c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <app+0x38>)
 80005a2:	6013      	str	r3, [r2, #0]
  thread2_handle = osThreadNew(thread2_Task, NULL, &thread2_attributes);
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <app+0x30>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <app+0x3c>)
 80005aa:	f004 fc6f 	bl	8004e8c <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <app+0x40>)
 80005b2:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80005b4:	f004 fc44 	bl	8004e40 <osKernelStart>

  while (1);
 80005b8:	e7fe      	b.n	80005b8 <app+0x2c>
 80005ba:	bf00      	nop
 80005bc:	0800908c 	.word	0x0800908c
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	20000088 	.word	0x20000088
 80005c8:	08000631 	.word	0x08000631
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <thread1_Task>:
#if defined(EVENT_FLAGS)
  osEventFlagsId_t evt_handle;
#endif

static void thread1_Task(void *arg)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

#if defined(EVENT_FLAGS)
  evt_handle = osEventFlagsNew(NULL);
 80005dc:	2000      	movs	r0, #0
 80005de:	f004 fd03 	bl	8004fe8 <osEventFlagsNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <thread1_Task+0x58>)
 80005e6:	6013      	str	r3, [r2, #0]
#endif

  for(;;) {
    osDelay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f004 fce2 	bl	8004fb2 <osDelay>

#if defined(EVENT_FLAGS)
    osEventFlagsSet(evt_handle, 1 << i);
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <thread1_Task+0x58>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	4610      	mov	r0, r2
 80005fe:	f004 fd33 	bl	8005068 <osEventFlagsSet>
#else
    osThreadFlagsSet(thread2_handle, 1 << i);
#endif

    i++; i%=4;
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	3301      	adds	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	73fb      	strb	r3, [r7, #15]
    if (i==0) osDelay(1000);
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <thread1_Task+0x4e>
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f004 fcca 	bl	8004fb2 <osDelay>

    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <thread1_Task+0x5c>)
 8000622:	f001 fd14 	bl	800204e <HAL_GPIO_TogglePin>
    osDelay(100);
 8000626:	e7df      	b.n	80005e8 <thread1_Task+0x18>
 8000628:	20000090 	.word	0x20000090
 800062c:	40020400 	.word	0x40020400

08000630 <thread2_Task>:
  }
}

static void thread2_Task(void *arg)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t flags;

  for(;;) {
#if defined(EVENT_FLAGS)
    flags = osEventFlagsWait(evt_handle, 0x000f, osFlagsWaitAny, 1000); //osWaitForever);
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <thread2_Task+0x80>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	2200      	movs	r2, #0
 8000642:	210f      	movs	r1, #15
 8000644:	f004 fd54 	bl	80050f0 <osEventFlagsWait>
 8000648:	60f8      	str	r0, [r7, #12]
#else
    flags = osThreadFlagsWait(0x000f, osFlagsWaitAny, 1000);
#endif

    printf("flags : %08x : ", flags);
 800064a:	68f9      	ldr	r1, [r7, #12]
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <thread2_Task+0x84>)
 800064e:	f007 fdad 	bl	80081ac <iprintf>
    if (flags != osFlagsErrorTimeout ) {
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f113 0f02 	cmn.w	r3, #2
 8000658:	d020      	beq.n	800069c <thread2_Task+0x6c>
      if (flags & 0x0001) { printf("1\r\n");  }
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <thread2_Task+0x3a>
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <thread2_Task+0x88>)
 8000666:	f007 fe07 	bl	8008278 <puts>
      if (flags & 0x0002) { printf("2\r\n");  }
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <thread2_Task+0x4a>
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <thread2_Task+0x8c>)
 8000676:	f007 fdff 	bl	8008278 <puts>
      if (flags & 0x0004) { printf("4\r\n");  }
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <thread2_Task+0x5a>
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <thread2_Task+0x90>)
 8000686:	f007 fdf7 	bl	8008278 <puts>
      if (flags & 0x0008) { printf("8\r\n");  }
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <thread2_Task+0x72>
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <thread2_Task+0x94>)
 8000696:	f007 fdef 	bl	8008278 <puts>
 800069a:	e002      	b.n	80006a2 <thread2_Task+0x72>
    } else {
			printf("flags timeout\r\n");
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <thread2_Task+0x98>)
 800069e:	f007 fdeb 	bl	8008278 <puts>
    }

    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <thread2_Task+0x9c>)
 80006a8:	f001 fcd1 	bl	800204e <HAL_GPIO_TogglePin>
    flags = osEventFlagsWait(evt_handle, 0x000f, osFlagsWaitAny, 1000); //osWaitForever);
 80006ac:	e7c4      	b.n	8000638 <thread2_Task+0x8>
 80006ae:	bf00      	nop
 80006b0:	20000090 	.word	0x20000090
 80006b4:	08009038 	.word	0x08009038
 80006b8:	08009048 	.word	0x08009048
 80006bc:	0800904c 	.word	0x0800904c
 80006c0:	08009050 	.word	0x08009050
 80006c4:	08009054 	.word	0x08009054
 80006c8:	08009058 	.word	0x08009058
 80006cc:	40020400 	.word	0x40020400

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fd94 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f820 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f9a4 	bl	8000a28 <MX_GPIO_Init>
  MX_ETH_Init();
 80006e0:	f000 f886 	bl	80007f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006e4:	f000 f948 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e8:	f000 f970 	bl	80009cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80006ec:	f000 f8ce 	bl	800088c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 80006f0:	f7ff ff4c 	bl	800058c <app>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f4:	f004 fb80 	bl	8004df8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <main+0x40>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <main+0x44>)
 80006fe:	f004 fbc5 	bl	8004e8c <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <main+0x48>)
 8000706:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000708:	f004 fb9a 	bl	8004e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x3c>
 800070e:	bf00      	nop
 8000710:	080090b0 	.word	0x080090b0
 8000714:	08000b95 	.word	0x08000b95
 8000718:	20000854 	.word	0x20000854

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f007 fe84 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <SystemClock_Config+0xcc>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <SystemClock_Config+0xcc>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xcc>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <SystemClock_Config+0xd0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <SystemClock_Config+0xd0>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000790:	23a8      	movs	r3, #168	; 0xa8
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fdaf 	bl	8002304 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 fa02 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2105      	movs	r1, #5
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 f810 	bl	80027f4 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007da:	f000 f9eb 	bl	8000bb4 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ETH_Init+0x84>)
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_ETH_Init+0x88>)
 80007f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_ETH_Init+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ETH_Init+0x8c>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_ETH_Init+0x8c>)
 8000808:	22e1      	movs	r2, #225	; 0xe1
 800080a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_ETH_Init+0x8c>)
 800080e:	2200      	movs	r2, #0
 8000810:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ETH_Init+0x8c>)
 8000814:	2200      	movs	r2, #0
 8000816:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_ETH_Init+0x8c>)
 800081a:	2200      	movs	r2, #0
 800081c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_ETH_Init+0x84>)
 8000820:	4a16      	ldr	r2, [pc, #88]	; (800087c <MX_ETH_Init+0x8c>)
 8000822:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_ETH_Init+0x84>)
 8000826:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ETH_Init+0x84>)
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <MX_ETH_Init+0x90>)
 8000830:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_ETH_Init+0x84>)
 8000834:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_ETH_Init+0x94>)
 8000836:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_ETH_Init+0x84>)
 800083a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800083e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x84>)
 8000842:	f000 ff17 	bl	8001674 <HAL_ETH_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 f9b2 	bl	8000bb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000850:	2238      	movs	r2, #56	; 0x38
 8000852:	2100      	movs	r1, #0
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_ETH_Init+0x98>)
 8000856:	f007 fdef 	bl	8008438 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_ETH_Init+0x98>)
 800085c:	2221      	movs	r2, #33	; 0x21
 800085e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_ETH_Init+0x98>)
 8000862:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000866:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_ETH_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000020c 	.word	0x2000020c
 8000878:	40028000 	.word	0x40028000
 800087c:	20000858 	.word	0x20000858
 8000880:	2000016c 	.word	0x2000016c
 8000884:	200000cc 	.word	0x200000cc
 8000888:	20000094 	.word	0x20000094

0800088c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_TIM3_Init+0xe8>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008c4:	2253      	movs	r2, #83	; 0x53
 80008c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_TIM3_Init+0xe4>)
 80008e4:	f002 f9a6 	bl	8002c34 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ee:	f000 f961 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fc:	4619      	mov	r1, r3
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_TIM3_Init+0xe4>)
 8000900:	f002 fb02 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800090a:	f000 f953 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090e:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_TIM3_Init+0xe4>)
 8000910:	f002 f9df 	bl	8002cd2 <HAL_TIM_PWM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800091a:	f000 f94b 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4619      	mov	r1, r3
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <MX_TIM3_Init+0xe4>)
 800092e:	f002 fe9d 	bl	800366c <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000938:	f000 f93c 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2208      	movs	r2, #8
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM3_Init+0xe4>)
 8000954:	f002 fa16 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800095e:	f000 f929 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM3_Init+0xe4>)
 8000964:	f000 fa40 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3738      	adds	r7, #56	; 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200002bc 	.word	0x200002bc
 8000974:	40000400 	.word	0x40000400

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART3_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART3_UART_Init+0x4c>)
 80009b0:	f002 fed8 	bl	8003764 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f8fb 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000304 	.word	0x20000304
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	2204      	movs	r2, #4
 80009dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	f001 fb5b 	bl	80020ca <HAL_PCD_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f8cb 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000348 	.word	0x20000348

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a4f      	ldr	r2, [pc, #316]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a3a      	ldr	r2, [pc, #232]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a2c      	ldr	r2, [pc, #176]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_GPIO_Init+0x15c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000aec:	4826      	ldr	r0, [pc, #152]	; (8000b88 <MX_GPIO_Init+0x160>)
 8000aee:	f001 fa95 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	4825      	ldr	r0, [pc, #148]	; (8000b8c <MX_GPIO_Init+0x164>)
 8000af8:	f001 fa90 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0x168>)
 8000b14:	f001 f8d6 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b18:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <MX_GPIO_Init+0x160>)
 8000b32:	f001 f8c7 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480f      	ldr	r0, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x164>)
 8000b4e:	f001 f8b9 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x164>)
 8000b66:	f001 f8ad 	bl	8001cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	2028      	movs	r0, #40	; 0x28
 8000b70:	f000 fcb7 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b74:	2028      	movs	r0, #40	; 0x28
 8000b76:	f000 fcd0 	bl	800151a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40020800 	.word	0x40020800

08000b94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba0:	f004 fa07 	bl	8004fb2 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <StartDefaultTask+0x1c>)
 8000ba8:	f001 fa51 	bl	800204e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000bac:	e7f6      	b.n	8000b9c <StartDefaultTask+0x8>
 8000bae:	bf00      	nop
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x54>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <HAL_MspInit+0x54>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x54>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_MspInit+0x54>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_MspInit+0x54>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_MspInit+0x54>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	f06f 0001 	mvn.w	r0, #1
 8000c06:	f000 fc6c 	bl	80014e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a55      	ldr	r2, [pc, #340]	; (8000d8c <HAL_ETH_MspInit+0x174>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f040 80a4 	bne.w	8000d84 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a4b      	ldr	r2, [pc, #300]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a44      	ldr	r2, [pc, #272]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a2f      	ldr	r2, [pc, #188]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_ETH_MspInit+0x178>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d00:	2332      	movs	r3, #50	; 0x32
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481e      	ldr	r0, [pc, #120]	; (8000d94 <HAL_ETH_MspInit+0x17c>)
 8000d1c:	f000 ffd2 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d20:	2386      	movs	r3, #134	; 0x86
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d30:	230b      	movs	r3, #11
 8000d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4817      	ldr	r0, [pc, #92]	; (8000d98 <HAL_ETH_MspInit+0x180>)
 8000d3c:	f000 ffc2 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d52:	230b      	movs	r3, #11
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480f      	ldr	r0, [pc, #60]	; (8000d9c <HAL_ETH_MspInit+0x184>)
 8000d5e:	f000 ffb1 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d74:	230b      	movs	r3, #11
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <HAL_ETH_MspInit+0x188>)
 8000d80:	f000 ffa0 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40028000 	.word	0x40028000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40021800 	.word	0x40021800

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_TIM_Base_MspInit+0x3c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10d      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40000400 	.word	0x40000400
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_TIM_MspPostInit+0x70>)
 8000e42:	f000 ff3f 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40000400 	.word	0x40000400
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020400 	.word	0x40020400

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d134      	bne.n	8000ee8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_UART_MspInit+0x9c>)
 8000ed4:	f000 fef6 	bl	8001cc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	2027      	movs	r0, #39	; 0x27
 8000ede:	f000 fb00 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ee2:	2027      	movs	r0, #39	; 0x27
 8000ee4:	f000 fb19 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004800 	.word	0x40004800
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f1c:	d13f      	bne.n	8000f9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <HAL_PCD_MspInit+0xb0>)
 8000f58:	f000 feb4 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480e      	ldr	r0, [pc, #56]	; (8000fac <HAL_PCD_MspInit+0xb0>)
 8000f72:	f000 fea7 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6353      	str	r3, [r2, #52]	; 0x34
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_PCD_MspInit+0xac>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f960 	bl	80012a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fe4:	f005 ff92 	bl	8006f0c <xTaskGetSchedulerState>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d001      	beq.n	8000ff2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fee:	f006 fdb3 	bl	8007b58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <USART3_IRQHandler+0x10>)
 8000ffe:	f002 fc91 	bl	8003924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000304 	.word	0x20000304

0800100c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001010:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001014:	f001 f836 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f889 	bl	8001188 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f007 fa2a 	bl	8008580 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20030000 	.word	0x20030000
 8001158:	00000400 	.word	0x00000400
 800115c:	20000860 	.word	0x20000860
 8001160:	200059a0 	.word	0x200059a0

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__io_putchar>:
  }
}
#endif

int __io_putchar(int ch)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
 8001190:	1d39      	adds	r1, r7, #4
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	2201      	movs	r2, #1
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <__io_putchar+0x20>)
 800119a:	f002 fb30 	bl	80037fe <HAL_UART_Transmit>
  return ch;
 800119e:	687b      	ldr	r3, [r7, #4]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000304 	.word	0x20000304

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffc5 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f007 f9d7 	bl	800858c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fa77 	bl	80006d0 <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011f0:	08009130 	.word	0x08009130
  ldr r2, =_sbss
 80011f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011f8:	2000599c 	.word	0x2000599c

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f94f 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fcc4 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f967 	bl	8001536 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f92f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000864 	.word	0x20000864

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000864 	.word	0x20000864

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff3e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff31 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff feb6 	bl	80012cc <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d008      	beq.n	8001580 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e052      	b.n	8001626 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0216 	bic.w	r2, r2, #22
 800158e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800159e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <HAL_DMA_Abort+0x62>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0208 	bic.w	r2, r2, #8
 80015be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d0:	e013      	b.n	80015fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d2:	f7ff fe7b 	bl	80012cc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d90c      	bls.n	80015fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e015      	b.n	8001626 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e4      	bne.n	80015d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	223f      	movs	r2, #63	; 0x3f
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d004      	beq.n	800164c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e00c      	b.n	8001666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2205      	movs	r2, #5
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06c      	b.n	8001760 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2223      	movs	r2, #35	; 0x23
 8001694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fabd 	bl	8000c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_ETH_Init+0xf4>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_ETH_Init+0xf8>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_ETH_Init+0xf8>)
 80016c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ETH_Init+0xf8>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_ETH_Init+0xf8>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016d4:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_ETH_Init+0xf8>)
 80016d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff fdec 	bl	80012cc <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016f6:	e011      	b.n	800171c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016f8:	f7ff fde8 	bl	80012cc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001706:	d909      	bls.n	800171c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	22e0      	movs	r2, #224	; 0xe0
 8001714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e021      	b.n	8001760 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e4      	bne.n	80016f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f958 	bl	80019e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f9ff 	bl	8001b38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fa55 	bl	8001bea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	461a      	mov	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f9bd 	bl	8001ac8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2210      	movs	r2, #16
 800175a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	40013800 	.word	0x40013800

08001770 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <ETH_SetMACConfig+0x15c>)
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	7c1b      	ldrb	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <ETH_SetMACConfig+0x28>
 8001792:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001796:	e000      	b.n	800179a <ETH_SetMACConfig+0x2a>
 8001798:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	7c5b      	ldrb	r3, [r3, #17]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <ETH_SetMACConfig+0x38>
 80017a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a6:	e000      	b.n	80017aa <ETH_SetMACConfig+0x3a>
 80017a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80017aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80017b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	7fdb      	ldrb	r3, [r3, #31]
 80017b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80017b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80017be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	7f92      	ldrb	r2, [r2, #30]
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	d102      	bne.n	80017ce <ETH_SetMACConfig+0x5e>
 80017c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017cc:	e000      	b.n	80017d0 <ETH_SetMACConfig+0x60>
 80017ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80017d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	7f1b      	ldrb	r3, [r3, #28]
 80017d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80017d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80017de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	791b      	ldrb	r3, [r3, #4]
 80017e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80017e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	d102      	bne.n	80017f8 <ETH_SetMACConfig+0x88>
 80017f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f6:	e000      	b.n	80017fa <ETH_SetMACConfig+0x8a>
 80017f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80017fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	7bdb      	ldrb	r3, [r3, #15]
 8001800:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001802:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001808:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001810:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001812:	4313      	orrs	r3, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff fd5a 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001856:	2a00      	cmp	r2, #0
 8001858:	d101      	bne.n	800185e <ETH_SetMACConfig+0xee>
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	e000      	b.n	8001860 <ETH_SetMACConfig+0xf0>
 800185e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001860:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001866:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800186e:	2a01      	cmp	r2, #1
 8001870:	d101      	bne.n	8001876 <ETH_SetMACConfig+0x106>
 8001872:	2208      	movs	r2, #8
 8001874:	e000      	b.n	8001878 <ETH_SetMACConfig+0x108>
 8001876:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001878:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001880:	2a01      	cmp	r2, #1
 8001882:	d101      	bne.n	8001888 <ETH_SetMACConfig+0x118>
 8001884:	2204      	movs	r2, #4
 8001886:	e000      	b.n	800188a <ETH_SetMACConfig+0x11a>
 8001888:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800188a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001892:	2a01      	cmp	r2, #1
 8001894:	d101      	bne.n	800189a <ETH_SetMACConfig+0x12a>
 8001896:	2202      	movs	r2, #2
 8001898:	e000      	b.n	800189c <ETH_SetMACConfig+0x12c>
 800189a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800189c:	4313      	orrs	r3, r2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff fd15 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	ff20810f 	.word	0xff20810f

080018d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <ETH_SetDMAConfig+0x110>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <ETH_SetDMAConfig+0x2c>
 80018f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018fa:	e000      	b.n	80018fe <ETH_SetDMAConfig+0x2e>
 80018fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	7b5b      	ldrb	r3, [r3, #13]
 8001902:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001904:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	7f52      	ldrb	r2, [r2, #29]
 800190a:	2a00      	cmp	r2, #0
 800190c:	d102      	bne.n	8001914 <ETH_SetDMAConfig+0x44>
 800190e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001912:	e000      	b.n	8001916 <ETH_SetDMAConfig+0x46>
 8001914:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001916:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b9b      	ldrb	r3, [r3, #14]
 800191c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800191e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001924:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	7f1b      	ldrb	r3, [r3, #28]
 800192a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800192c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7f9b      	ldrb	r3, [r3, #30]
 8001932:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001934:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800193a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001942:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001944:	4313      	orrs	r3, r2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	461a      	mov	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff fcbc 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	461a      	mov	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001984:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800198a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001990:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001998:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800199a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80019a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80019a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fc8d 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	f8de3f23 	.word	0xf8de3f23

080019e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0a6      	sub	sp, #152	; 0x98
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a20:	2300      	movs	r3, #0
 8001a22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fe86 	bl	8001770 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a90:	2301      	movs	r3, #1
 8001a92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff08 	bl	80018d0 <ETH_SetDMAConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3798      	adds	r7, #152	; 0x98
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3305      	adds	r3, #5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	3204      	adds	r2, #4
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <ETH_MACAddressConfig+0x68>)
 8001aea:	4413      	add	r3, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3303      	adds	r3, #3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	061a      	lsls	r2, r3, #24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3302      	adds	r3, #2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <ETH_MACAddressConfig+0x6c>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	6013      	str	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40028040 	.word	0x40028040
 8001b34:	40028044 	.word	0x40028044

08001b38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e03e      	b.n	8001bc4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68d9      	ldr	r1, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	3206      	adds	r2, #6
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d80c      	bhi.n	8001ba8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e004      	b.n	8001bb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d9bd      	bls.n	8001b46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	611a      	str	r2, [r3, #16]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e046      	b.n	8001c86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6919      	ldr	r1, [r3, #16]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	3212      	adds	r2, #18
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d80c      	bhi.n	8001c76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	e004      	b.n	8001c80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d9b5      	bls.n	8001bf8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e177      	b.n	8001fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 8166 	bne.w	8001fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0201 	and.w	r2, r3, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d017      	beq.n	8001db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d123      	bne.n	8001e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80c0 	beq.w	8001fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_GPIO_Init+0x324>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <HAL_GPIO_Init+0x324>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_GPIO_Init+0x324>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e66:	4a61      	ldr	r2, [pc, #388]	; (8001fec <HAL_GPIO_Init+0x328>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d037      	beq.n	8001f02 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_GPIO_Init+0x330>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d031      	beq.n	8001efe <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_GPIO_Init+0x334>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d02b      	beq.n	8001efa <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_GPIO_Init+0x338>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d025      	beq.n	8001ef6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a54      	ldr	r2, [pc, #336]	; (8002000 <HAL_GPIO_Init+0x33c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01f      	beq.n	8001ef2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a53      	ldr	r2, [pc, #332]	; (8002004 <HAL_GPIO_Init+0x340>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x22a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_GPIO_Init+0x344>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x226>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x348>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x222>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a50      	ldr	r2, [pc, #320]	; (8002010 <HAL_GPIO_Init+0x34c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x21e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4f      	ldr	r2, [pc, #316]	; (8002014 <HAL_GPIO_Init+0x350>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x21a>
 8001eda:	2309      	movs	r3, #9
 8001edc:	e012      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001ede:	230a      	movs	r3, #10
 8001ee0:	e010      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	e00e      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00c      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001eea:	2306      	movs	r3, #6
 8001eec:	e00a      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001eee:	2305      	movs	r3, #5
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x240>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4935      	ldr	r1, [pc, #212]	; (8001fec <HAL_GPIO_Init+0x328>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f46:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4c:	4b32      	ldr	r3, [pc, #200]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f76:	4b28      	ldr	r3, [pc, #160]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f ae84 	bls.w	8001ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40020800 	.word	0x40020800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021000 	.word	0x40021000
 8002004:	40021400 	.word	0x40021400
 8002008:	40021800 	.word	0x40021800
 800200c:	40021c00 	.word	0x40021c00
 8002010:	40022000 	.word	0x40022000
 8002014:	40022400 	.word	0x40022400
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	619a      	str	r2, [r3, #24]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	041a      	lsls	r2, r3, #16
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43d9      	mvns	r1, r3
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	400b      	ands	r3, r1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f806 	bl	80020b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020cc:	b08f      	sub	sp, #60	; 0x3c
 80020ce:	af0a      	add	r7, sp, #40	; 0x28
 80020d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e10f      	b.n	80022fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe ff00 	bl	8000efc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fb97 	bl	800484e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	687e      	ldr	r6, [r7, #4]
 8002128:	466d      	mov	r5, sp
 800212a:	f106 0410 	add.w	r4, r6, #16
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213a:	e885 0003 	stmia.w	r5, {r0, r1}
 800213e:	1d33      	adds	r3, r6, #4
 8002140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f002 fb22 	bl	800478c <USB_CoreInit>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0d0      	b.n	80022fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f002 fb85 	bl	8004870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e04a      	b.n	8002202 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	333d      	adds	r3, #61	; 0x3d
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	333c      	adds	r3, #60	; 0x3c
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	b298      	uxth	r0, r3
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3344      	adds	r3, #68	; 0x44
 80021a8:	4602      	mov	r2, r0
 80021aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3340      	adds	r3, #64	; 0x40
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3348      	adds	r3, #72	; 0x48
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	334c      	adds	r3, #76	; 0x4c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3354      	adds	r3, #84	; 0x54
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3af      	bcc.n	800216c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e044      	b.n	800229c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	3301      	adds	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d3b5      	bcc.n	8002212 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	687e      	ldr	r6, [r7, #4]
 80022ae:	466d      	mov	r5, sp
 80022b0:	f106 0410 	add.w	r4, r6, #16
 80022b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022c4:	1d33      	adds	r3, r6, #4
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f002 fb1d 	bl	8004908 <USB_DevInit>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e00d      	b.n	80022fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fce8 	bl	8004cca <USB_DevDisconnect>

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e267      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d075      	beq.n	800240e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d00c      	beq.n	8002348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002336:	2b08      	cmp	r3, #8
 8002338:	d112      	bne.n	8002360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002346:	d10b      	bne.n	8002360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05b      	beq.n	800240c <HAL_RCC_OscConfig+0x108>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d157      	bne.n	800240c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e242      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002368:	d106      	bne.n	8002378 <HAL_RCC_OscConfig+0x74>
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e01d      	b.n	80023b4 <HAL_RCC_OscConfig+0xb0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b70      	ldr	r3, [pc, #448]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6f      	ldr	r2, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0xb0>
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a68      	ldr	r2, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a65      	ldr	r2, [pc, #404]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe ff86 	bl	80012cc <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe ff82 	bl	80012cc <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e207      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0xc0>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe ff72 	bl	80012cc <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff6e 	bl	80012cc <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1f3      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0xe8>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d063      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242e:	2b08      	cmp	r3, #8
 8002430:	d11c      	bne.n	800246c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_RCC_OscConfig+0x152>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1c7      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4937      	ldr	r1, [pc, #220]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	e03a      	b.n	80024e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_OscConfig+0x244>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7fe ff27 	bl	80012cc <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002482:	f7fe ff23 	bl	80012cc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1a8      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4925      	ldr	r1, [pc, #148]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]
 80024b4:	e015      	b.n	80024e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_OscConfig+0x244>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe ff06 	bl	80012cc <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe ff02 	bl	80012cc <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e187      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d036      	beq.n	800255c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_RCC_OscConfig+0x248>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe fee6 	bl	80012cc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fee2 	bl	80012cc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e167      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x240>)
 8002518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x200>
 8002522:	e01b      	b.n	800255c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_OscConfig+0x248>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fecf 	bl	80012cc <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	e00e      	b.n	8002550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002532:	f7fe fecb 	bl	80012cc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d907      	bls.n	8002550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e150      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
 8002544:	40023800 	.word	0x40023800
 8002548:	42470000 	.word	0x42470000
 800254c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ea      	bne.n	8002532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8097 	beq.w	8002698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b81      	ldr	r3, [pc, #516]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a7c      	ldr	r2, [pc, #496]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b77      	ldr	r3, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x474>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d118      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a6:	4b74      	ldr	r3, [pc, #464]	; (8002778 <HAL_RCC_OscConfig+0x474>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a73      	ldr	r2, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x474>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe8b 	bl	80012cc <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe fe87 	bl	80012cc <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e10c      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x474>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x2ea>
 80025e0:	4b64      	ldr	r3, [pc, #400]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a63      	ldr	r2, [pc, #396]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	e01c      	b.n	8002628 <HAL_RCC_OscConfig+0x324>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x30c>
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a5e      	ldr	r2, [pc, #376]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0x324>
 8002610:	4b58      	ldr	r3, [pc, #352]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a57      	ldr	r2, [pc, #348]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	4b55      	ldr	r3, [pc, #340]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a54      	ldr	r2, [pc, #336]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002622:	f023 0304 	bic.w	r3, r3, #4
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe fe4c 	bl	80012cc <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7fe fe48 	bl	80012cc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0cb      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0ee      	beq.n	8002638 <HAL_RCC_OscConfig+0x334>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe fe36 	bl	80012cc <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fe32 	bl	80012cc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0b5      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ee      	bne.n	8002664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a38      	ldr	r2, [pc, #224]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a1 	beq.w	80027e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a2:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d05c      	beq.n	8002768 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d141      	bne.n	800273a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_RCC_OscConfig+0x478>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fe06 	bl	80012cc <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fe02 	bl	80012cc <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e087      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d6:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	491b      	ldr	r1, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x478>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fddb 	bl	80012cc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fdd7 	bl	80012cc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e05c      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x416>
 8002738:	e054      	b.n	80027e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_RCC_OscConfig+0x478>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fdc4 	bl	80012cc <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fdc0 	bl	80012cc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e045      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_OscConfig+0x470>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
 8002766:	e03d      	b.n	80027e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e038      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000
 800277c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x4ec>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d028      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d121      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d11a      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	3b01      	subs	r3, #1
 80027ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0cc      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d90c      	bls.n	8002830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b65      	ldr	r3, [pc, #404]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0b8      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	494d      	ldr	r1, [pc, #308]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d044      	beq.n	8002914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d119      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e067      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4934      	ldr	r1, [pc, #208]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fcf2 	bl	80012cc <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fe fcee 	bl	80012cc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e04f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d20c      	bcs.n	800293c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e032      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800297a:	f000 f821 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800297e:	4602      	mov	r2, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	490a      	ldr	r1, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	5ccb      	ldrb	r3, [r1, r3]
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fc52 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080090d4 	.word	0x080090d4
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b094      	sub	sp, #80	; 0x50
 80029c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	647b      	str	r3, [r7, #68]	; 0x44
 80029cc:	2300      	movs	r3, #0
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d0:	2300      	movs	r3, #0
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d8:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x40>
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	f200 80e1 	bhi.w	8002bac <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d003      	beq.n	80029fa <HAL_RCC_GetSysClockFreq+0x3a>
 80029f2:	e0db      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029f8:	e0db      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fa:	4b73      	ldr	r3, [pc, #460]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fe:	e0d8      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0a:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	099b      	lsrs	r3, r3, #6
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	f04f 0000 	mov.w	r0, #0
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	0159      	lsls	r1, r3, #5
 8002a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a44:	0150      	lsls	r0, r2, #5
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	1a51      	subs	r1, r2, r1
 8002a4e:	6139      	str	r1, [r7, #16]
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb63 0301 	sbc.w	r3, r3, r1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a64:	4659      	mov	r1, fp
 8002a66:	018b      	lsls	r3, r1, #6
 8002a68:	4651      	mov	r1, sl
 8002a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6e:	4651      	mov	r1, sl
 8002a70:	018a      	lsls	r2, r1, #6
 8002a72:	4651      	mov	r1, sl
 8002a74:	ebb2 0801 	subs.w	r8, r2, r1
 8002a78:	4659      	mov	r1, fp
 8002a7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a92:	4690      	mov	r8, r2
 8002a94:	4699      	mov	r9, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	eb18 0303 	adds.w	r3, r8, r3
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	eb49 0303 	adc.w	r3, r9, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	024b      	lsls	r3, r1, #9
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002abc:	4621      	mov	r1, r4
 8002abe:	024a      	lsls	r2, r1, #9
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad0:	f7fd fbde 	bl	8000290 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e058      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4611      	mov	r1, r2
 8002aea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aee:	623b      	str	r3, [r7, #32]
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	f04f 0000 	mov.w	r0, #0
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	0159      	lsls	r1, r3, #5
 8002b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0a:	0150      	lsls	r0, r2, #5
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4641      	mov	r1, r8
 8002b12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b30:	ebb2 040a 	subs.w	r4, r2, sl
 8002b34:	eb63 050b 	sbc.w	r5, r3, fp
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	00eb      	lsls	r3, r5, #3
 8002b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b46:	00e2      	lsls	r2, r4, #3
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	18e3      	adds	r3, r4, r3
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	464b      	mov	r3, r9
 8002b54:	eb45 0303 	adc.w	r3, r5, r3
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b66:	4629      	mov	r1, r5
 8002b68:	028b      	lsls	r3, r1, #10
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b70:	4621      	mov	r1, r4
 8002b72:	028a      	lsls	r2, r1, #10
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	61fa      	str	r2, [r7, #28]
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	f7fd fb84 	bl	8000290 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3750      	adds	r7, #80	; 0x50
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0a9b      	lsrs	r3, r3, #10
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	080090e4 	.word	0x080090e4

08002c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c10:	f7ff ffdc 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0b5b      	lsrs	r3, r3, #13
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	080090e4 	.word	0x080090e4

08002c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e041      	b.n	8002cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe f8a2 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f000 fa10 	bl	8003098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e041      	b.n	8002d68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f839 	bl	8002d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f000 f9c1 	bl	8003098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0ae      	b.n	8002f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	f200 809f 	bhi.w	8002ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002ef1 	.word	0x08002ef1
 8002dc0:	08002ef1 	.word	0x08002ef1
 8002dc4:	08002ef1 	.word	0x08002ef1
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	08002ef1 	.word	0x08002ef1
 8002dd0:	08002ef1 	.word	0x08002ef1
 8002dd4:	08002ef1 	.word	0x08002ef1
 8002dd8:	08002e6f 	.word	0x08002e6f
 8002ddc:	08002ef1 	.word	0x08002ef1
 8002de0:	08002ef1 	.word	0x08002ef1
 8002de4:	08002ef1 	.word	0x08002ef1
 8002de8:	08002eaf 	.word	0x08002eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f9f0 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6999      	ldr	r1, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	619a      	str	r2, [r3, #24]
      break;
 8002e2a:	e064      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fa40 	bl	80032b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	021a      	lsls	r2, r3, #8
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	619a      	str	r2, [r3, #24]
      break;
 8002e6c:	e043      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fa95 	bl	80033a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0204 	bic.w	r2, r2, #4
 8002e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]
      break;
 8002eac:	e023      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fae9 	bl	800348c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	61da      	str	r2, [r3, #28]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_ConfigClockSource+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0b4      	b.n	800308e <HAL_TIM_ConfigClockSource+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d03e      	beq.n	8002fdc <HAL_TIM_ConfigClockSource+0xd4>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	f200 8087 	bhi.w	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	f000 8086 	beq.w	800307a <HAL_TIM_ConfigClockSource+0x172>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d87f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b70      	cmp	r3, #112	; 0x70
 8002f76:	d01a      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xa6>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d87b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b60      	cmp	r3, #96	; 0x60
 8002f7e:	d050      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x11a>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d877      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d03c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xfa>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d873      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d058      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x13a>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d86f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b30      	cmp	r3, #48	; 0x30
 8002f96:	d064      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d867      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d05a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	e062      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f000 fb35 	bl	800362c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
      break;
 8002fda:	e04f      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f000 fb1e 	bl	800362c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	461a      	mov	r2, r3
 8003010:	f000 fa92 	bl	8003538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	; 0x50
 800301a:	4618      	mov	r0, r3
 800301c:	f000 faeb 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003020:	e02c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 fab1 	bl	8003596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	; 0x60
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fadb 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003040:	e01c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 fa72 	bl	8003538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	4618      	mov	r0, r3
 800305c:	f000 facb 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003060:	e00c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f000 fac2 	bl	80035f6 <TIM_ITRx_SetConfig>
      break;
 8003072:	e003      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e000      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a40      	ldr	r2, [pc, #256]	; (80031ac <TIM_Base_SetConfig+0x114>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d00f      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <TIM_Base_SetConfig+0x118>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00b      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <TIM_Base_SetConfig+0x11c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d007      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3b      	ldr	r2, [pc, #236]	; (80031b8 <TIM_Base_SetConfig+0x120>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a3a      	ldr	r2, [pc, #232]	; (80031bc <TIM_Base_SetConfig+0x124>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d108      	bne.n	80030ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a2f      	ldr	r2, [pc, #188]	; (80031ac <TIM_Base_SetConfig+0x114>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d027      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <TIM_Base_SetConfig+0x118>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d023      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <TIM_Base_SetConfig+0x11c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01f      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2a      	ldr	r2, [pc, #168]	; (80031b8 <TIM_Base_SetConfig+0x120>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <TIM_Base_SetConfig+0x124>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d017      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <TIM_Base_SetConfig+0x128>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <TIM_Base_SetConfig+0x12c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a26      	ldr	r2, [pc, #152]	; (80031c8 <TIM_Base_SetConfig+0x130>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <TIM_Base_SetConfig+0x134>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <TIM_Base_SetConfig+0x138>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <TIM_Base_SetConfig+0x13c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <TIM_Base_SetConfig+0x114>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0xf8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <TIM_Base_SetConfig+0x124>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d103      	bne.n	8003198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	615a      	str	r2, [r3, #20]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	40001800 	.word	0x40001800
 80031d0:	40001c00 	.word	0x40001c00
 80031d4:	40002000 	.word	0x40002000

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <TIM_OC1_SetConfig+0xd8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC1_SetConfig+0x64>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <TIM_OC1_SetConfig+0xdc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10c      	bne.n	8003256 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0308 	bic.w	r3, r3, #8
 8003242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <TIM_OC1_SetConfig+0xd8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_OC1_SetConfig+0x8e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <TIM_OC1_SetConfig+0xdc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d111      	bne.n	800328a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40010400 	.word	0x40010400

080032b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0210 	bic.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <TIM_OC2_SetConfig+0xe4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_OC2_SetConfig+0x68>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a21      	ldr	r2, [pc, #132]	; (80033a0 <TIM_OC2_SetConfig+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10d      	bne.n	800333c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <TIM_OC2_SetConfig+0xe4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d003      	beq.n	800334c <TIM_OC2_SetConfig+0x94>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <TIM_OC2_SetConfig+0xe8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d113      	bne.n	8003374 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400

080033a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <TIM_OC3_SetConfig+0xe0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_OC3_SetConfig+0x66>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <TIM_OC3_SetConfig+0xe4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10d      	bne.n	8003426 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a16      	ldr	r2, [pc, #88]	; (8003484 <TIM_OC3_SetConfig+0xe0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_OC3_SetConfig+0x92>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <TIM_OC3_SetConfig+0xe4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d113      	bne.n	800345e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800343c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40010000 	.word	0x40010000
 8003488:	40010400 	.word	0x40010400

0800348c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	031b      	lsls	r3, r3, #12
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <TIM_OC4_SetConfig+0xa4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC4_SetConfig+0x68>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <TIM_OC4_SetConfig+0xa8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40010400 	.word	0x40010400

08003538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f023 030a 	bic.w	r3, r3, #10
 8003574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003596:	b480      	push	{r7}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0210 	bic.w	r2, r3, #16
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	031b      	lsls	r3, r3, #12
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	f043 0307 	orr.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	021a      	lsls	r2, r3, #8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	431a      	orrs	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	609a      	str	r2, [r3, #8]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003680:	2302      	movs	r3, #2
 8003682:	e05a      	b.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d01d      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10c      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e03f      	b.n	80037f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd fb66 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fd7b 	bl	80042a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08a      	sub	sp, #40	; 0x28
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d17c      	bne.n	8003918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_Transmit+0x2c>
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e075      	b.n	800391a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x3e>
 8003838:	2302      	movs	r3, #2
 800383a:	e06e      	b.n	800391a <HAL_UART_Transmit+0x11c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003852:	f7fd fd3b 	bl	80012cc <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d108      	bne.n	8003880 <HAL_UART_Transmit+0x82>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e003      	b.n	8003888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003890:	e02a      	b.n	80038e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 faf9 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e036      	b.n	800391a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3302      	adds	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e007      	b.n	80038da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cf      	bne.n	8003892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fac9 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e006      	b.n	800391a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b0ba      	sub	sp, #232	; 0xe8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10f      	bne.n	800398a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_UART_IRQHandler+0x66>
 8003976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fbd3 	bl	800412e <UART_Receive_IT>
      return;
 8003988:	e256      	b.n	8003e38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800398a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80de 	beq.w	8003b50 <HAL_UART_IRQHandler+0x22c>
 8003994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80d1 	beq.w	8003b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_UART_IRQHandler+0xae>
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xd2>
 80039de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xf6>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0204 	orr.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d011      	beq.n	8003a4a <HAL_UART_IRQHandler+0x126>
 8003a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0208 	orr.w	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 81ed 	beq.w	8003e2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_UART_IRQHandler+0x14e>
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb5e 	bl	800412e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <HAL_UART_IRQHandler+0x17a>
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d04f      	beq.n	8003b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa66 	bl	8003f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d141      	bne.n	8003b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d013      	beq.n	8003b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	; (8003d00 <HAL_UART_IRQHandler+0x3dc>)
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fd8b 	bl	800162e <HAL_DMA_Abort_IT>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e00e      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f99a 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e00a      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f996 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e006      	b.n	8003b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f992 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b4a:	e170      	b.n	8003e2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	bf00      	nop
    return;
 8003b4e:	e16e      	b.n	8003e2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	f040 814a 	bne.w	8003dee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8143 	beq.w	8003dee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 813c 	beq.w	8003dee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	f040 80b4 	bne.w	8003d04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8140 	beq.w	8003e32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	f080 8139 	bcs.w	8003e32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd2:	f000 8088 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1d9      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3314      	adds	r3, #20
 8003c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e1      	bne.n	8003c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e3      	bne.n	8003c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb6:	f023 0310 	bic.w	r3, r3, #16
 8003cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e3      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd fc34 	bl	800154e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8c0 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfc:	e099      	b.n	8003e32 <HAL_UART_IRQHandler+0x50e>
 8003cfe:	bf00      	nop
 8003d00:	08004037 	.word	0x08004037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 808b 	beq.w	8003e36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8086 	beq.w	8003e36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e3      	bne.n	8003d2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	623b      	str	r3, [r7, #32]
   return(result);
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d86:	633a      	str	r2, [r7, #48]	; 0x30
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dcc:	61fa      	str	r2, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e3      	bne.n	8003da8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f848 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dec:	e023      	b.n	8003e36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_UART_IRQHandler+0x4ea>
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f929 	bl	800405e <UART_Transmit_IT>
    return;
 8003e0c:	e014      	b.n	8003e38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <HAL_UART_IRQHandler+0x514>
 8003e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f969 	bl	80040fe <UART_EndTransmit_IT>
    return;
 8003e2c:	e004      	b.n	8003e38 <HAL_UART_IRQHandler+0x514>
    return;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_UART_IRQHandler+0x514>
      return;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_UART_IRQHandler+0x514>
      return;
 8003e36:	bf00      	nop
  }
}
 8003e38:	37e8      	adds	r7, #232	; 0xe8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b090      	sub	sp, #64	; 0x40
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	e050      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d04c      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eb4:	f7fd fa0a 	bl	80012cc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d241      	bcs.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	613b      	str	r3, [r7, #16]
   return(result);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f18:	623a      	str	r2, [r7, #32]
 8003f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69f9      	ldr	r1, [r7, #28]
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e00f      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d09f      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3740      	adds	r7, #64	; 0x40
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b095      	sub	sp, #84	; 0x54
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f98:	643a      	str	r2, [r7, #64]	; 0x40
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e5      	bne.n	8003f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d119      	bne.n	800401c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004008:	61ba      	str	r2, [r7, #24]
 800400a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6979      	ldr	r1, [r7, #20]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	613b      	str	r3, [r7, #16]
   return(result);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800402a:	bf00      	nop
 800402c:	3754      	adds	r7, #84	; 0x54
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff09 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b21      	cmp	r3, #33	; 0x21
 8004070:	d13e      	bne.n	80040f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d114      	bne.n	80040a6 <UART_Transmit_IT+0x48>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d110      	bne.n	80040a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	621a      	str	r2, [r3, #32]
 80040a4:	e008      	b.n	80040b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6211      	str	r1, [r2, #32]
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10f      	bne.n	80040ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff fe8e 	bl	8003e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b08c      	sub	sp, #48	; 0x30
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b22      	cmp	r3, #34	; 0x22
 8004140:	f040 80ab 	bne.w	800429a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d117      	bne.n	800417e <UART_Receive_IT+0x50>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416c:	b29a      	uxth	r2, r3
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
 800417c:	e026      	b.n	80041cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004190:	d007      	beq.n	80041a2 <UART_Receive_IT+0x74>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <UART_Receive_IT+0x82>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e008      	b.n	80041c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4619      	mov	r1, r3
 80041da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d15a      	bne.n	8004296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0220 	bic.w	r2, r2, #32
 80041ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	d135      	bne.n	800428c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	613b      	str	r3, [r7, #16]
   return(result);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f023 0310 	bic.w	r3, r3, #16
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	623a      	str	r2, [r7, #32]
 8004248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	69f9      	ldr	r1, [r7, #28]
 800424c:	6a3a      	ldr	r2, [r7, #32]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	61bb      	str	r3, [r7, #24]
   return(result);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d10a      	bne.n	800427e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fdf9 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
 800428a:	e002      	b.n	8004292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fde1 	bl	8003e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e002      	b.n	800429c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	3730      	adds	r7, #48	; 0x30
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b0c0      	sub	sp, #256	; 0x100
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	ea40 0301 	orr.w	r3, r0, r1
 80042cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042fc:	f021 010c 	bic.w	r1, r1, #12
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800430a:	430b      	orrs	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	6999      	ldr	r1, [r3, #24]
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	ea40 0301 	orr.w	r3, r0, r1
 800432a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b8f      	ldr	r3, [pc, #572]	; (8004570 <UART_SetConfig+0x2cc>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d005      	beq.n	8004344 <UART_SetConfig+0xa0>
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b8d      	ldr	r3, [pc, #564]	; (8004574 <UART_SetConfig+0x2d0>)
 8004340:	429a      	cmp	r2, r3
 8004342:	d104      	bne.n	800434e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fc62 	bl	8002c0c <HAL_RCC_GetPCLK2Freq>
 8004348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800434c:	e003      	b.n	8004356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800434e:	f7fe fc49 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8004352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	f040 810c 	bne.w	800457c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800436e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	1891      	adds	r1, r2, r2
 800437c:	65b9      	str	r1, [r7, #88]	; 0x58
 800437e:	415b      	adcs	r3, r3
 8004380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004386:	4621      	mov	r1, r4
 8004388:	eb12 0801 	adds.w	r8, r2, r1
 800438c:	4629      	mov	r1, r5
 800438e:	eb43 0901 	adc.w	r9, r3, r1
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800439e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a6:	4690      	mov	r8, r2
 80043a8:	4699      	mov	r9, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	eb18 0303 	adds.w	r3, r8, r3
 80043b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043b4:	462b      	mov	r3, r5
 80043b6:	eb49 0303 	adc.w	r3, r9, r3
 80043ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043d2:	460b      	mov	r3, r1
 80043d4:	18db      	adds	r3, r3, r3
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
 80043d8:	4613      	mov	r3, r2
 80043da:	eb42 0303 	adc.w	r3, r2, r3
 80043de:	657b      	str	r3, [r7, #84]	; 0x54
 80043e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043e8:	f7fb ff52 	bl	8000290 <__aeabi_uldivmod>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4b61      	ldr	r3, [pc, #388]	; (8004578 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2302 	umull	r2, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	011c      	lsls	r4, r3, #4
 80043fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	1891      	adds	r1, r2, r2
 8004412:	64b9      	str	r1, [r7, #72]	; 0x48
 8004414:	415b      	adcs	r3, r3
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800441c:	4641      	mov	r1, r8
 800441e:	eb12 0a01 	adds.w	sl, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0b01 	adc.w	fp, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800443c:	4692      	mov	sl, r2
 800443e:	469b      	mov	fp, r3
 8004440:	4643      	mov	r3, r8
 8004442:	eb1a 0303 	adds.w	r3, sl, r3
 8004446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800444a:	464b      	mov	r3, r9
 800444c:	eb4b 0303 	adc.w	r3, fp, r3
 8004450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004468:	460b      	mov	r3, r1
 800446a:	18db      	adds	r3, r3, r3
 800446c:	643b      	str	r3, [r7, #64]	; 0x40
 800446e:	4613      	mov	r3, r2
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
 8004476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800447a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800447e:	f7fb ff07 	bl	8000290 <__aeabi_uldivmod>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4611      	mov	r1, r2
 8004488:	4b3b      	ldr	r3, [pc, #236]	; (8004578 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2301 	umull	r2, r3, r3, r1
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2264      	movs	r2, #100	; 0x64
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	1acb      	subs	r3, r1, r3
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800449e:	4b36      	ldr	r3, [pc, #216]	; (8004578 <UART_SetConfig+0x2d4>)
 80044a0:	fba3 2302 	umull	r2, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ac:	441c      	add	r4, r3
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044c8:	415b      	adcs	r3, r3
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6339      	str	r1, [r7, #48]	; 0x30
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800451c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004524:	460b      	mov	r3, r1
 8004526:	18db      	adds	r3, r3, r3
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	4613      	mov	r3, r2
 800452c:	eb42 0303 	adc.w	r3, r2, r3
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800453a:	f7fb fea9 	bl	8000290 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <UART_SetConfig+0x2d4>)
 8004544:	fba3 1302 	umull	r1, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	2164      	movs	r1, #100	; 0x64
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	3332      	adds	r3, #50	; 0x32
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <UART_SetConfig+0x2d4>)
 8004558:	fba2 2303 	umull	r2, r3, r2, r3
 800455c:	095b      	lsrs	r3, r3, #5
 800455e:	f003 0207 	and.w	r2, r3, #7
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4422      	add	r2, r4
 800456a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800456c:	e106      	b.n	800477c <UART_SetConfig+0x4d8>
 800456e:	bf00      	nop
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800457c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800458a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800458e:	4642      	mov	r2, r8
 8004590:	464b      	mov	r3, r9
 8004592:	1891      	adds	r1, r2, r2
 8004594:	6239      	str	r1, [r7, #32]
 8004596:	415b      	adcs	r3, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800459e:	4641      	mov	r1, r8
 80045a0:	1854      	adds	r4, r2, r1
 80045a2:	4649      	mov	r1, r9
 80045a4:	eb43 0501 	adc.w	r5, r3, r1
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	00eb      	lsls	r3, r5, #3
 80045b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	4614      	mov	r4, r2
 80045ba:	461d      	mov	r5, r3
 80045bc:	4643      	mov	r3, r8
 80045be:	18e3      	adds	r3, r4, r3
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045c4:	464b      	mov	r3, r9
 80045c6:	eb45 0303 	adc.w	r3, r5, r3
 80045ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045ea:	4629      	mov	r1, r5
 80045ec:	008b      	lsls	r3, r1, #2
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f4:	4621      	mov	r1, r4
 80045f6:	008a      	lsls	r2, r1, #2
 80045f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045fc:	f7fb fe48 	bl	8000290 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4b60      	ldr	r3, [pc, #384]	; (8004788 <UART_SetConfig+0x4e4>)
 8004606:	fba3 2302 	umull	r2, r3, r3, r2
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	011c      	lsls	r4, r3, #4
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800461c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	61b9      	str	r1, [r7, #24]
 8004628:	415b      	adcs	r3, r3
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6139      	str	r1, [r7, #16]
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	67bb      	str	r3, [r7, #120]	; 0x78
 800467a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800469a:	f7fb fdf9 	bl	8000290 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	4b38      	ldr	r3, [pc, #224]	; (8004788 <UART_SetConfig+0x4e4>)
 80046a6:	fba3 2301 	umull	r2, r3, r3, r1
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2264      	movs	r2, #100	; 0x64
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	1acb      	subs	r3, r1, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	; 0x32
 80046b8:	4a33      	ldr	r2, [pc, #204]	; (8004788 <UART_SetConfig+0x4e4>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c4:	441c      	add	r4, r3
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	673b      	str	r3, [r7, #112]	; 0x70
 80046ce:	677a      	str	r2, [r7, #116]	; 0x74
 80046d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	415b      	adcs	r3, r3
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	66bb      	str	r3, [r7, #104]	; 0x68
 8004716:	464b      	mov	r3, r9
 8004718:	460a      	mov	r2, r1
 800471a:	eb42 0303 	adc.w	r3, r2, r3
 800471e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	663b      	str	r3, [r7, #96]	; 0x60
 800472a:	667a      	str	r2, [r7, #100]	; 0x64
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004738:	4649      	mov	r1, r9
 800473a:	008b      	lsls	r3, r1, #2
 800473c:	4641      	mov	r1, r8
 800473e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004742:	4641      	mov	r1, r8
 8004744:	008a      	lsls	r2, r1, #2
 8004746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800474a:	f7fb fda1 	bl	8000290 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <UART_SetConfig+0x4e4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2164      	movs	r1, #100	; 0x64
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	3332      	adds	r3, #50	; 0x32
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <UART_SetConfig+0x4e4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4422      	add	r2, r4
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004782:	46bd      	mov	sp, r7
 8004784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800478c:	b084      	sub	sp, #16
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	f107 001c 	add.w	r0, r7, #28
 800479a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d122      	bne.n	80047ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d105      	bne.n	80047de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 faa2 	bl	8004d28 <USB_CoreReset>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e01a      	b.n	8004820 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa96 	bl	8004d28 <USB_CoreReset>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
 8004812:	e005      	b.n	8004820 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10b      	bne.n	800483e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f043 0206 	orr.w	r2, r3, #6
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800484a:	b004      	add	sp, #16
 800484c:	4770      	bx	lr

0800484e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d115      	bne.n	80048be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800489e:	2001      	movs	r0, #1
 80048a0:	f7fc fd20 	bl	80012e4 <HAL_Delay>
      ms++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa2e 	bl	8004d0c <USB_GetMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d01e      	beq.n	80048f4 <USB_SetCurrentMode+0x84>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b31      	cmp	r3, #49	; 0x31
 80048ba:	d9f0      	bls.n	800489e <USB_SetCurrentMode+0x2e>
 80048bc:	e01a      	b.n	80048f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d115      	bne.n	80048f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7fc fd07 	bl	80012e4 <HAL_Delay>
      ms++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa15 	bl	8004d0c <USB_GetMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <USB_SetCurrentMode+0x84>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b31      	cmp	r3, #49	; 0x31
 80048ec:	d9f0      	bls.n	80048d0 <USB_SetCurrentMode+0x60>
 80048ee:	e001      	b.n	80048f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e005      	b.n	8004900 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b32      	cmp	r3, #50	; 0x32
 80048f8:	d101      	bne.n	80048fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004908:	b084      	sub	sp, #16
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e009      	b.n	800493c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b0e      	cmp	r3, #14
 8004940:	d9f2      	bls.n	8004928 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11c      	bne.n	8004982 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
 8004980:	e00b      	b.n	800499a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ac:	4619      	mov	r1, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b4:	461a      	mov	r2, r3
 80049b6:	680b      	ldr	r3, [r1, #0]
 80049b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d10c      	bne.n	80049da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049c6:	2100      	movs	r1, #0
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f965 	bl	8004c98 <USB_SetDevSpeed>
 80049ce:	e008      	b.n	80049e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049d0:	2101      	movs	r1, #1
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f960 	bl	8004c98 <USB_SetDevSpeed>
 80049d8:	e003      	b.n	80049e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049da:	2103      	movs	r1, #3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f95b 	bl	8004c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049e2:	2110      	movs	r1, #16
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8f3 	bl	8004bd0 <USB_FlushTxFifo>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f91f 	bl	8004c38 <USB_FlushRxFifo>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e043      	b.n	8004ab6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a44:	d118      	bne.n	8004a78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e013      	b.n	8004a8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e008      	b.n	8004a8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3b7      	bcc.n	8004a2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e043      	b.n	8004b4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ada:	d118      	bne.n	8004b0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	461a      	mov	r2, r3
 8004af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e013      	b.n	8004b20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e008      	b.n	8004b20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d3b7      	bcc.n	8004ac4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f043 0210 	orr.w	r2, r3, #16
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <USB_DevInit+0x2c4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f043 0208 	orr.w	r2, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc8:	b004      	add	sp, #16
 8004bca:	4770      	bx	lr
 8004bcc:	803c3800 	.word	0x803c3800

08004bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <USB_FlushTxFifo+0x64>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e01b      	b.n	8004c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	daf2      	bge.n	8004bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	019b      	lsls	r3, r3, #6
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <USB_FlushTxFifo+0x64>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e006      	b.n	8004c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d0f0      	beq.n	8004c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00030d40 	.word	0x00030d40

08004c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <USB_FlushRxFifo+0x5c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e018      	b.n	8004c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	daf2      	bge.n	8004c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2210      	movs	r2, #16
 8004c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <USB_FlushRxFifo+0x5c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e006      	b.n	8004c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d0f0      	beq.n	8004c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	00030d40 	.word	0x00030d40

08004c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ce4:	f023 0303 	bic.w	r3, r3, #3
 8004ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0301 	and.w	r3, r3, #1
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <USB_CoreReset+0x64>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e01b      	b.n	8004d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	daf2      	bge.n	8004d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <USB_CoreReset+0x64>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e006      	b.n	8004d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d0f0      	beq.n	8004d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	00030d40 	.word	0x00030d40

08004d90 <__NVIC_SetPriority>:
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	db0a      	blt.n	8004dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	490c      	ldr	r1, [pc, #48]	; (8004ddc <__NVIC_SetPriority+0x4c>)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	0112      	lsls	r2, r2, #4
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	440b      	add	r3, r1
 8004db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004db8:	e00a      	b.n	8004dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	4908      	ldr	r1, [pc, #32]	; (8004de0 <__NVIC_SetPriority+0x50>)
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	3b04      	subs	r3, #4
 8004dc8:	0112      	lsls	r2, r2, #4
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	440b      	add	r3, r1
 8004dce:	761a      	strb	r2, [r3, #24]
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	e000e100 	.word	0xe000e100
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004de8:	2100      	movs	r1, #0
 8004dea:	f06f 0004 	mvn.w	r0, #4
 8004dee:	f7ff ffcf 	bl	8004d90 <__NVIC_SetPriority>
#endif
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dfe:	f3ef 8305 	mrs	r3, IPSR
 8004e02:	603b      	str	r3, [r7, #0]
  return(result);
 8004e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e0a:	f06f 0305 	mvn.w	r3, #5
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e00c      	b.n	8004e2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <osKernelInitialize+0x44>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <osKernelInitialize+0x44>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	e002      	b.n	8004e2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000868 	.word	0x20000868

08004e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e46:	f3ef 8305 	mrs	r3, IPSR
 8004e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e52:	f06f 0305 	mvn.w	r3, #5
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e010      	b.n	8004e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <osKernelStart+0x48>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d109      	bne.n	8004e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e62:	f7ff ffbf 	bl	8004de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e66:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <osKernelStart+0x48>)
 8004e68:	2202      	movs	r2, #2
 8004e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e6c:	f001 fb54 	bl	8006518 <vTaskStartScheduler>
      stat = osOK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e002      	b.n	8004e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e7c:	687b      	ldr	r3, [r7, #4]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000868 	.word	0x20000868

08004e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	; 0x38
 8004e90:	af04      	add	r7, sp, #16
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9c:	f3ef 8305 	mrs	r3, IPSR
 8004ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d17f      	bne.n	8004fa8 <osThreadNew+0x11c>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d07c      	beq.n	8004fa8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8004eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eb2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004eb4:	2318      	movs	r3, #24
 8004eb6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d045      	beq.n	8004f54 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <osThreadNew+0x4a>
        name = attr->name;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <osThreadNew+0x70>
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b38      	cmp	r3, #56	; 0x38
 8004eee:	d805      	bhi.n	8004efc <osThreadNew+0x70>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <osThreadNew+0x74>
        return (NULL);
 8004efc:	2300      	movs	r3, #0
 8004efe:	e054      	b.n	8004faa <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <osThreadNew+0xaa>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2ba7      	cmp	r3, #167	; 0xa7
 8004f1e:	d90a      	bls.n	8004f36 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <osThreadNew+0xaa>
        mem = 1;
 8004f30:	2301      	movs	r3, #1
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e010      	b.n	8004f58 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10c      	bne.n	8004f58 <osThreadNew+0xcc>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <osThreadNew+0xcc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <osThreadNew+0xcc>
          mem = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	e001      	b.n	8004f58 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d110      	bne.n	8004f80 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f66:	9202      	str	r2, [sp, #8]
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f001 f8e3 	bl	8006140 <xTaskCreateStatic>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e013      	b.n	8004fa8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d110      	bne.n	8004fa8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f001 f92e 	bl	80061fa <xTaskCreate>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <osThreadNew+0x11c>
            hTask = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fa8:	693b      	ldr	r3, [r7, #16]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3728      	adds	r7, #40	; 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fba:	f3ef 8305 	mrs	r3, IPSR
 8004fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <osDelay+0x1c>
    stat = osErrorISR;
 8004fc6:	f06f 0305 	mvn.w	r3, #5
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e007      	b.n	8004fde <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <osDelay+0x2c>
      vTaskDelay(ticks);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fa69 	bl	80064b0 <vTaskDelay>
    }
  }

  return (stat);
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff4:	f3ef 8305 	mrs	r3, IPSR
 8004ff8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ffa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d12d      	bne.n	800505c <osEventFlagsNew+0x74>
    mem = -1;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d006      	beq.n	8005022 <osEventFlagsNew+0x3a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b1f      	cmp	r3, #31
 800501a:	d902      	bls.n	8005022 <osEventFlagsNew+0x3a>
        mem = 1;
 800501c:	2301      	movs	r3, #1
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e00c      	b.n	800503c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d108      	bne.n	800503c <osEventFlagsNew+0x54>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <osEventFlagsNew+0x54>
          mem = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e001      	b.n	800503c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d106      	bne.n	8005050 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f8ec 	bl	8005224 <xEventGroupCreateStatic>
 800504c:	6178      	str	r0, [r7, #20]
 800504e:	e005      	b.n	800505c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005056:	f000 f91c 	bl	8005292 <xEventGroupCreate>
 800505a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800505c:	697b      	ldr	r3, [r7, #20]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <osEventFlagsSet+0x1e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005086:	f06f 0303 	mvn.w	r3, #3
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e028      	b.n	80050e0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60fb      	str	r3, [r7, #12]
  return(result);
 8005094:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01d      	beq.n	80050d6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800509e:	f107 0308 	add.w	r3, r7, #8
 80050a2:	461a      	mov	r2, r3
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6938      	ldr	r0, [r7, #16]
 80050a8:	f000 fa96 	bl	80055d8 <xEventGroupSetBitsFromISR>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80050b2:	f06f 0302 	mvn.w	r3, #2
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e012      	b.n	80050e0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <osEventFlagsSet+0x78>
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <osEventFlagsSet+0x84>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	e004      	b.n	80050e0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6938      	ldr	r0, [r7, #16]
 80050da:	f000 f9c3 	bl	8005464 <xEventGroupSetBits>
 80050de:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80050e0:	697b      	ldr	r3, [r7, #20]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08c      	sub	sp, #48	; 0x30
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <osEventFlagsWait+0x22>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005112:	f06f 0303 	mvn.w	r3, #3
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e04b      	b.n	80051b2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511a:	f3ef 8305 	mrs	r3, IPSR
 800511e:	617b      	str	r3, [r7, #20]
  return(result);
 8005120:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8005126:	f06f 0305 	mvn.w	r3, #5
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e041      	b.n	80051b2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	e001      	b.n	8005142 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	e001      	b.n	8005156 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	69b8      	ldr	r0, [r7, #24]
 8005162:	f000 f8b1 	bl	80052c8 <xEventGroupWaitBits>
 8005166:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4013      	ands	r3, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d019      	beq.n	80051b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005184:	f06f 0301 	mvn.w	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	e012      	b.n	80051b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800518c:	f06f 0302 	mvn.w	r3, #2
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	e00e      	b.n	80051b2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80051a4:	f06f 0301 	mvn.w	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e002      	b.n	80051b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80051ac:	f06f 0302 	mvn.w	r3, #2
 80051b0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80051b2:	69fb      	ldr	r3, [r7, #28]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	; 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <vApplicationGetIdleTaskMemory+0x30>)
 80051d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	2000086c 	.word	0x2000086c
 80051ec:	20000914 	.word	0x20000914

080051f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a07      	ldr	r2, [pc, #28]	; (800521c <vApplicationGetTimerTaskMemory+0x2c>)
 8005200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a06      	ldr	r2, [pc, #24]	; (8005220 <vApplicationGetTimerTaskMemory+0x30>)
 8005206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000d14 	.word	0x20000d14
 8005220:	20000dbc 	.word	0x20000dbc

08005224 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005248:	2320      	movs	r3, #32
 800524a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b20      	cmp	r3, #32
 8005250:	d00a      	beq.n	8005268 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	60fb      	str	r3, [r7, #12]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f9bf 	bl	8005600 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2201      	movs	r2, #1
 8005286:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005288:	697b      	ldr	r3, [r7, #20]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005298:	2020      	movs	r0, #32
 800529a:	f002 fced 	bl	8007c78 <pvPortMalloc>
 800529e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f9a5 	bl	8005600 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80052bc:	687b      	ldr	r3, [r7, #4]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b090      	sub	sp, #64	; 0x40
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80052de:	2300      	movs	r3, #0
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xEventGroupWaitBits+0x36>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	623b      	str	r3, [r7, #32]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <xEventGroupWaitBits+0x56>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61fb      	str	r3, [r7, #28]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61bb      	str	r3, [r7, #24]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800533a:	f001 fde7 	bl	8006f0c <xTaskGetSchedulerState>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <xEventGroupWaitBits+0x82>
 8005344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <xEventGroupWaitBits+0x86>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <xEventGroupWaitBits+0x88>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	617b      	str	r3, [r7, #20]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800536a:	f001 f945 	bl	80065f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800537a:	f000 f90b 	bl	8005594 <prvTestWaitCondition>
 800537e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800538a:	2300      	movs	r3, #0
 800538c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d028      	beq.n	80053e6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	43db      	mvns	r3, r3
 800539c:	401a      	ands	r2, r3
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e020      	b.n	80053e6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80053a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
 80053b2:	e018      	b.n	80053e6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80053d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d2:	1d18      	adds	r0, r3, #4
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	4313      	orrs	r3, r2
 80053da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053dc:	4619      	mov	r1, r3
 80053de:	f001 fb09 	bl	80069f4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80053e6:	f001 f915 	bl	8006614 <xTaskResumeAll>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80053ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d031      	beq.n	8005456 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <xEventGroupWaitBits+0x198>)
 80053fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005408:	f001 fe0c 	bl	8007024 <uxTaskResetEventItemValue>
 800540c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11a      	bne.n	800544e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005418:	f002 fb0c 	bl	8007a34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005428:	f000 f8b4 	bl	8005594 <prvTestWaitCondition>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	43db      	mvns	r3, r3
 8005440:	401a      	ands	r2, r3
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800544a:	f002 fb23 	bl	8007a94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005458:	4618      	mov	r0, r3
 800545a:	3740      	adds	r7, #64	; 0x40
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	; 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800546e:	2300      	movs	r3, #0
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005476:	2300      	movs	r3, #0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <xEventGroupSetBits+0x32>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <xEventGroupSetBits+0x52>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	3304      	adds	r3, #4
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	3308      	adds	r3, #8
 80054c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80054c2:	f001 f899 	bl	80065f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80054d8:	e03c      	b.n	8005554 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	e008      	b.n	8005528 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d101      	bne.n	8005528 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005548:	4619      	mov	r1, r3
 800554a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800554c:	f001 fb1e 	bl	8006b8c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	429a      	cmp	r2, r3
 800555a:	d1be      	bne.n	80054da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	43db      	mvns	r3, r3
 8005564:	401a      	ands	r2, r3
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800556a:	f001 f853 	bl	8006614 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	681b      	ldr	r3, [r3, #0]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3738      	adds	r7, #56	; 0x38
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff ff6c 	bl	8005464 <xEventGroupSetBits>
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d107      	bne.n	80055ba <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055b4:	2301      	movs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e007      	b.n	80055ca <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d101      	bne.n	80055ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80055ca:	697b      	ldr	r3, [r7, #20]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <xEventGroupSetBitsFromISR+0x24>)
 80055ec:	f002 f8d4 	bl	8007798 <xTimerPendFunctionCallFromISR>
 80055f0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80055f2:	697b      	ldr	r3, [r7, #20]
	}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0800557b 	.word	0x0800557b

08005600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 0208 	add.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f04f 32ff 	mov.w	r2, #4294967295
 8005618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f103 0208 	add.w	r2, r3, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f103 0208 	add.w	r2, r3, #8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d103      	bne.n	80056c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e00c      	b.n	80056dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3308      	adds	r3, #8
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e002      	b.n	80056d0 <vListInsert+0x2e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d2f6      	bcs.n	80056ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d103      	bne.n	8005748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericReset+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60bb      	str	r3, [r7, #8]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005792:	f002 f94f 	bl	8007a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	3b01      	subs	r3, #1
 80057c4:	68f9      	ldr	r1, [r7, #12]
 80057c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d114      	bne.n	8005812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01a      	beq.n	8005826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3310      	adds	r3, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 f965 	bl	8006ac4 <xTaskRemoveFromEventList>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <xQueueGenericReset+0xcc>)
 8005802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	e009      	b.n	8005826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3310      	adds	r3, #16
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fef2 	bl	8005600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3324      	adds	r3, #36	; 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff feed 	bl	8005600 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005826:	f002 f935 	bl	8007a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <xQueueGenericCreateStatic+0x52>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <xQueueGenericCreateStatic+0x56>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericCreateStatic+0x58>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <xQueueGenericCreateStatic+0x7e>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <xQueueGenericCreateStatic+0x82>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueGenericCreateStatic+0x84>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058d6:	2350      	movs	r3, #80	; 0x50
 80058d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b50      	cmp	r3, #80	; 0x50
 80058de:	d00a      	beq.n	80058f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61bb      	str	r3, [r7, #24]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800590a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f805 	bl	8005928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3730      	adds	r7, #48	; 0x30
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e002      	b.n	800594a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005956:	2101      	movs	r1, #1
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff ff05 	bl	8005768 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericSend+0x32>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <xQueueGenericSend+0x40>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <xQueueGenericSend+0x44>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <xQueueGenericSend+0x46>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueGenericSend+0x60>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d103      	bne.n	80059de <xQueueGenericSend+0x6e>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericSend+0x72>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericSend+0x74>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericSend+0x8e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	623b      	str	r3, [r7, #32]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 fa85 	bl	8006f0c <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueGenericSend+0x9e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSend+0xa2>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSend+0xa4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61fb      	str	r3, [r7, #28]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f002 f801 	bl	8007a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <xQueueGenericSend+0xd4>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d129      	bne.n	8005a98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4a:	f000 fa0b 	bl	8005e64 <prvCopyDataToQueue>
 8005a4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d010      	beq.n	8005a7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f831 	bl	8006ac4 <xTaskRemoveFromEventList>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d013      	beq.n	8005a90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a68:	4b3f      	ldr	r3, [pc, #252]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	e00a      	b.n	8005a90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a80:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a90:	f002 f800 	bl	8007a94 <vPortExitCritical>
				return pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e063      	b.n	8005b60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a9e:	f001 fff9 	bl	8007a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e05c      	b.n	8005b60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f8cd 	bl	8006c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aba:	f001 ffeb 	bl	8007a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005abe:	f000 fd9b 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac2:	f001 ffb7 	bl	8007a34 <vPortEnterCritical>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <xQueueGenericSend+0x16c>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae2:	b25b      	sxtb	r3, r3
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d103      	bne.n	8005af2 <xQueueGenericSend+0x182>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005af2:	f001 ffcf 	bl	8007a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af6:	1d3a      	adds	r2, r7, #4
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f8bc 	bl	8006c7c <xTaskCheckForTimeOut>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d124      	bne.n	8005b54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b0c:	f000 faa2 	bl	8006054 <prvIsQueueFull>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d018      	beq.n	8005b48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	3310      	adds	r3, #16
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 ff44 	bl	80069ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b26:	f000 fa2d 	bl	8005f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b2a:	f000 fd73 	bl	8006614 <xTaskResumeAll>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f af7c 	bne.w	8005a2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <xQueueGenericSend+0x1f8>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	e772      	b.n	8005a2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4a:	f000 fa1b 	bl	8005f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4e:	f000 fd61 	bl	8006614 <xTaskResumeAll>
 8005b52:	e76c      	b.n	8005a2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b56:	f000 fa15 	bl	8005f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5a:	f000 fd5b 	bl	8006614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3738      	adds	r7, #56	; 0x38
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b090      	sub	sp, #64	; 0x40
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <xQueueGenericSendFromISR+0x3c>
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <xQueueGenericSendFromISR+0x40>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <xQueueGenericSendFromISR+0x42>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d103      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x6a>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <xQueueGenericSendFromISR+0x6e>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <xQueueGenericSendFromISR+0x70>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	623b      	str	r3, [r7, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf6:	f001 ffff 	bl	8007bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <xQueueGenericSendFromISR+0xbc>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d12f      	bne.n	8005c88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c3e:	f000 f911 	bl	8005e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d112      	bne.n	8005c72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	3324      	adds	r3, #36	; 0x24
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 ff33 	bl	8006ac4 <xTaskRemoveFromEventList>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e007      	b.n	8005c82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c76:	3301      	adds	r3, #1
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	b25a      	sxtb	r2, r3
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c82:	2301      	movs	r3, #1
 8005c84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c86:	e001      	b.n	8005c8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3740      	adds	r7, #64	; 0x40
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <xQueueReceive+0x30>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	623b      	str	r3, [r7, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <xQueueReceive+0x3e>
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <xQueueReceive+0x42>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <xQueueReceive+0x44>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xQueueReceive+0x5e>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	61fb      	str	r3, [r7, #28]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d02:	f001 f903 	bl	8006f0c <xTaskGetSchedulerState>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <xQueueReceive+0x6e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueReceive+0x72>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueReceive+0x74>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueReceive+0x8e>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61bb      	str	r3, [r7, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d32:	f001 fe7f 	bl	8007a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01f      	beq.n	8005d82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d46:	f000 f8f7 	bl	8005f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00f      	beq.n	8005d7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	3310      	adds	r3, #16
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 feb0 	bl	8006ac4 <xTaskRemoveFromEventList>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d6a:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <xQueueReceive+0x1bc>)
 8005d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d7a:	f001 fe8b 	bl	8007a94 <vPortExitCritical>
				return pdPASS;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e069      	b.n	8005e56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d88:	f001 fe84 	bl	8007a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e062      	b.n	8005e56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d96:	f107 0310 	add.w	r3, r7, #16
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 ff58 	bl	8006c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005da4:	f001 fe76 	bl	8007a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005da8:	f000 fc26 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dac:	f001 fe42 	bl	8007a34 <vPortEnterCritical>
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db6:	b25b      	sxtb	r3, r3
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d103      	bne.n	8005dc6 <xQueueReceive+0x122>
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d103      	bne.n	8005ddc <xQueueReceive+0x138>
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ddc:	f001 fe5a 	bl	8007a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005de0:	1d3a      	adds	r2, r7, #4
 8005de2:	f107 0310 	add.w	r3, r7, #16
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 ff47 	bl	8006c7c <xTaskCheckForTimeOut>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d123      	bne.n	8005e3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 f917 	bl	8006028 <prvIsQueueEmpty>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d017      	beq.n	8005e30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	3324      	adds	r3, #36	; 0x24
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4611      	mov	r1, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fdcf 	bl	80069ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f000 f8b8 	bl	8005f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e14:	f000 fbfe 	bl	8006614 <xTaskResumeAll>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d189      	bne.n	8005d32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e1e:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xQueueReceive+0x1bc>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	e780      	b.n	8005d32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e32:	f000 f8a7 	bl	8005f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e36:	f000 fbed 	bl	8006614 <xTaskResumeAll>
 8005e3a:	e77a      	b.n	8005d32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3e:	f000 f8a1 	bl	8005f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e42:	f000 fbe7 	bl	8006614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e48:	f000 f8ee 	bl	8006028 <prvIsQueueEmpty>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f43f af6f 	beq.w	8005d32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3730      	adds	r7, #48	; 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	e000ed04 	.word	0xe000ed04

08005e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10d      	bne.n	8005e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d14d      	bne.n	8005f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f85a 	bl	8006f48 <xTaskPriorityDisinherit>
 8005e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	e043      	b.n	8005f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d119      	bne.n	8005ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6858      	ldr	r0, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	461a      	mov	r2, r3
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	f002 fb92 	bl	80085d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d32b      	bcc.n	8005f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	e026      	b.n	8005f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68d8      	ldr	r0, [r3, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	f002 fb78 	bl	80085d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	441a      	add	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d207      	bcs.n	8005f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d105      	bne.n	8005f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f2e:	697b      	ldr	r3, [r7, #20]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	441a      	add	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d303      	bcc.n	8005f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68d9      	ldr	r1, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	461a      	mov	r2, r3
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	f002 fb2e 	bl	80085d8 <memcpy>
	}
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f8c:	f001 fd52 	bl	8007a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f98:	e011      	b.n	8005fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d012      	beq.n	8005fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fd8c 	bl	8006ac4 <xTaskRemoveFromEventList>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fb2:	f000 fec5 	bl	8006d40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dce9      	bgt.n	8005f9a <prvUnlockQueue+0x16>
 8005fc6:	e000      	b.n	8005fca <prvUnlockQueue+0x46>
					break;
 8005fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	22ff      	movs	r2, #255	; 0xff
 8005fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fd2:	f001 fd5f 	bl	8007a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fd6:	f001 fd2d 	bl	8007a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fe2:	e011      	b.n	8006008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d012      	beq.n	8006012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3310      	adds	r3, #16
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fd67 	bl	8006ac4 <xTaskRemoveFromEventList>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ffc:	f000 fea0 	bl	8006d40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	3b01      	subs	r3, #1
 8006004:	b2db      	uxtb	r3, r3
 8006006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800600c:	2b00      	cmp	r3, #0
 800600e:	dce9      	bgt.n	8005fe4 <prvUnlockQueue+0x60>
 8006010:	e000      	b.n	8006014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800601c:	f001 fd3a 	bl	8007a94 <vPortExitCritical>
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006030:	f001 fd00 	bl	8007a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e001      	b.n	8006046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006046:	f001 fd25 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800605c:	f001 fcea 	bl	8007a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	429a      	cmp	r2, r3
 800606a:	d102      	bne.n	8006072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e001      	b.n	8006076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006076:	f001 fd0d 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e014      	b.n	80060be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <vQueueAddToRegistry+0x50>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060a0:	490c      	ldr	r1, [pc, #48]	; (80060d4 <vQueueAddToRegistry+0x50>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060aa:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <vQueueAddToRegistry+0x50>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4413      	add	r3, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060b6:	e006      	b.n	80060c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b07      	cmp	r3, #7
 80060c2:	d9e7      	bls.n	8006094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	200015bc 	.word	0x200015bc

080060d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060e8:	f001 fca4 	bl	8007a34 <vPortEnterCritical>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060f2:	b25b      	sxtb	r3, r3
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d103      	bne.n	8006102 <vQueueWaitForMessageRestricted+0x2a>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006108:	b25b      	sxtb	r3, r3
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d103      	bne.n	8006118 <vQueueWaitForMessageRestricted+0x40>
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006118:	f001 fcbc 	bl	8007a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fc9d 	bl	8006a6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006132:	6978      	ldr	r0, [r7, #20]
 8006134:	f7ff ff26 	bl	8005f84 <prvUnlockQueue>
	}
 8006138:	bf00      	nop
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af04      	add	r7, sp, #16
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	623b      	str	r3, [r7, #32]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xTaskCreateStatic+0x46>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	61fb      	str	r3, [r7, #28]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006186:	23a8      	movs	r3, #168	; 0xa8
 8006188:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2ba8      	cmp	r3, #168	; 0xa8
 800618e:	d00a      	beq.n	80061a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61bb      	str	r3, [r7, #24]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01e      	beq.n	80061ec <xTaskCreateStatic+0xac>
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01b      	beq.n	80061ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061c6:	2300      	movs	r3, #0
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	9302      	str	r3, [sp, #8]
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f850 	bl	8006284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061e6:	f000 f8f3 	bl	80063d0 <prvAddNewTaskToReadyList>
 80061ea:	e001      	b.n	80061f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061f0:	697b      	ldr	r3, [r7, #20]
	}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b08c      	sub	sp, #48	; 0x30
 80061fe:	af04      	add	r7, sp, #16
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fd32 	bl	8007c78 <pvPortMalloc>
 8006214:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800621c:	20a8      	movs	r0, #168	; 0xa8
 800621e:	f001 fd2b 	bl	8007c78 <pvPortMalloc>
 8006222:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
 8006230:	e005      	b.n	800623e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006232:	6978      	ldr	r0, [r7, #20]
 8006234:	f001 fdec 	bl	8007e10 <vPortFree>
 8006238:	e001      	b.n	800623e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800624c:	88fa      	ldrh	r2, [r7, #6]
 800624e:	2300      	movs	r3, #0
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 f80e 	bl	8006284 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006268:	69f8      	ldr	r0, [r7, #28]
 800626a:	f000 f8b1 	bl	80063d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800626e:	2301      	movs	r3, #1
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e002      	b.n	800627a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295
 8006278:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800627a:	69bb      	ldr	r3, [r7, #24]
	}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	461a      	mov	r2, r3
 800629c:	21a5      	movs	r1, #165	; 0xa5
 800629e:	f002 f8cb 	bl	8008438 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062ac:	3b01      	subs	r3, #1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	617b      	str	r3, [r7, #20]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01f      	beq.n	8006322 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062e2:	2300      	movs	r3, #0
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	e012      	b.n	800630e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	7819      	ldrb	r1, [r3, #0]
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	3334      	adds	r3, #52	; 0x34
 80062f8:	460a      	mov	r2, r1
 80062fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d006      	beq.n	8006316 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	3301      	adds	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d9e9      	bls.n	80062e8 <prvInitialiseNewTask+0x64>
 8006314:	e000      	b.n	8006318 <prvInitialiseNewTask+0x94>
			{
				break;
 8006316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006320:	e003      	b.n	800632a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2b37      	cmp	r3, #55	; 0x37
 800632e:	d901      	bls.n	8006334 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006330:	2337      	movs	r3, #55	; 0x37
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800633e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2200      	movs	r2, #0
 8006344:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	3304      	adds	r3, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff f978 	bl	8005640 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	3318      	adds	r3, #24
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff f973 	bl	8005640 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	2200      	movs	r2, #0
 800637c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	3354      	adds	r3, #84	; 0x54
 8006384:	224c      	movs	r2, #76	; 0x4c
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f002 f855 	bl	8008438 <memset>
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <prvInitialiseNewTask+0x140>)
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <prvInitialiseNewTask+0x144>)
 8006398:	65da      	str	r2, [r3, #92]	; 0x5c
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <prvInitialiseNewTask+0x148>)
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f001 fa17 	bl	80077d8 <pxPortInitialiseStack>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063bc:	bf00      	nop
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20005850 	.word	0x20005850
 80063c8:	200058b8 	.word	0x200058b8
 80063cc:	20005920 	.word	0x20005920

080063d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d8:	f001 fb2c 	bl	8007a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063dc:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <prvAddNewTaskToReadyList+0xc4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	4a2c      	ldr	r2, [pc, #176]	; (8006494 <prvAddNewTaskToReadyList+0xc4>)
 80063e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e6:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ee:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <prvAddNewTaskToReadyList+0xc4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d110      	bne.n	800641e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063fc:	f000 fcc4 	bl	8006d88 <prvInitialiseTaskLists>
 8006400:	e00d      	b.n	800641e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006402:	4b26      	ldr	r3, [pc, #152]	; (800649c <prvAddNewTaskToReadyList+0xcc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800640a:	4b23      	ldr	r3, [pc, #140]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d802      	bhi.n	800641e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641e:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <prvAddNewTaskToReadyList+0xd0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <prvAddNewTaskToReadyList+0xd0>)
 8006426:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <prvAddNewTaskToReadyList+0xd0>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <prvAddNewTaskToReadyList+0xd4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d903      	bls.n	8006444 <prvAddNewTaskToReadyList+0x74>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <prvAddNewTaskToReadyList+0xd4>)
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <prvAddNewTaskToReadyList+0xd8>)
 8006452:	441a      	add	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f7ff f8fd 	bl	800565a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006460:	f001 fb18 	bl	8007a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006464:	4b0d      	ldr	r3, [pc, #52]	; (800649c <prvAddNewTaskToReadyList+0xcc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <prvAddNewTaskToReadyList+0xc8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	429a      	cmp	r2, r3
 8006478:	d207      	bcs.n	800648a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <prvAddNewTaskToReadyList+0xdc>)
 800647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20001ad0 	.word	0x20001ad0
 8006498:	200015fc 	.word	0x200015fc
 800649c:	20001adc 	.word	0x20001adc
 80064a0:	20001aec 	.word	0x20001aec
 80064a4:	20001ad8 	.word	0x20001ad8
 80064a8:	20001600 	.word	0x20001600
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064c2:	4b13      	ldr	r3, [pc, #76]	; (8006510 <vTaskDelay+0x60>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vTaskDelay+0x30>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064e0:	f000 f88a 	bl	80065f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fdb4 	bl	8007054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ec:	f000 f892 	bl	8006614 <xTaskResumeAll>
 80064f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <vTaskDelay+0x64>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20001af8 	.word	0x20001af8
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006526:	463a      	mov	r2, r7
 8006528:	1d39      	adds	r1, r7, #4
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fe44 	bl	80051bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	9202      	str	r2, [sp, #8]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	2300      	movs	r3, #0
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	2300      	movs	r3, #0
 8006544:	460a      	mov	r2, r1
 8006546:	4924      	ldr	r1, [pc, #144]	; (80065d8 <vTaskStartScheduler+0xc0>)
 8006548:	4824      	ldr	r0, [pc, #144]	; (80065dc <vTaskStartScheduler+0xc4>)
 800654a:	f7ff fdf9 	bl	8006140 <xTaskCreateStatic>
 800654e:	4603      	mov	r3, r0
 8006550:	4a23      	ldr	r2, [pc, #140]	; (80065e0 <vTaskStartScheduler+0xc8>)
 8006552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006554:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <vTaskStartScheduler+0xc8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e001      	b.n	8006566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800656c:	f000 fdc6 	bl	80070fc <xTimerCreateTimerTask>
 8006570:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d11b      	bne.n	80065b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	613b      	str	r3, [r7, #16]
}
 800658a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800658c:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <vTaskStartScheduler+0xcc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3354      	adds	r3, #84	; 0x54
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <vTaskStartScheduler+0xd0>)
 8006594:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <vTaskStartScheduler+0xd4>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <vTaskStartScheduler+0xd8>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a4:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <vTaskStartScheduler+0xdc>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065aa:	f001 f9a1 	bl	80078f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ae:	e00e      	b.n	80065ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d10a      	bne.n	80065ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <vTaskStartScheduler+0xb4>
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	08009074 	.word	0x08009074
 80065dc:	08006d59 	.word	0x08006d59
 80065e0:	20001af4 	.word	0x20001af4
 80065e4:	200015fc 	.word	0x200015fc
 80065e8:	20000068 	.word	0x20000068
 80065ec:	20001af0 	.word	0x20001af0
 80065f0:	20001adc 	.word	0x20001adc
 80065f4:	20001ad4 	.word	0x20001ad4

080065f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <vTaskSuspendAll+0x18>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a03      	ldr	r2, [pc, #12]	; (8006610 <vTaskSuspendAll+0x18>)
 8006604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20001af8 	.word	0x20001af8

08006614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006622:	4b42      	ldr	r3, [pc, #264]	; (800672c <xTaskResumeAll+0x118>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xTaskResumeAll+0x2c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006640:	f001 f9f8 	bl	8007a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <xTaskResumeAll+0x118>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3b01      	subs	r3, #1
 800664a:	4a38      	ldr	r2, [pc, #224]	; (800672c <xTaskResumeAll+0x118>)
 800664c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664e:	4b37      	ldr	r3, [pc, #220]	; (800672c <xTaskResumeAll+0x118>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d162      	bne.n	800671c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006656:	4b36      	ldr	r3, [pc, #216]	; (8006730 <xTaskResumeAll+0x11c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d05e      	beq.n	800671c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665e:	e02f      	b.n	80066c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	4b34      	ldr	r3, [pc, #208]	; (8006734 <xTaskResumeAll+0x120>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3318      	adds	r3, #24
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff f851 	bl	8005714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f84c 	bl	8005714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <xTaskResumeAll+0x124>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d903      	bls.n	8006690 <xTaskResumeAll+0x7c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a2a      	ldr	r2, [pc, #168]	; (8006738 <xTaskResumeAll+0x124>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <xTaskResumeAll+0x128>)
 800669e:	441a      	add	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe ffd7 	bl	800565a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	4b23      	ldr	r3, [pc, #140]	; (8006740 <xTaskResumeAll+0x12c>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <xTaskResumeAll+0x130>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066c0:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <xTaskResumeAll+0x120>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1cb      	bne.n	8006660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ce:	f000 fbfd 	bl	8006ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <xTaskResumeAll+0x134>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066de:	f000 f847 	bl	8006770 <xTaskIncrementTick>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <xTaskResumeAll+0x130>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f1      	bne.n	80066de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <xTaskResumeAll+0x134>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <xTaskResumeAll+0x130>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d009      	beq.n	800671c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <xTaskResumeAll+0x138>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671c:	f001 f9ba 	bl	8007a94 <vPortExitCritical>

	return xAlreadyYielded;
 8006720:	68bb      	ldr	r3, [r7, #8]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20001af8 	.word	0x20001af8
 8006730:	20001ad0 	.word	0x20001ad0
 8006734:	20001a90 	.word	0x20001a90
 8006738:	20001ad8 	.word	0x20001ad8
 800673c:	20001600 	.word	0x20001600
 8006740:	200015fc 	.word	0x200015fc
 8006744:	20001ae4 	.word	0x20001ae4
 8006748:	20001ae0 	.word	0x20001ae0
 800674c:	e000ed04 	.word	0xe000ed04

08006750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <xTaskGetTickCount+0x1c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800675c:	687b      	ldr	r3, [r7, #4]
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20001ad4 	.word	0x20001ad4

08006770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800677a:	4b4f      	ldr	r3, [pc, #316]	; (80068b8 <xTaskIncrementTick+0x148>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 808f 	bne.w	80068a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006784:	4b4d      	ldr	r3, [pc, #308]	; (80068bc <xTaskIncrementTick+0x14c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800678c:	4a4b      	ldr	r2, [pc, #300]	; (80068bc <xTaskIncrementTick+0x14c>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d120      	bne.n	80067da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006798:	4b49      	ldr	r3, [pc, #292]	; (80068c0 <xTaskIncrementTick+0x150>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	603b      	str	r3, [r7, #0]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xTaskIncrementTick+0x46>
 80067b8:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	4b41      	ldr	r3, [pc, #260]	; (80068c4 <xTaskIncrementTick+0x154>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4a3f      	ldr	r2, [pc, #252]	; (80068c4 <xTaskIncrementTick+0x154>)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b3e      	ldr	r3, [pc, #248]	; (80068c8 <xTaskIncrementTick+0x158>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a3d      	ldr	r2, [pc, #244]	; (80068c8 <xTaskIncrementTick+0x158>)
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f000 fb79 	bl	8006ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067da:	4b3c      	ldr	r3, [pc, #240]	; (80068cc <xTaskIncrementTick+0x15c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d349      	bcc.n	8006878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	4b37      	ldr	r3, [pc, #220]	; (80068cc <xTaskIncrementTick+0x15c>)
 80067f0:	f04f 32ff 	mov.w	r2, #4294967295
 80067f4:	601a      	str	r2, [r3, #0]
					break;
 80067f6:	e03f      	b.n	8006878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xTaskIncrementTick+0x150>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	d203      	bcs.n	8006818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006810:	4a2e      	ldr	r2, [pc, #184]	; (80068cc <xTaskIncrementTick+0x15c>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006816:	e02f      	b.n	8006878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe ff79 	bl	8005714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3318      	adds	r3, #24
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe ff70 	bl	8005714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <xTaskIncrementTick+0x160>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d903      	bls.n	8006848 <xTaskIncrementTick+0xd8>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <xTaskIncrementTick+0x160>)
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <xTaskIncrementTick+0x164>)
 8006856:	441a      	add	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7fe fefb 	bl	800565a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <xTaskIncrementTick+0x168>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	429a      	cmp	r2, r3
 8006870:	d3b8      	bcc.n	80067e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006876:	e7b5      	b.n	80067e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006878:	4b17      	ldr	r3, [pc, #92]	; (80068d8 <xTaskIncrementTick+0x168>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4915      	ldr	r1, [pc, #84]	; (80068d4 <xTaskIncrementTick+0x164>)
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d901      	bls.n	8006894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <xTaskIncrementTick+0x16c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e004      	b.n	80068ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <xTaskIncrementTick+0x170>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3301      	adds	r3, #1
 80068a8:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <xTaskIncrementTick+0x170>)
 80068aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068ac:	697b      	ldr	r3, [r7, #20]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20001af8 	.word	0x20001af8
 80068bc:	20001ad4 	.word	0x20001ad4
 80068c0:	20001a88 	.word	0x20001a88
 80068c4:	20001a8c 	.word	0x20001a8c
 80068c8:	20001ae8 	.word	0x20001ae8
 80068cc:	20001af0 	.word	0x20001af0
 80068d0:	20001ad8 	.word	0x20001ad8
 80068d4:	20001600 	.word	0x20001600
 80068d8:	200015fc 	.word	0x200015fc
 80068dc:	20001ae4 	.word	0x20001ae4
 80068e0:	20001ae0 	.word	0x20001ae0

080068e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ea:	4b2a      	ldr	r3, [pc, #168]	; (8006994 <vTaskSwitchContext+0xb0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068f2:	4b29      	ldr	r3, [pc, #164]	; (8006998 <vTaskSwitchContext+0xb4>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f8:	e046      	b.n	8006988 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068fa:	4b27      	ldr	r3, [pc, #156]	; (8006998 <vTaskSwitchContext+0xb4>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b26      	ldr	r3, [pc, #152]	; (800699c <vTaskSwitchContext+0xb8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e010      	b.n	800692a <vTaskSwitchContext+0x46>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <vTaskSwitchContext+0x40>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	607b      	str	r3, [r7, #4]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vTaskSwitchContext+0x3e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b01      	subs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	491d      	ldr	r1, [pc, #116]	; (80069a0 <vTaskSwitchContext+0xbc>)
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0e4      	beq.n	8006908 <vTaskSwitchContext+0x24>
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <vTaskSwitchContext+0xbc>)
 800694a:	4413      	add	r3, r2
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3308      	adds	r3, #8
 8006960:	429a      	cmp	r2, r3
 8006962:	d104      	bne.n	800696e <vTaskSwitchContext+0x8a>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	4a0b      	ldr	r2, [pc, #44]	; (80069a4 <vTaskSwitchContext+0xc0>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4a08      	ldr	r2, [pc, #32]	; (800699c <vTaskSwitchContext+0xb8>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <vTaskSwitchContext+0xc0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3354      	adds	r3, #84	; 0x54
 8006984:	4a08      	ldr	r2, [pc, #32]	; (80069a8 <vTaskSwitchContext+0xc4>)
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20001af8 	.word	0x20001af8
 8006998:	20001ae4 	.word	0x20001ae4
 800699c:	20001ad8 	.word	0x20001ad8
 80069a0:	20001600 	.word	0x20001600
 80069a4:	200015fc 	.word	0x200015fc
 80069a8:	20000068 	.word	0x20000068

080069ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	60fb      	str	r3, [r7, #12]
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <vTaskPlaceOnEventList+0x44>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fe fe61 	bl	80056a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069e0:	2101      	movs	r1, #1
 80069e2:	6838      	ldr	r0, [r7, #0]
 80069e4:	f000 fb36 	bl	8007054 <prvAddCurrentTaskToDelayedList>
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200015fc 	.word	0x200015fc

080069f4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	617b      	str	r3, [r7, #20]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006a1c:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	613b      	str	r3, [r7, #16]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006a3a:	4b0b      	ldr	r3, [pc, #44]	; (8006a68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a44:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a46:	4b08      	ldr	r3, [pc, #32]	; (8006a68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fe fe03 	bl	800565a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a54:	2101      	movs	r1, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fafc 	bl	8007054 <prvAddCurrentTaskToDelayedList>
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20001af8 	.word	0x20001af8
 8006a68:	200015fc 	.word	0x200015fc

08006a6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	617b      	str	r3, [r7, #20]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3318      	adds	r3, #24
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7fe fddc 	bl	800565a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	68b8      	ldr	r0, [r7, #8]
 8006ab2:	f000 facf 	bl	8007054 <prvAddCurrentTaskToDelayedList>
	}
 8006ab6:	bf00      	nop
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200015fc 	.word	0x200015fc

08006ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	60fb      	str	r3, [r7, #12]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3318      	adds	r3, #24
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fe0d 	bl	8005714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afa:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <xTaskRemoveFromEventList+0xb0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d11d      	bne.n	8006b3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fe04 	bl	8005714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <xTaskRemoveFromEventList+0xb4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d903      	bls.n	8006b20 <xTaskRemoveFromEventList+0x5c>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <xTaskRemoveFromEventList+0xb4>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <xTaskRemoveFromEventList+0xb8>)
 8006b2e:	441a      	add	r2, r3
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	4610      	mov	r0, r2
 8006b38:	f7fe fd8f 	bl	800565a <vListInsertEnd>
 8006b3c:	e005      	b.n	8006b4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3318      	adds	r3, #24
 8006b42:	4619      	mov	r1, r3
 8006b44:	480e      	ldr	r0, [pc, #56]	; (8006b80 <xTaskRemoveFromEventList+0xbc>)
 8006b46:	f7fe fd88 	bl	800565a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <xTaskRemoveFromEventList+0xc0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d905      	bls.n	8006b64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <xTaskRemoveFromEventList+0xc4>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e001      	b.n	8006b68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b68:	697b      	ldr	r3, [r7, #20]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20001af8 	.word	0x20001af8
 8006b78:	20001ad8 	.word	0x20001ad8
 8006b7c:	20001600 	.word	0x20001600
 8006b80:	20001a90 	.word	0x20001a90
 8006b84:	200015fc 	.word	0x200015fc
 8006b88:	20001ae4 	.word	0x20001ae4

08006b8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	613b      	str	r3, [r7, #16]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	60fb      	str	r3, [r7, #12]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fe fd97 	bl	8005714 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fd92 	bl	8005714 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d903      	bls.n	8006c04 <vTaskRemoveFromUnorderedEventList+0x78>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a0f      	ldr	r2, [pc, #60]	; (8006c40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a0c      	ldr	r2, [pc, #48]	; (8006c44 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006c12:	441a      	add	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7fe fd1d 	bl	800565a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d902      	bls.n	8006c34 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006c2e:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
	}
}
 8006c34:	bf00      	nop
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20001af8 	.word	0x20001af8
 8006c40:	20001ad8 	.word	0x20001ad8
 8006c44:	20001600 	.word	0x20001600
 8006c48:	200015fc 	.word	0x200015fc
 8006c4c:	20001ae4 	.word	0x20001ae4

08006c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <vTaskInternalSetTimeOutState+0x24>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <vTaskInternalSetTimeOutState+0x28>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	605a      	str	r2, [r3, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20001ae8 	.word	0x20001ae8
 8006c78:	20001ad4 	.word	0x20001ad4

08006c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	613b      	str	r3, [r7, #16]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cbe:	f000 feb9 	bl	8007a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cc2:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <xTaskCheckForTimeOut+0xbc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d102      	bne.n	8006ce2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e023      	b.n	8006d2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <xTaskCheckForTimeOut+0xc0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d007      	beq.n	8006cfe <xTaskCheckForTimeOut+0x82>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	e015      	b.n	8006d2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d20b      	bcs.n	8006d20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ff9b 	bl	8006c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	e004      	b.n	8006d2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d26:	2301      	movs	r3, #1
 8006d28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f000 feb3 	bl	8007a94 <vPortExitCritical>

	return xReturn;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20001ad4 	.word	0x20001ad4
 8006d3c:	20001ae8 	.word	0x20001ae8

08006d40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <vTaskMissedYield+0x14>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	20001ae4 	.word	0x20001ae4

08006d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d60:	f000 f852 	bl	8006e08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <prvIdleTask+0x28>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d9f9      	bls.n	8006d60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <prvIdleTask+0x2c>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d7c:	e7f0      	b.n	8006d60 <prvIdleTask+0x8>
 8006d7e:	bf00      	nop
 8006d80:	20001600 	.word	0x20001600
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d8e:	2300      	movs	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	e00c      	b.n	8006dae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <prvInitialiseTaskLists+0x60>)
 8006da0:	4413      	add	r3, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fc2c 	bl	8005600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3301      	adds	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b37      	cmp	r3, #55	; 0x37
 8006db2:	d9ef      	bls.n	8006d94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006db4:	480d      	ldr	r0, [pc, #52]	; (8006dec <prvInitialiseTaskLists+0x64>)
 8006db6:	f7fe fc23 	bl	8005600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dba:	480d      	ldr	r0, [pc, #52]	; (8006df0 <prvInitialiseTaskLists+0x68>)
 8006dbc:	f7fe fc20 	bl	8005600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dc0:	480c      	ldr	r0, [pc, #48]	; (8006df4 <prvInitialiseTaskLists+0x6c>)
 8006dc2:	f7fe fc1d 	bl	8005600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dc6:	480c      	ldr	r0, [pc, #48]	; (8006df8 <prvInitialiseTaskLists+0x70>)
 8006dc8:	f7fe fc1a 	bl	8005600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dcc:	480b      	ldr	r0, [pc, #44]	; (8006dfc <prvInitialiseTaskLists+0x74>)
 8006dce:	f7fe fc17 	bl	8005600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvInitialiseTaskLists+0x78>)
 8006dd4:	4a05      	ldr	r2, [pc, #20]	; (8006dec <prvInitialiseTaskLists+0x64>)
 8006dd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <prvInitialiseTaskLists+0x7c>)
 8006dda:	4a05      	ldr	r2, [pc, #20]	; (8006df0 <prvInitialiseTaskLists+0x68>)
 8006ddc:	601a      	str	r2, [r3, #0]
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20001600 	.word	0x20001600
 8006dec:	20001a60 	.word	0x20001a60
 8006df0:	20001a74 	.word	0x20001a74
 8006df4:	20001a90 	.word	0x20001a90
 8006df8:	20001aa4 	.word	0x20001aa4
 8006dfc:	20001abc 	.word	0x20001abc
 8006e00:	20001a88 	.word	0x20001a88
 8006e04:	20001a8c 	.word	0x20001a8c

08006e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e0e:	e019      	b.n	8006e44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e10:	f000 fe10 	bl	8007a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <prvCheckTasksWaitingTermination+0x50>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fc77 	bl	8005714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <prvCheckTasksWaitingTermination+0x54>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a0b      	ldr	r2, [pc, #44]	; (8006e5c <prvCheckTasksWaitingTermination+0x54>)
 8006e2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <prvCheckTasksWaitingTermination+0x58>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <prvCheckTasksWaitingTermination+0x58>)
 8006e38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e3a:	f000 fe2b 	bl	8007a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f810 	bl	8006e64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <prvCheckTasksWaitingTermination+0x58>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e1      	bne.n	8006e10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20001aa4 	.word	0x20001aa4
 8006e5c:	20001ad0 	.word	0x20001ad0
 8006e60:	20001ab8 	.word	0x20001ab8

08006e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3354      	adds	r3, #84	; 0x54
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 faf9 	bl	8008468 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d108      	bne.n	8006e92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 ffc3 	bl	8007e10 <vPortFree>
				vPortFree( pxTCB );
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 ffc0 	bl	8007e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e90:	e018      	b.n	8006ec4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d103      	bne.n	8006ea4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 ffb7 	bl	8007e10 <vPortFree>
	}
 8006ea2:	e00f      	b.n	8006ec4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d00a      	beq.n	8006ec4 <prvDeleteTCB+0x60>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60fb      	str	r3, [r7, #12]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <prvDeleteTCB+0x5e>
	}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee4:	e008      	b.n	8006ef8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvResetNextTaskUnblockTime+0x3c>)
 8006ef6:	6013      	str	r3, [r2, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20001a88 	.word	0x20001a88
 8006f08:	20001af0 	.word	0x20001af0

08006f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <xTaskGetSchedulerState+0x34>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e008      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <xTaskGetSchedulerState+0x38>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e001      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f32:	687b      	ldr	r3, [r7, #4]
	}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20001adc 	.word	0x20001adc
 8006f44:	20001af8 	.word	0x20001af8

08006f48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d056      	beq.n	800700c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f5e:	4b2e      	ldr	r3, [pc, #184]	; (8007018 <xTaskPriorityDisinherit+0xd0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d00a      	beq.n	8006f7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60fb      	str	r3, [r7, #12]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d02c      	beq.n	800700c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d128      	bne.n	800700c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fba8 	bl	8005714 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <xTaskPriorityDisinherit+0xd4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <xTaskPriorityDisinherit+0xa4>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	; (800701c <xTaskPriorityDisinherit+0xd4>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <xTaskPriorityDisinherit+0xd8>)
 8006ffa:	441a      	add	r2, r3
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	3304      	adds	r3, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fb29 	bl	800565a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800700c:	697b      	ldr	r3, [r7, #20]
	}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200015fc 	.word	0x200015fc
 800701c:	20001ad8 	.word	0x20001ad8
 8007020:	20001600 	.word	0x20001600

08007024 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800702a:	4b09      	ldr	r3, [pc, #36]	; (8007050 <uxTaskResetEventItemValue+0x2c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <uxTaskResetEventItemValue+0x2c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <uxTaskResetEventItemValue+0x2c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007040:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007042:	687b      	ldr	r3, [r7, #4]
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	200015fc 	.word	0x200015fc

08007054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007064:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3304      	adds	r3, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fb52 	bl	8005714 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d10a      	bne.n	800708e <prvAddCurrentTaskToDelayedList+0x3a>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4819      	ldr	r0, [pc, #100]	; (80070ec <prvAddCurrentTaskToDelayedList+0x98>)
 8007088:	f7fe fae7 	bl	800565a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800708c:	e026      	b.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007096:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d209      	bcs.n	80070ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7fe faf5 	bl	80056a2 <vListInsert>
}
 80070b8:	e010      	b.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ba:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe faeb 	bl	80056a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d202      	bcs.n	80070dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070d6:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20001ad4 	.word	0x20001ad4
 80070e8:	200015fc 	.word	0x200015fc
 80070ec:	20001abc 	.word	0x20001abc
 80070f0:	20001a8c 	.word	0x20001a8c
 80070f4:	20001a88 	.word	0x20001a88
 80070f8:	20001af0 	.word	0x20001af0

080070fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007106:	f000 fb07 	bl	8007718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800710a:	4b1c      	ldr	r3, [pc, #112]	; (800717c <xTimerCreateTimerTask+0x80>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d021      	beq.n	8007156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800711a:	1d3a      	adds	r2, r7, #4
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe f863 	bl	80051f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	9202      	str	r2, [sp, #8]
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	2302      	movs	r3, #2
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	460a      	mov	r2, r1
 800713c:	4910      	ldr	r1, [pc, #64]	; (8007180 <xTimerCreateTimerTask+0x84>)
 800713e:	4811      	ldr	r0, [pc, #68]	; (8007184 <xTimerCreateTimerTask+0x88>)
 8007140:	f7fe fffe 	bl	8006140 <xTaskCreateStatic>
 8007144:	4603      	mov	r3, r0
 8007146:	4a10      	ldr	r2, [pc, #64]	; (8007188 <xTimerCreateTimerTask+0x8c>)
 8007148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <xTimerCreateTimerTask+0x8c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	613b      	str	r3, [r7, #16]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007172:	697b      	ldr	r3, [r7, #20]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20001b2c 	.word	0x20001b2c
 8007180:	0800907c 	.word	0x0800907c
 8007184:	080072c1 	.word	0x080072c1
 8007188:	20001b30 	.word	0x20001b30

0800718c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	; 0x28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800719a:	2300      	movs	r3, #0
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	623b      	str	r3, [r7, #32]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <xTimerGenericCommand+0x98>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02a      	beq.n	8007218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	dc18      	bgt.n	8007206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071d4:	f7ff fe9a 	bl	8006f0c <xTaskGetSchedulerState>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d109      	bne.n	80071f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071de:	4b11      	ldr	r3, [pc, #68]	; (8007224 <xTimerGenericCommand+0x98>)
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	f107 0110 	add.w	r1, r7, #16
 80071e6:	2300      	movs	r3, #0
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	f7fe fbc1 	bl	8005970 <xQueueGenericSend>
 80071ee:	6278      	str	r0, [r7, #36]	; 0x24
 80071f0:	e012      	b.n	8007218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <xTimerGenericCommand+0x98>)
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f107 0110 	add.w	r1, r7, #16
 80071fa:	2300      	movs	r3, #0
 80071fc:	2200      	movs	r2, #0
 80071fe:	f7fe fbb7 	bl	8005970 <xQueueGenericSend>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24
 8007204:	e008      	b.n	8007218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <xTimerGenericCommand+0x98>)
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f107 0110 	add.w	r1, r7, #16
 800720e:	2300      	movs	r3, #0
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	f7fe fcab 	bl	8005b6c <xQueueGenericSendFromISR>
 8007216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800721a:	4618      	mov	r0, r3
 800721c:	3728      	adds	r7, #40	; 0x28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20001b2c 	.word	0x20001b2c

08007228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007232:	4b22      	ldr	r3, [pc, #136]	; (80072bc <prvProcessExpiredTimer+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3304      	adds	r3, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fa67 	bl	8005714 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d022      	beq.n	800729a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	18d1      	adds	r1, r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	6978      	ldr	r0, [r7, #20]
 8007262:	f000 f8d1 	bl	8007408 <prvInsertTimerInActiveList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01f      	beq.n	80072ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800726c:	2300      	movs	r3, #0
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2300      	movs	r3, #0
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	2100      	movs	r1, #0
 8007276:	6978      	ldr	r0, [r7, #20]
 8007278:	f7ff ff88 	bl	800718c <xTimerGenericCommand>
 800727c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	60fb      	str	r3, [r7, #12]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	6978      	ldr	r0, [r7, #20]
 80072b2:	4798      	blx	r3
}
 80072b4:	bf00      	nop
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20001b24 	.word	0x20001b24

080072c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 f857 	bl	8007380 <prvGetNextExpireTime>
 80072d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f803 	bl	80072e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072de:	f000 f8d5 	bl	800748c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e2:	e7f1      	b.n	80072c8 <prvTimerTask+0x8>

080072e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ee:	f7ff f983 	bl	80065f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f866 	bl	80073c8 <prvSampleTimeNow>
 80072fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d130      	bne.n	8007366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <prvProcessTimerOrBlockTask+0x3c>
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	429a      	cmp	r2, r3
 8007310:	d806      	bhi.n	8007320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007312:	f7ff f97f 	bl	8006614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff85 	bl	8007228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800731e:	e024      	b.n	800736a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d008      	beq.n	8007338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007326:	4b13      	ldr	r3, [pc, #76]	; (8007374 <prvProcessTimerOrBlockTask+0x90>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <prvProcessTimerOrBlockTask+0x50>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <prvProcessTimerOrBlockTask+0x52>
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007338:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <prvProcessTimerOrBlockTask+0x94>)
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	4619      	mov	r1, r3
 8007346:	f7fe fec7 	bl	80060d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800734a:	f7ff f963 	bl	8006614 <xTaskResumeAll>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007354:	4b09      	ldr	r3, [pc, #36]	; (800737c <prvProcessTimerOrBlockTask+0x98>)
 8007356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	f3bf 8f6f 	isb	sy
}
 8007364:	e001      	b.n	800736a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007366:	f7ff f955 	bl	8006614 <xTaskResumeAll>
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20001b28 	.word	0x20001b28
 8007378:	20001b2c 	.word	0x20001b2c
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <prvGetNextExpireTime+0x44>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <prvGetNextExpireTime+0x16>
 8007392:	2201      	movs	r2, #1
 8007394:	e000      	b.n	8007398 <prvGetNextExpireTime+0x18>
 8007396:	2200      	movs	r2, #0
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <prvGetNextExpireTime+0x44>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e001      	b.n	80073b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20001b24 	.word	0x20001b24

080073c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073d0:	f7ff f9be 	bl	8006750 <xTaskGetTickCount>
 80073d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073d6:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <prvSampleTimeNow+0x3c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d205      	bcs.n	80073ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073e0:	f000 f936 	bl	8007650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073f2:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvSampleTimeNow+0x3c>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073f8:	68fb      	ldr	r3, [r7, #12]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20001b34 	.word	0x20001b34

08007408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	429a      	cmp	r2, r3
 800742c:	d812      	bhi.n	8007454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	1ad2      	subs	r2, r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	429a      	cmp	r2, r3
 800743a:	d302      	bcc.n	8007442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e01b      	b.n	800747a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <prvInsertTimerInActiveList+0x7c>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f928 	bl	80056a2 <vListInsert>
 8007452:	e012      	b.n	800747a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d206      	bcs.n	800746a <prvInsertTimerInActiveList+0x62>
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d302      	bcc.n	800746a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e007      	b.n	800747a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746a:	4b07      	ldr	r3, [pc, #28]	; (8007488 <prvInsertTimerInActiveList+0x80>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7fe f914 	bl	80056a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800747a:	697b      	ldr	r3, [r7, #20]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20001b28 	.word	0x20001b28
 8007488:	20001b24 	.word	0x20001b24

0800748c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08e      	sub	sp, #56	; 0x38
 8007490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007492:	e0ca      	b.n	800762a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	da18      	bge.n	80074cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	3304      	adds	r3, #4
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61fb      	str	r3, [r7, #28]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	6850      	ldr	r0, [r2, #4]
 80074c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c6:	6892      	ldr	r2, [r2, #8]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f2c0 80ab 	blt.w	800762a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	3304      	adds	r3, #4
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe f915 	bl	8005714 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ea:	463b      	mov	r3, r7
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff ff6b 	bl	80073c8 <prvSampleTimeNow>
 80074f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	f200 8096 	bhi.w	8007628 <prvProcessReceivedCommands+0x19c>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <prvProcessReceivedCommands+0x78>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	0800752d 	.word	0x0800752d
 8007508:	0800752d 	.word	0x0800752d
 800750c:	0800752d 	.word	0x0800752d
 8007510:	080075a1 	.word	0x080075a1
 8007514:	080075b5 	.word	0x080075b5
 8007518:	080075ff 	.word	0x080075ff
 800751c:	0800752d 	.word	0x0800752d
 8007520:	0800752d 	.word	0x0800752d
 8007524:	080075a1 	.word	0x080075a1
 8007528:	080075b5 	.word	0x080075b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	18d1      	adds	r1, r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754c:	f7ff ff5c 	bl	8007408 <prvInsertTimerInActiveList>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d069      	beq.n	800762a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800755c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05e      	beq.n	800762a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	441a      	add	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	2100      	movs	r1, #0
 800757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757e:	f7ff fe05 	bl	800718c <xTimerGenericCommand>
 8007582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d14f      	bne.n	800762a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	61bb      	str	r3, [r7, #24]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075b2:	e03a      	b.n	800762a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	617b      	str	r3, [r7, #20]
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	18d1      	adds	r1, r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f8:	f7ff ff06 	bl	8007408 <prvInsertTimerInActiveList>
					break;
 80075fc:	e015      	b.n	800762a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800760c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760e:	f000 fbff 	bl	8007e10 <vPortFree>
 8007612:	e00a      	b.n	800762a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007626:	e000      	b.n	800762a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800762a:	4b08      	ldr	r3, [pc, #32]	; (800764c <prvProcessReceivedCommands+0x1c0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	1d39      	adds	r1, r7, #4
 8007630:	2200      	movs	r2, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fb36 	bl	8005ca4 <xQueueReceive>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f af2a 	bne.w	8007494 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	3730      	adds	r7, #48	; 0x30
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	20001b2c 	.word	0x20001b2c

08007650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007656:	e048      	b.n	80076ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007658:	4b2d      	ldr	r3, [pc, #180]	; (8007710 <prvSwitchTimerLists+0xc0>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b2b      	ldr	r3, [pc, #172]	; (8007710 <prvSwitchTimerLists+0xc0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe f84f 	bl	8005714 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d02e      	beq.n	80076ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4413      	add	r3, r2
 8007694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	429a      	cmp	r2, r3
 800769c:	d90e      	bls.n	80076bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076aa:	4b19      	ldr	r3, [pc, #100]	; (8007710 <prvSwitchTimerLists+0xc0>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7fd fff4 	bl	80056a2 <vListInsert>
 80076ba:	e016      	b.n	80076ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076bc:	2300      	movs	r3, #0
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2300      	movs	r3, #0
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	2100      	movs	r1, #0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fd60 	bl	800718c <xTimerGenericCommand>
 80076cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	603b      	str	r3, [r7, #0]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <prvSwitchTimerLists+0xc0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1b1      	bne.n	8007658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <prvSwitchTimerLists+0xc0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076fa:	4b06      	ldr	r3, [pc, #24]	; (8007714 <prvSwitchTimerLists+0xc4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a04      	ldr	r2, [pc, #16]	; (8007710 <prvSwitchTimerLists+0xc0>)
 8007700:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007702:	4a04      	ldr	r2, [pc, #16]	; (8007714 <prvSwitchTimerLists+0xc4>)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	6013      	str	r3, [r2, #0]
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20001b24 	.word	0x20001b24
 8007714:	20001b28 	.word	0x20001b28

08007718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800771e:	f000 f989 	bl	8007a34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d120      	bne.n	800776c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800772a:	4814      	ldr	r0, [pc, #80]	; (800777c <prvCheckForValidListAndQueue+0x64>)
 800772c:	f7fd ff68 	bl	8005600 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007730:	4813      	ldr	r0, [pc, #76]	; (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007732:	f7fd ff65 	bl	8005600 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <prvCheckForValidListAndQueue+0x6c>)
 8007738:	4a10      	ldr	r2, [pc, #64]	; (800777c <prvCheckForValidListAndQueue+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800773c:	4b12      	ldr	r3, [pc, #72]	; (8007788 <prvCheckForValidListAndQueue+0x70>)
 800773e:	4a10      	ldr	r2, [pc, #64]	; (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <prvCheckForValidListAndQueue+0x74>)
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <prvCheckForValidListAndQueue+0x78>)
 800774a:	2110      	movs	r1, #16
 800774c:	200a      	movs	r0, #10
 800774e:	f7fe f873 	bl	8005838 <xQueueGenericCreateStatic>
 8007752:	4603      	mov	r3, r0
 8007754:	4a08      	ldr	r2, [pc, #32]	; (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <prvCheckForValidListAndQueue+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	490b      	ldr	r1, [pc, #44]	; (8007794 <prvCheckForValidListAndQueue+0x7c>)
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fc8c 	bl	8006084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800776c:	f000 f992 	bl	8007a94 <vPortExitCritical>
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20001b2c 	.word	0x20001b2c
 800777c:	20001afc 	.word	0x20001afc
 8007780:	20001b10 	.word	0x20001b10
 8007784:	20001b24 	.word	0x20001b24
 8007788:	20001b28 	.word	0x20001b28
 800778c:	20001bd8 	.word	0x20001bd8
 8007790:	20001b38 	.word	0x20001b38
 8007794:	08009084 	.word	0x08009084

08007798 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80077a6:	f06f 0301 	mvn.w	r3, #1
 80077aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <xTimerPendFunctionCallFromISR+0x3c>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	f107 0114 	add.w	r1, r7, #20
 80077c0:	2300      	movs	r3, #0
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	f7fe f9d2 	bl	8005b6c <xQueueGenericSendFromISR>
 80077c8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3728      	adds	r7, #40	; 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20001b2c 	.word	0x20001b2c

080077d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b04      	subs	r3, #4
 80077e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 0201 	bic.w	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b04      	subs	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007808:	4a0c      	ldr	r2, [pc, #48]	; (800783c <pxPortInitialiseStack+0x64>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b14      	subs	r3, #20
 8007812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3b04      	subs	r3, #4
 800781e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f06f 0202 	mvn.w	r2, #2
 8007826:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b20      	subs	r3, #32
 800782c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	08007841 	.word	0x08007841

08007840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <prvTaskExitError+0x54>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d00a      	beq.n	800786a <prvTaskExitError+0x2a>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60fb      	str	r3, [r7, #12]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <prvTaskExitError+0x28>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60bb      	str	r3, [r7, #8]
}
 800787c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800787e:	bf00      	nop
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0fc      	beq.n	8007880 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	2000000c 	.word	0x2000000c
	...

080078a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <pxCurrentTCBConst2>)
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	f380 8809 	msr	PSP, r0
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	4770      	bx	lr
 80078bc:	f3af 8000 	nop.w

080078c0 <pxCurrentTCBConst2>:
 80078c0:	200015fc 	.word	0x200015fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078c8:	4808      	ldr	r0, [pc, #32]	; (80078ec <prvPortStartFirstTask+0x24>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8814 	msr	CONTROL, r0
 80078da:	b662      	cpsie	i
 80078dc:	b661      	cpsie	f
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	df00      	svc	0
 80078e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078ea:	bf00      	nop
 80078ec:	e000ed08 	.word	0xe000ed08

080078f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078f6:	4b46      	ldr	r3, [pc, #280]	; (8007a10 <xPortStartScheduler+0x120>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a46      	ldr	r2, [pc, #280]	; (8007a14 <xPortStartScheduler+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d10a      	bne.n	8007916 <xPortStartScheduler+0x26>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007916:	4b3e      	ldr	r3, [pc, #248]	; (8007a10 <xPortStartScheduler+0x120>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a3f      	ldr	r2, [pc, #252]	; (8007a18 <xPortStartScheduler+0x128>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <xPortStartScheduler+0x46>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007936:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <xPortStartScheduler+0x12c>)
 8007938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007958:	b2da      	uxtb	r2, r3
 800795a:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <xPortStartScheduler+0x130>)
 800795c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <xPortStartScheduler+0x134>)
 8007960:	2207      	movs	r2, #7
 8007962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007964:	e009      	b.n	800797a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007966:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <xPortStartScheduler+0x134>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <xPortStartScheduler+0x134>)
 800796e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d0ef      	beq.n	8007966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007986:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <xPortStartScheduler+0x134>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1c3 0307 	rsb	r3, r3, #7
 800798e:	2b04      	cmp	r3, #4
 8007990:	d00a      	beq.n	80079a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	60bb      	str	r3, [r7, #8]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <xPortStartScheduler+0x134>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <xPortStartScheduler+0x134>)
 80079b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <xPortStartScheduler+0x134>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ba:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <xPortStartScheduler+0x134>)
 80079bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079c6:	4b18      	ldr	r3, [pc, #96]	; (8007a28 <xPortStartScheduler+0x138>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <xPortStartScheduler+0x138>)
 80079cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <xPortStartScheduler+0x138>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <xPortStartScheduler+0x138>)
 80079d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079de:	f000 f8dd 	bl	8007b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <xPortStartScheduler+0x13c>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079e8:	f000 f8fc 	bl	8007be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079ec:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <xPortStartScheduler+0x140>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a0f      	ldr	r2, [pc, #60]	; (8007a30 <xPortStartScheduler+0x140>)
 80079f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079f8:	f7ff ff66 	bl	80078c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079fc:	f7fe ff72 	bl	80068e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a00:	f7ff ff1e 	bl	8007840 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	e000ed00 	.word	0xe000ed00
 8007a14:	410fc271 	.word	0x410fc271
 8007a18:	410fc270 	.word	0x410fc270
 8007a1c:	e000e400 	.word	0xe000e400
 8007a20:	20001c28 	.word	0x20001c28
 8007a24:	20001c2c 	.word	0x20001c2c
 8007a28:	e000ed20 	.word	0xe000ed20
 8007a2c:	2000000c 	.word	0x2000000c
 8007a30:	e000ef34 	.word	0xe000ef34

08007a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	607b      	str	r3, [r7, #4]
}
 8007a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a0d      	ldr	r2, [pc, #52]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <vPortEnterCritical+0x58>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d10f      	bne.n	8007a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <vPortEnterCritical+0x5c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	603b      	str	r3, [r7, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <vPortEnterCritical+0x4a>
	}
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	2000000c 	.word	0x2000000c
 8007a90:	e000ed04 	.word	0xe000ed04

08007a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <vPortExitCritical+0x50>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <vPortExitCritical+0x24>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	607b      	str	r3, [r7, #4]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <vPortExitCritical+0x50>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <vPortExitCritical+0x50>)
 8007ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <vPortExitCritical+0x50>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <vPortExitCritical+0x42>
 8007aca:	2300      	movs	r3, #0
 8007acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f383 8811 	msr	BASEPRI, r3
}
 8007ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	2000000c 	.word	0x2000000c
	...

08007af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007af0:	f3ef 8009 	mrs	r0, PSP
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	4b15      	ldr	r3, [pc, #84]	; (8007b50 <pxCurrentTCBConst>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	f01e 0f10 	tst.w	lr, #16
 8007b00:	bf08      	it	eq
 8007b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	6010      	str	r0, [r2, #0]
 8007b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b14:	f380 8811 	msr	BASEPRI, r0
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f7fe fee0 	bl	80068e4 <vTaskSwitchContext>
 8007b24:	f04f 0000 	mov.w	r0, #0
 8007b28:	f380 8811 	msr	BASEPRI, r0
 8007b2c:	bc09      	pop	{r0, r3}
 8007b2e:	6819      	ldr	r1, [r3, #0]
 8007b30:	6808      	ldr	r0, [r1, #0]
 8007b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b36:	f01e 0f10 	tst.w	lr, #16
 8007b3a:	bf08      	it	eq
 8007b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b40:	f380 8809 	msr	PSP, r0
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	f3af 8000 	nop.w

08007b50 <pxCurrentTCBConst>:
 8007b50:	200015fc 	.word	0x200015fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
}
 8007b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b72:	f7fe fdfd 	bl	8006770 <xTaskIncrementTick>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <xPortSysTickHandler+0x40>)
 8007b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f383 8811 	msr	BASEPRI, r3
}
 8007b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <vPortSetupTimerInterrupt+0x34>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <vPortSetupTimerInterrupt+0x38>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <vPortSetupTimerInterrupt+0x3c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <vPortSetupTimerInterrupt+0x40>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	099b      	lsrs	r3, r3, #6
 8007bb8:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <vPortSetupTimerInterrupt+0x44>)
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bbe:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <vPortSetupTimerInterrupt+0x34>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	e000e010 	.word	0xe000e010
 8007bd4:	e000e018 	.word	0xe000e018
 8007bd8:	20000000 	.word	0x20000000
 8007bdc:	10624dd3 	.word	0x10624dd3
 8007be0:	e000e014 	.word	0xe000e014

08007be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bf4 <vPortEnableVFP+0x10>
 8007be8:	6801      	ldr	r1, [r0, #0]
 8007bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bee:	6001      	str	r1, [r0, #0]
 8007bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bf2:	bf00      	nop
 8007bf4:	e000ed88 	.word	0xe000ed88

08007bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bfe:	f3ef 8305 	mrs	r3, IPSR
 8007c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	d914      	bls.n	8007c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c0a:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <vPortValidateInterruptPriority+0x70>)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c14:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <vPortValidateInterruptPriority+0x74>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	7afa      	ldrb	r2, [r7, #11]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d20a      	bcs.n	8007c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c34:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <vPortValidateInterruptPriority+0x78>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <vPortValidateInterruptPriority+0x7c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d90a      	bls.n	8007c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	603b      	str	r3, [r7, #0]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <vPortValidateInterruptPriority+0x60>
	}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000e3f0 	.word	0xe000e3f0
 8007c6c:	20001c28 	.word	0x20001c28
 8007c70:	e000ed0c 	.word	0xe000ed0c
 8007c74:	20001c2c 	.word	0x20001c2c

08007c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c84:	f7fe fcb8 	bl	80065f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c88:	4b5b      	ldr	r3, [pc, #364]	; (8007df8 <pvPortMalloc+0x180>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c90:	f000 f920 	bl	8007ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c94:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <pvPortMalloc+0x184>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8093 	bne.w	8007dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01d      	beq.n	8007ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ca8:	2208      	movs	r2, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f003 0307 	and.w	r3, r3, #7
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d014      	beq.n	8007ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f023 0307 	bic.w	r3, r3, #7
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d06e      	beq.n	8007dc8 <pvPortMalloc+0x150>
 8007cea:	4b45      	ldr	r3, [pc, #276]	; (8007e00 <pvPortMalloc+0x188>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d869      	bhi.n	8007dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cf4:	4b43      	ldr	r3, [pc, #268]	; (8007e04 <pvPortMalloc+0x18c>)
 8007cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cf8:	4b42      	ldr	r3, [pc, #264]	; (8007e04 <pvPortMalloc+0x18c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cfe:	e004      	b.n	8007d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d903      	bls.n	8007d1c <pvPortMalloc+0xa4>
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1f1      	bne.n	8007d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d1c:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <pvPortMalloc+0x180>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d050      	beq.n	8007dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	4413      	add	r3, r2
 8007d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	2308      	movs	r3, #8
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d91f      	bls.n	8007d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <pvPortMalloc+0xf8>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	613b      	str	r3, [r7, #16]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d82:	69b8      	ldr	r0, [r7, #24]
 8007d84:	f000 f908 	bl	8007f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d88:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <pvPortMalloc+0x188>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <pvPortMalloc+0x188>)
 8007d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d96:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <pvPortMalloc+0x188>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <pvPortMalloc+0x190>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d203      	bcs.n	8007daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007da2:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <pvPortMalloc+0x188>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <pvPortMalloc+0x190>)
 8007da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <pvPortMalloc+0x184>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <pvPortMalloc+0x194>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a11      	ldr	r2, [pc, #68]	; (8007e0c <pvPortMalloc+0x194>)
 8007dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dc8:	f7fe fc24 	bl	8006614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <pvPortMalloc+0x174>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	60fb      	str	r3, [r7, #12]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <pvPortMalloc+0x172>
	return pvReturn;
 8007dec:	69fb      	ldr	r3, [r7, #28]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3728      	adds	r7, #40	; 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20005838 	.word	0x20005838
 8007dfc:	2000584c 	.word	0x2000584c
 8007e00:	2000583c 	.word	0x2000583c
 8007e04:	20005830 	.word	0x20005830
 8007e08:	20005840 	.word	0x20005840
 8007e0c:	20005844 	.word	0x20005844

08007e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d04d      	beq.n	8007ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e22:	2308      	movs	r3, #8
 8007e24:	425b      	negs	r3, r3
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <vPortFree+0xb8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <vPortFree+0x44>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <vPortFree+0x62>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60bb      	str	r3, [r7, #8]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <vPortFree+0xb8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01e      	beq.n	8007ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d11a      	bne.n	8007ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ec8 <vPortFree+0xb8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	401a      	ands	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e98:	f7fe fbae 	bl	80065f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <vPortFree+0xbc>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <vPortFree+0xbc>)
 8007ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f000 f874 	bl	8007f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <vPortFree+0xc0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <vPortFree+0xc0>)
 8007eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eba:	f7fe fbab 	bl	8006614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ebe:	bf00      	nop
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	2000584c 	.word	0x2000584c
 8007ecc:	2000583c 	.word	0x2000583c
 8007ed0:	20005848 	.word	0x20005848

08007ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ee0:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <prvHeapInit+0xac>)
 8007ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3307      	adds	r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <prvHeapInit+0xac>)
 8007f04:	4413      	add	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f0c:	4a1d      	ldr	r2, [pc, #116]	; (8007f84 <prvHeapInit+0xb0>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <prvHeapInit+0xb0>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f20:	2208      	movs	r2, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <prvHeapInit+0xb4>)
 8007f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <prvHeapInit+0xb4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f3e:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <prvHeapInit+0xb4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <prvHeapInit+0xb4>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <prvHeapInit+0xb8>)
 8007f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <prvHeapInit+0xbc>)
 8007f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvHeapInit+0xc0>)
 8007f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20001c30 	.word	0x20001c30
 8007f84:	20005830 	.word	0x20005830
 8007f88:	20005838 	.word	0x20005838
 8007f8c:	20005840 	.word	0x20005840
 8007f90:	2000583c 	.word	0x2000583c
 8007f94:	2000584c 	.word	0x2000584c

08007f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fa0:	4b28      	ldr	r3, [pc, #160]	; (8008044 <prvInsertBlockIntoFreeList+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e002      	b.n	8007fac <prvInsertBlockIntoFreeList+0x14>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d8f7      	bhi.n	8007fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d108      	bne.n	8007fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d118      	bne.n	8008020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b15      	ldr	r3, [pc, #84]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d00d      	beq.n	8008016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	441a      	add	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	e008      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008016:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvInsertBlockIntoFreeList+0xb0>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e003      	b.n	8008028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d002      	beq.n	8008036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008036:	bf00      	nop
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20005830 	.word	0x20005830
 8008048:	20005838 	.word	0x20005838

0800804c <std>:
 800804c:	2300      	movs	r3, #0
 800804e:	b510      	push	{r4, lr}
 8008050:	4604      	mov	r4, r0
 8008052:	e9c0 3300 	strd	r3, r3, [r0]
 8008056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800805a:	6083      	str	r3, [r0, #8]
 800805c:	8181      	strh	r1, [r0, #12]
 800805e:	6643      	str	r3, [r0, #100]	; 0x64
 8008060:	81c2      	strh	r2, [r0, #14]
 8008062:	6183      	str	r3, [r0, #24]
 8008064:	4619      	mov	r1, r3
 8008066:	2208      	movs	r2, #8
 8008068:	305c      	adds	r0, #92	; 0x5c
 800806a:	f000 f9e5 	bl	8008438 <memset>
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x38>)
 8008070:	6263      	str	r3, [r4, #36]	; 0x24
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <std+0x3c>)
 8008074:	62a3      	str	r3, [r4, #40]	; 0x28
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <std+0x40>)
 8008078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <std+0x44>)
 800807c:	6224      	str	r4, [r4, #32]
 800807e:	6323      	str	r3, [r4, #48]	; 0x30
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	08008289 	.word	0x08008289
 8008088:	080082ab 	.word	0x080082ab
 800808c:	080082e3 	.word	0x080082e3
 8008090:	08008307 	.word	0x08008307

08008094 <stdio_exit_handler>:
 8008094:	4a02      	ldr	r2, [pc, #8]	; (80080a0 <stdio_exit_handler+0xc>)
 8008096:	4903      	ldr	r1, [pc, #12]	; (80080a4 <stdio_exit_handler+0x10>)
 8008098:	4803      	ldr	r0, [pc, #12]	; (80080a8 <stdio_exit_handler+0x14>)
 800809a:	f000 b869 	b.w	8008170 <_fwalk_sglue>
 800809e:	bf00      	nop
 80080a0:	20000010 	.word	0x20000010
 80080a4:	08008e99 	.word	0x08008e99
 80080a8:	2000001c 	.word	0x2000001c

080080ac <cleanup_stdio>:
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <cleanup_stdio+0x34>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	d001      	beq.n	80080bc <cleanup_stdio+0x10>
 80080b8:	f000 feee 	bl	8008e98 <_fflush_r>
 80080bc:	68a1      	ldr	r1, [r4, #8]
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <cleanup_stdio+0x38>)
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <cleanup_stdio+0x1e>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fee7 	bl	8008e98 <_fflush_r>
 80080ca:	68e1      	ldr	r1, [r4, #12]
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <cleanup_stdio+0x3c>)
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d004      	beq.n	80080dc <cleanup_stdio+0x30>
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f000 bede 	b.w	8008e98 <_fflush_r>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	20005850 	.word	0x20005850
 80080e4:	200058b8 	.word	0x200058b8
 80080e8:	20005920 	.word	0x20005920

080080ec <global_stdio_init.part.0>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <global_stdio_init.part.0+0x30>)
 80080f0:	4c0b      	ldr	r4, [pc, #44]	; (8008120 <global_stdio_init.part.0+0x34>)
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <global_stdio_init.part.0+0x38>)
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	2200      	movs	r2, #0
 80080fa:	2104      	movs	r1, #4
 80080fc:	f7ff ffa6 	bl	800804c <std>
 8008100:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008104:	2201      	movs	r2, #1
 8008106:	2109      	movs	r1, #9
 8008108:	f7ff ffa0 	bl	800804c <std>
 800810c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008110:	2202      	movs	r2, #2
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008116:	2112      	movs	r1, #18
 8008118:	f7ff bf98 	b.w	800804c <std>
 800811c:	20005988 	.word	0x20005988
 8008120:	20005850 	.word	0x20005850
 8008124:	08008095 	.word	0x08008095

08008128 <__sfp_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sfp_lock_acquire+0x8>)
 800812a:	f000 ba53 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20005991 	.word	0x20005991

08008134 <__sfp_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__sfp_lock_release+0x8>)
 8008136:	f000 ba4e 	b.w	80085d6 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20005991 	.word	0x20005991

08008140 <__sinit>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	f7ff fff0 	bl	8008128 <__sfp_lock_acquire>
 8008148:	6a23      	ldr	r3, [r4, #32]
 800814a:	b11b      	cbz	r3, 8008154 <__sinit+0x14>
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f7ff bff0 	b.w	8008134 <__sfp_lock_release>
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <__sinit+0x28>)
 8008156:	6223      	str	r3, [r4, #32]
 8008158:	4b04      	ldr	r3, [pc, #16]	; (800816c <__sinit+0x2c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f5      	bne.n	800814c <__sinit+0xc>
 8008160:	f7ff ffc4 	bl	80080ec <global_stdio_init.part.0>
 8008164:	e7f2      	b.n	800814c <__sinit+0xc>
 8008166:	bf00      	nop
 8008168:	080080ad 	.word	0x080080ad
 800816c:	20005988 	.word	0x20005988

08008170 <_fwalk_sglue>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4607      	mov	r7, r0
 8008176:	4688      	mov	r8, r1
 8008178:	4614      	mov	r4, r2
 800817a:	2600      	movs	r6, #0
 800817c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008180:	f1b9 0901 	subs.w	r9, r9, #1
 8008184:	d505      	bpl.n	8008192 <_fwalk_sglue+0x22>
 8008186:	6824      	ldr	r4, [r4, #0]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f7      	bne.n	800817c <_fwalk_sglue+0xc>
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d907      	bls.n	80081a8 <_fwalk_sglue+0x38>
 8008198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819c:	3301      	adds	r3, #1
 800819e:	d003      	beq.n	80081a8 <_fwalk_sglue+0x38>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	4306      	orrs	r6, r0
 80081a8:	3568      	adds	r5, #104	; 0x68
 80081aa:	e7e9      	b.n	8008180 <_fwalk_sglue+0x10>

080081ac <iprintf>:
 80081ac:	b40f      	push	{r0, r1, r2, r3}
 80081ae:	b507      	push	{r0, r1, r2, lr}
 80081b0:	4906      	ldr	r1, [pc, #24]	; (80081cc <iprintf+0x20>)
 80081b2:	ab04      	add	r3, sp, #16
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6881      	ldr	r1, [r0, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f000 fb3b 	bl	8008838 <_vfiprintf_r>
 80081c2:	b003      	add	sp, #12
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b004      	add	sp, #16
 80081ca:	4770      	bx	lr
 80081cc:	20000068 	.word	0x20000068

080081d0 <_puts_r>:
 80081d0:	6a03      	ldr	r3, [r0, #32]
 80081d2:	b570      	push	{r4, r5, r6, lr}
 80081d4:	6884      	ldr	r4, [r0, #8]
 80081d6:	4605      	mov	r5, r0
 80081d8:	460e      	mov	r6, r1
 80081da:	b90b      	cbnz	r3, 80081e0 <_puts_r+0x10>
 80081dc:	f7ff ffb0 	bl	8008140 <__sinit>
 80081e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081e2:	07db      	lsls	r3, r3, #31
 80081e4:	d405      	bmi.n	80081f2 <_puts_r+0x22>
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	0598      	lsls	r0, r3, #22
 80081ea:	d402      	bmi.n	80081f2 <_puts_r+0x22>
 80081ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ee:	f000 f9f1 	bl	80085d4 <__retarget_lock_acquire_recursive>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	0719      	lsls	r1, r3, #28
 80081f6:	d513      	bpl.n	8008220 <_puts_r+0x50>
 80081f8:	6923      	ldr	r3, [r4, #16]
 80081fa:	b18b      	cbz	r3, 8008220 <_puts_r+0x50>
 80081fc:	3e01      	subs	r6, #1
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008204:	3b01      	subs	r3, #1
 8008206:	60a3      	str	r3, [r4, #8]
 8008208:	b9e9      	cbnz	r1, 8008246 <_puts_r+0x76>
 800820a:	2b00      	cmp	r3, #0
 800820c:	da2e      	bge.n	800826c <_puts_r+0x9c>
 800820e:	4622      	mov	r2, r4
 8008210:	210a      	movs	r1, #10
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f87b 	bl	800830e <__swbuf_r>
 8008218:	3001      	adds	r0, #1
 800821a:	d007      	beq.n	800822c <_puts_r+0x5c>
 800821c:	250a      	movs	r5, #10
 800821e:	e007      	b.n	8008230 <_puts_r+0x60>
 8008220:	4621      	mov	r1, r4
 8008222:	4628      	mov	r0, r5
 8008224:	f000 f8b0 	bl	8008388 <__swsetup_r>
 8008228:	2800      	cmp	r0, #0
 800822a:	d0e7      	beq.n	80081fc <_puts_r+0x2c>
 800822c:	f04f 35ff 	mov.w	r5, #4294967295
 8008230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008232:	07da      	lsls	r2, r3, #31
 8008234:	d405      	bmi.n	8008242 <_puts_r+0x72>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	059b      	lsls	r3, r3, #22
 800823a:	d402      	bmi.n	8008242 <_puts_r+0x72>
 800823c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823e:	f000 f9ca 	bl	80085d6 <__retarget_lock_release_recursive>
 8008242:	4628      	mov	r0, r5
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	2b00      	cmp	r3, #0
 8008248:	da04      	bge.n	8008254 <_puts_r+0x84>
 800824a:	69a2      	ldr	r2, [r4, #24]
 800824c:	429a      	cmp	r2, r3
 800824e:	dc06      	bgt.n	800825e <_puts_r+0x8e>
 8008250:	290a      	cmp	r1, #10
 8008252:	d004      	beq.n	800825e <_puts_r+0x8e>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	7019      	strb	r1, [r3, #0]
 800825c:	e7cf      	b.n	80081fe <_puts_r+0x2e>
 800825e:	4622      	mov	r2, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 f854 	bl	800830e <__swbuf_r>
 8008266:	3001      	adds	r0, #1
 8008268:	d1c9      	bne.n	80081fe <_puts_r+0x2e>
 800826a:	e7df      	b.n	800822c <_puts_r+0x5c>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	250a      	movs	r5, #10
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	6022      	str	r2, [r4, #0]
 8008274:	701d      	strb	r5, [r3, #0]
 8008276:	e7db      	b.n	8008230 <_puts_r+0x60>

08008278 <puts>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <puts+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f7ff bfa7 	b.w	80081d0 <_puts_r>
 8008282:	bf00      	nop
 8008284:	20000068 	.word	0x20000068

08008288 <__sread>:
 8008288:	b510      	push	{r4, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008290:	f000 f952 	bl	8008538 <_read_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	bfab      	itete	ge
 8008298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800829a:	89a3      	ldrhlt	r3, [r4, #12]
 800829c:	181b      	addge	r3, r3, r0
 800829e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082a2:	bfac      	ite	ge
 80082a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082a6:	81a3      	strhlt	r3, [r4, #12]
 80082a8:	bd10      	pop	{r4, pc}

080082aa <__swrite>:
 80082aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ae:	461f      	mov	r7, r3
 80082b0:	898b      	ldrh	r3, [r1, #12]
 80082b2:	05db      	lsls	r3, r3, #23
 80082b4:	4605      	mov	r5, r0
 80082b6:	460c      	mov	r4, r1
 80082b8:	4616      	mov	r6, r2
 80082ba:	d505      	bpl.n	80082c8 <__swrite+0x1e>
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	2302      	movs	r3, #2
 80082c2:	2200      	movs	r2, #0
 80082c4:	f000 f926 	bl	8008514 <_lseek_r>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	f000 b93d 	b.w	800855c <_write_r>

080082e2 <__sseek>:
 80082e2:	b510      	push	{r4, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ea:	f000 f913 	bl	8008514 <_lseek_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	bf15      	itete	ne
 80082f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082fe:	81a3      	strheq	r3, [r4, #12]
 8008300:	bf18      	it	ne
 8008302:	81a3      	strhne	r3, [r4, #12]
 8008304:	bd10      	pop	{r4, pc}

08008306 <__sclose>:
 8008306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830a:	f000 b89d 	b.w	8008448 <_close_r>

0800830e <__swbuf_r>:
 800830e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008310:	460e      	mov	r6, r1
 8008312:	4614      	mov	r4, r2
 8008314:	4605      	mov	r5, r0
 8008316:	b118      	cbz	r0, 8008320 <__swbuf_r+0x12>
 8008318:	6a03      	ldr	r3, [r0, #32]
 800831a:	b90b      	cbnz	r3, 8008320 <__swbuf_r+0x12>
 800831c:	f7ff ff10 	bl	8008140 <__sinit>
 8008320:	69a3      	ldr	r3, [r4, #24]
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	071a      	lsls	r2, r3, #28
 8008328:	d525      	bpl.n	8008376 <__swbuf_r+0x68>
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	b31b      	cbz	r3, 8008376 <__swbuf_r+0x68>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	6922      	ldr	r2, [r4, #16]
 8008332:	1a98      	subs	r0, r3, r2
 8008334:	6963      	ldr	r3, [r4, #20]
 8008336:	b2f6      	uxtb	r6, r6
 8008338:	4283      	cmp	r3, r0
 800833a:	4637      	mov	r7, r6
 800833c:	dc04      	bgt.n	8008348 <__swbuf_r+0x3a>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f000 fda9 	bl	8008e98 <_fflush_r>
 8008346:	b9e0      	cbnz	r0, 8008382 <__swbuf_r+0x74>
 8008348:	68a3      	ldr	r3, [r4, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	60a3      	str	r3, [r4, #8]
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	701e      	strb	r6, [r3, #0]
 8008356:	6962      	ldr	r2, [r4, #20]
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	429a      	cmp	r2, r3
 800835c:	d004      	beq.n	8008368 <__swbuf_r+0x5a>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	07db      	lsls	r3, r3, #31
 8008362:	d506      	bpl.n	8008372 <__swbuf_r+0x64>
 8008364:	2e0a      	cmp	r6, #10
 8008366:	d104      	bne.n	8008372 <__swbuf_r+0x64>
 8008368:	4621      	mov	r1, r4
 800836a:	4628      	mov	r0, r5
 800836c:	f000 fd94 	bl	8008e98 <_fflush_r>
 8008370:	b938      	cbnz	r0, 8008382 <__swbuf_r+0x74>
 8008372:	4638      	mov	r0, r7
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f805 	bl	8008388 <__swsetup_r>
 800837e:	2800      	cmp	r0, #0
 8008380:	d0d5      	beq.n	800832e <__swbuf_r+0x20>
 8008382:	f04f 37ff 	mov.w	r7, #4294967295
 8008386:	e7f4      	b.n	8008372 <__swbuf_r+0x64>

08008388 <__swsetup_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4b2a      	ldr	r3, [pc, #168]	; (8008434 <__swsetup_r+0xac>)
 800838c:	4605      	mov	r5, r0
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	460c      	mov	r4, r1
 8008392:	b118      	cbz	r0, 800839c <__swsetup_r+0x14>
 8008394:	6a03      	ldr	r3, [r0, #32]
 8008396:	b90b      	cbnz	r3, 800839c <__swsetup_r+0x14>
 8008398:	f7ff fed2 	bl	8008140 <__sinit>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083a2:	0718      	lsls	r0, r3, #28
 80083a4:	d422      	bmi.n	80083ec <__swsetup_r+0x64>
 80083a6:	06d9      	lsls	r1, r3, #27
 80083a8:	d407      	bmi.n	80083ba <__swsetup_r+0x32>
 80083aa:	2309      	movs	r3, #9
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083b2:	81a3      	strh	r3, [r4, #12]
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	e034      	b.n	8008424 <__swsetup_r+0x9c>
 80083ba:	0758      	lsls	r0, r3, #29
 80083bc:	d512      	bpl.n	80083e4 <__swsetup_r+0x5c>
 80083be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c0:	b141      	cbz	r1, 80083d4 <__swsetup_r+0x4c>
 80083c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c6:	4299      	cmp	r1, r3
 80083c8:	d002      	beq.n	80083d0 <__swsetup_r+0x48>
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 f912 	bl	80085f4 <_free_r>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6363      	str	r3, [r4, #52]	; 0x34
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	2300      	movs	r3, #0
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f043 0308 	orr.w	r3, r3, #8
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	6923      	ldr	r3, [r4, #16]
 80083ee:	b94b      	cbnz	r3, 8008404 <__swsetup_r+0x7c>
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083fa:	d003      	beq.n	8008404 <__swsetup_r+0x7c>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 fd98 	bl	8008f34 <__smakebuf_r>
 8008404:	89a0      	ldrh	r0, [r4, #12]
 8008406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800840a:	f010 0301 	ands.w	r3, r0, #1
 800840e:	d00a      	beq.n	8008426 <__swsetup_r+0x9e>
 8008410:	2300      	movs	r3, #0
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	6963      	ldr	r3, [r4, #20]
 8008416:	425b      	negs	r3, r3
 8008418:	61a3      	str	r3, [r4, #24]
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	b943      	cbnz	r3, 8008430 <__swsetup_r+0xa8>
 800841e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008422:	d1c4      	bne.n	80083ae <__swsetup_r+0x26>
 8008424:	bd38      	pop	{r3, r4, r5, pc}
 8008426:	0781      	lsls	r1, r0, #30
 8008428:	bf58      	it	pl
 800842a:	6963      	ldrpl	r3, [r4, #20]
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	e7f4      	b.n	800841a <__swsetup_r+0x92>
 8008430:	2000      	movs	r0, #0
 8008432:	e7f7      	b.n	8008424 <__swsetup_r+0x9c>
 8008434:	20000068 	.word	0x20000068

08008438 <memset>:
 8008438:	4402      	add	r2, r0
 800843a:	4603      	mov	r3, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <_close_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	; (8008464 <_close_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7f8 fe1b 	bl	800108e <_close>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_close_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_close_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	2000598c 	.word	0x2000598c

08008468 <_reclaim_reent>:
 8008468:	4b29      	ldr	r3, [pc, #164]	; (8008510 <_reclaim_reent+0xa8>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4283      	cmp	r3, r0
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	4604      	mov	r4, r0
 8008472:	d04b      	beq.n	800850c <_reclaim_reent+0xa4>
 8008474:	69c3      	ldr	r3, [r0, #28]
 8008476:	b143      	cbz	r3, 800848a <_reclaim_reent+0x22>
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d144      	bne.n	8008508 <_reclaim_reent+0xa0>
 800847e:	69e3      	ldr	r3, [r4, #28]
 8008480:	6819      	ldr	r1, [r3, #0]
 8008482:	b111      	cbz	r1, 800848a <_reclaim_reent+0x22>
 8008484:	4620      	mov	r0, r4
 8008486:	f000 f8b5 	bl	80085f4 <_free_r>
 800848a:	6961      	ldr	r1, [r4, #20]
 800848c:	b111      	cbz	r1, 8008494 <_reclaim_reent+0x2c>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f8b0 	bl	80085f4 <_free_r>
 8008494:	69e1      	ldr	r1, [r4, #28]
 8008496:	b111      	cbz	r1, 800849e <_reclaim_reent+0x36>
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f8ab 	bl	80085f4 <_free_r>
 800849e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80084a0:	b111      	cbz	r1, 80084a8 <_reclaim_reent+0x40>
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 f8a6 	bl	80085f4 <_free_r>
 80084a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084aa:	b111      	cbz	r1, 80084b2 <_reclaim_reent+0x4a>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f8a1 	bl	80085f4 <_free_r>
 80084b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084b4:	b111      	cbz	r1, 80084bc <_reclaim_reent+0x54>
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 f89c 	bl	80085f4 <_free_r>
 80084bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084be:	b111      	cbz	r1, 80084c6 <_reclaim_reent+0x5e>
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 f897 	bl	80085f4 <_free_r>
 80084c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80084c8:	b111      	cbz	r1, 80084d0 <_reclaim_reent+0x68>
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f892 	bl	80085f4 <_free_r>
 80084d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80084d2:	b111      	cbz	r1, 80084da <_reclaim_reent+0x72>
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 f88d 	bl	80085f4 <_free_r>
 80084da:	6a23      	ldr	r3, [r4, #32]
 80084dc:	b1b3      	cbz	r3, 800850c <_reclaim_reent+0xa4>
 80084de:	4620      	mov	r0, r4
 80084e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084e4:	4718      	bx	r3
 80084e6:	5949      	ldr	r1, [r1, r5]
 80084e8:	b941      	cbnz	r1, 80084fc <_reclaim_reent+0x94>
 80084ea:	3504      	adds	r5, #4
 80084ec:	69e3      	ldr	r3, [r4, #28]
 80084ee:	2d80      	cmp	r5, #128	; 0x80
 80084f0:	68d9      	ldr	r1, [r3, #12]
 80084f2:	d1f8      	bne.n	80084e6 <_reclaim_reent+0x7e>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 f87d 	bl	80085f4 <_free_r>
 80084fa:	e7c0      	b.n	800847e <_reclaim_reent+0x16>
 80084fc:	680e      	ldr	r6, [r1, #0]
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f878 	bl	80085f4 <_free_r>
 8008504:	4631      	mov	r1, r6
 8008506:	e7ef      	b.n	80084e8 <_reclaim_reent+0x80>
 8008508:	2500      	movs	r5, #0
 800850a:	e7ef      	b.n	80084ec <_reclaim_reent+0x84>
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	bf00      	nop
 8008510:	20000068 	.word	0x20000068

08008514 <_lseek_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	; (8008534 <_lseek_r+0x20>)
 8008518:	4604      	mov	r4, r0
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	2200      	movs	r2, #0
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7f8 fdda 	bl	80010dc <_lseek>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_lseek_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_lseek_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	2000598c 	.word	0x2000598c

08008538 <_read_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	; (8008558 <_read_r+0x20>)
 800853c:	4604      	mov	r4, r0
 800853e:	4608      	mov	r0, r1
 8008540:	4611      	mov	r1, r2
 8008542:	2200      	movs	r2, #0
 8008544:	602a      	str	r2, [r5, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	f7f8 fd68 	bl	800101c <_read>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_read_r+0x1e>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_read_r+0x1e>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	2000598c 	.word	0x2000598c

0800855c <_write_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	; (800857c <_write_r+0x20>)
 8008560:	4604      	mov	r4, r0
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	2200      	movs	r2, #0
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f7f8 fd73 	bl	8001056 <_write>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_write_r+0x1e>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_write_r+0x1e>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	2000598c 	.word	0x2000598c

08008580 <__errno>:
 8008580:	4b01      	ldr	r3, [pc, #4]	; (8008588 <__errno+0x8>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000068 	.word	0x20000068

0800858c <__libc_init_array>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4d0d      	ldr	r5, [pc, #52]	; (80085c4 <__libc_init_array+0x38>)
 8008590:	4c0d      	ldr	r4, [pc, #52]	; (80085c8 <__libc_init_array+0x3c>)
 8008592:	1b64      	subs	r4, r4, r5
 8008594:	10a4      	asrs	r4, r4, #2
 8008596:	2600      	movs	r6, #0
 8008598:	42a6      	cmp	r6, r4
 800859a:	d109      	bne.n	80085b0 <__libc_init_array+0x24>
 800859c:	4d0b      	ldr	r5, [pc, #44]	; (80085cc <__libc_init_array+0x40>)
 800859e:	4c0c      	ldr	r4, [pc, #48]	; (80085d0 <__libc_init_array+0x44>)
 80085a0:	f000 fd36 	bl	8009010 <_init>
 80085a4:	1b64      	subs	r4, r4, r5
 80085a6:	10a4      	asrs	r4, r4, #2
 80085a8:	2600      	movs	r6, #0
 80085aa:	42a6      	cmp	r6, r4
 80085ac:	d105      	bne.n	80085ba <__libc_init_array+0x2e>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b4:	4798      	blx	r3
 80085b6:	3601      	adds	r6, #1
 80085b8:	e7ee      	b.n	8008598 <__libc_init_array+0xc>
 80085ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80085be:	4798      	blx	r3
 80085c0:	3601      	adds	r6, #1
 80085c2:	e7f2      	b.n	80085aa <__libc_init_array+0x1e>
 80085c4:	08009128 	.word	0x08009128
 80085c8:	08009128 	.word	0x08009128
 80085cc:	08009128 	.word	0x08009128
 80085d0:	0800912c 	.word	0x0800912c

080085d4 <__retarget_lock_acquire_recursive>:
 80085d4:	4770      	bx	lr

080085d6 <__retarget_lock_release_recursive>:
 80085d6:	4770      	bx	lr

080085d8 <memcpy>:
 80085d8:	440a      	add	r2, r1
 80085da:	4291      	cmp	r1, r2
 80085dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80085e0:	d100      	bne.n	80085e4 <memcpy+0xc>
 80085e2:	4770      	bx	lr
 80085e4:	b510      	push	{r4, lr}
 80085e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ee:	4291      	cmp	r1, r2
 80085f0:	d1f9      	bne.n	80085e6 <memcpy+0xe>
 80085f2:	bd10      	pop	{r4, pc}

080085f4 <_free_r>:
 80085f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d044      	beq.n	8008684 <_free_r+0x90>
 80085fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fe:	9001      	str	r0, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f1a1 0404 	sub.w	r4, r1, #4
 8008606:	bfb8      	it	lt
 8008608:	18e4      	addlt	r4, r4, r3
 800860a:	f000 f8df 	bl	80087cc <__malloc_lock>
 800860e:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <_free_r+0x94>)
 8008610:	9801      	ldr	r0, [sp, #4]
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	b933      	cbnz	r3, 8008624 <_free_r+0x30>
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	6014      	str	r4, [r2, #0]
 800861a:	b003      	add	sp, #12
 800861c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008620:	f000 b8da 	b.w	80087d8 <__malloc_unlock>
 8008624:	42a3      	cmp	r3, r4
 8008626:	d908      	bls.n	800863a <_free_r+0x46>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1961      	adds	r1, r4, r5
 800862c:	428b      	cmp	r3, r1
 800862e:	bf01      	itttt	eq
 8008630:	6819      	ldreq	r1, [r3, #0]
 8008632:	685b      	ldreq	r3, [r3, #4]
 8008634:	1949      	addeq	r1, r1, r5
 8008636:	6021      	streq	r1, [r4, #0]
 8008638:	e7ed      	b.n	8008616 <_free_r+0x22>
 800863a:	461a      	mov	r2, r3
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b10b      	cbz	r3, 8008644 <_free_r+0x50>
 8008640:	42a3      	cmp	r3, r4
 8008642:	d9fa      	bls.n	800863a <_free_r+0x46>
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	1855      	adds	r5, r2, r1
 8008648:	42a5      	cmp	r5, r4
 800864a:	d10b      	bne.n	8008664 <_free_r+0x70>
 800864c:	6824      	ldr	r4, [r4, #0]
 800864e:	4421      	add	r1, r4
 8008650:	1854      	adds	r4, r2, r1
 8008652:	42a3      	cmp	r3, r4
 8008654:	6011      	str	r1, [r2, #0]
 8008656:	d1e0      	bne.n	800861a <_free_r+0x26>
 8008658:	681c      	ldr	r4, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	6053      	str	r3, [r2, #4]
 800865e:	440c      	add	r4, r1
 8008660:	6014      	str	r4, [r2, #0]
 8008662:	e7da      	b.n	800861a <_free_r+0x26>
 8008664:	d902      	bls.n	800866c <_free_r+0x78>
 8008666:	230c      	movs	r3, #12
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	e7d6      	b.n	800861a <_free_r+0x26>
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	1961      	adds	r1, r4, r5
 8008670:	428b      	cmp	r3, r1
 8008672:	bf04      	itt	eq
 8008674:	6819      	ldreq	r1, [r3, #0]
 8008676:	685b      	ldreq	r3, [r3, #4]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	bf04      	itt	eq
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	6054      	str	r4, [r2, #4]
 8008682:	e7ca      	b.n	800861a <_free_r+0x26>
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	20005994 	.word	0x20005994

0800868c <sbrk_aligned>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0e      	ldr	r6, [pc, #56]	; (80086c8 <sbrk_aligned+0x3c>)
 8008690:	460c      	mov	r4, r1
 8008692:	6831      	ldr	r1, [r6, #0]
 8008694:	4605      	mov	r5, r0
 8008696:	b911      	cbnz	r1, 800869e <sbrk_aligned+0x12>
 8008698:	f000 fcaa 	bl	8008ff0 <_sbrk_r>
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 fca5 	bl	8008ff0 <_sbrk_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <sbrk_aligned+0x34>
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d007      	beq.n	80086c4 <sbrk_aligned+0x38>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fc9a 	bl	8008ff0 <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d101      	bne.n	80086c4 <sbrk_aligned+0x38>
 80086c0:	f04f 34ff 	mov.w	r4, #4294967295
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	20005998 	.word	0x20005998

080086cc <_malloc_r>:
 80086cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	1ccd      	adds	r5, r1, #3
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	2d00      	cmp	r5, #0
 80086e0:	4607      	mov	r7, r0
 80086e2:	db01      	blt.n	80086e8 <_malloc_r+0x1c>
 80086e4:	42a9      	cmp	r1, r5
 80086e6:	d905      	bls.n	80086f4 <_malloc_r+0x28>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2600      	movs	r6, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087c8 <_malloc_r+0xfc>
 80086f8:	f000 f868 	bl	80087cc <__malloc_lock>
 80086fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008700:	461c      	mov	r4, r3
 8008702:	bb5c      	cbnz	r4, 800875c <_malloc_r+0x90>
 8008704:	4629      	mov	r1, r5
 8008706:	4638      	mov	r0, r7
 8008708:	f7ff ffc0 	bl	800868c <sbrk_aligned>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	4604      	mov	r4, r0
 8008710:	d155      	bne.n	80087be <_malloc_r+0xf2>
 8008712:	f8d8 4000 	ldr.w	r4, [r8]
 8008716:	4626      	mov	r6, r4
 8008718:	2e00      	cmp	r6, #0
 800871a:	d145      	bne.n	80087a8 <_malloc_r+0xdc>
 800871c:	2c00      	cmp	r4, #0
 800871e:	d048      	beq.n	80087b2 <_malloc_r+0xe6>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	4631      	mov	r1, r6
 8008724:	4638      	mov	r0, r7
 8008726:	eb04 0903 	add.w	r9, r4, r3
 800872a:	f000 fc61 	bl	8008ff0 <_sbrk_r>
 800872e:	4581      	cmp	r9, r0
 8008730:	d13f      	bne.n	80087b2 <_malloc_r+0xe6>
 8008732:	6821      	ldr	r1, [r4, #0]
 8008734:	1a6d      	subs	r5, r5, r1
 8008736:	4629      	mov	r1, r5
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa7 	bl	800868c <sbrk_aligned>
 800873e:	3001      	adds	r0, #1
 8008740:	d037      	beq.n	80087b2 <_malloc_r+0xe6>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	442b      	add	r3, r5
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f8d8 3000 	ldr.w	r3, [r8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d038      	beq.n	80087c2 <_malloc_r+0xf6>
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	42a2      	cmp	r2, r4
 8008754:	d12b      	bne.n	80087ae <_malloc_r+0xe2>
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	e00f      	b.n	800877c <_malloc_r+0xb0>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	1b52      	subs	r2, r2, r5
 8008760:	d41f      	bmi.n	80087a2 <_malloc_r+0xd6>
 8008762:	2a0b      	cmp	r2, #11
 8008764:	d917      	bls.n	8008796 <_malloc_r+0xca>
 8008766:	1961      	adds	r1, r4, r5
 8008768:	42a3      	cmp	r3, r4
 800876a:	6025      	str	r5, [r4, #0]
 800876c:	bf18      	it	ne
 800876e:	6059      	strne	r1, [r3, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	bf08      	it	eq
 8008774:	f8c8 1000 	streq.w	r1, [r8]
 8008778:	5162      	str	r2, [r4, r5]
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	4638      	mov	r0, r7
 800877e:	f104 060b 	add.w	r6, r4, #11
 8008782:	f000 f829 	bl	80087d8 <__malloc_unlock>
 8008786:	f026 0607 	bic.w	r6, r6, #7
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	1af2      	subs	r2, r6, r3
 800878e:	d0ae      	beq.n	80086ee <_malloc_r+0x22>
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	50a3      	str	r3, [r4, r2]
 8008794:	e7ab      	b.n	80086ee <_malloc_r+0x22>
 8008796:	42a3      	cmp	r3, r4
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	d1dd      	bne.n	8008758 <_malloc_r+0x8c>
 800879c:	f8c8 2000 	str.w	r2, [r8]
 80087a0:	e7ec      	b.n	800877c <_malloc_r+0xb0>
 80087a2:	4623      	mov	r3, r4
 80087a4:	6864      	ldr	r4, [r4, #4]
 80087a6:	e7ac      	b.n	8008702 <_malloc_r+0x36>
 80087a8:	4634      	mov	r4, r6
 80087aa:	6876      	ldr	r6, [r6, #4]
 80087ac:	e7b4      	b.n	8008718 <_malloc_r+0x4c>
 80087ae:	4613      	mov	r3, r2
 80087b0:	e7cc      	b.n	800874c <_malloc_r+0x80>
 80087b2:	230c      	movs	r3, #12
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4638      	mov	r0, r7
 80087b8:	f000 f80e 	bl	80087d8 <__malloc_unlock>
 80087bc:	e797      	b.n	80086ee <_malloc_r+0x22>
 80087be:	6025      	str	r5, [r4, #0]
 80087c0:	e7dc      	b.n	800877c <_malloc_r+0xb0>
 80087c2:	605b      	str	r3, [r3, #4]
 80087c4:	deff      	udf	#255	; 0xff
 80087c6:	bf00      	nop
 80087c8:	20005994 	.word	0x20005994

080087cc <__malloc_lock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_lock+0x8>)
 80087ce:	f7ff bf01 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 80087d2:	bf00      	nop
 80087d4:	20005990 	.word	0x20005990

080087d8 <__malloc_unlock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__malloc_unlock+0x8>)
 80087da:	f7ff befc 	b.w	80085d6 <__retarget_lock_release_recursive>
 80087de:	bf00      	nop
 80087e0:	20005990 	.word	0x20005990

080087e4 <__sfputc_r>:
 80087e4:	6893      	ldr	r3, [r2, #8]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	b410      	push	{r4}
 80087ec:	6093      	str	r3, [r2, #8]
 80087ee:	da08      	bge.n	8008802 <__sfputc_r+0x1e>
 80087f0:	6994      	ldr	r4, [r2, #24]
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	db01      	blt.n	80087fa <__sfputc_r+0x16>
 80087f6:	290a      	cmp	r1, #10
 80087f8:	d103      	bne.n	8008802 <__sfputc_r+0x1e>
 80087fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087fe:	f7ff bd86 	b.w	800830e <__swbuf_r>
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	1c58      	adds	r0, r3, #1
 8008806:	6010      	str	r0, [r2, #0]
 8008808:	7019      	strb	r1, [r3, #0]
 800880a:	4608      	mov	r0, r1
 800880c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008810:	4770      	bx	lr

08008812 <__sfputs_r>:
 8008812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008814:	4606      	mov	r6, r0
 8008816:	460f      	mov	r7, r1
 8008818:	4614      	mov	r4, r2
 800881a:	18d5      	adds	r5, r2, r3
 800881c:	42ac      	cmp	r4, r5
 800881e:	d101      	bne.n	8008824 <__sfputs_r+0x12>
 8008820:	2000      	movs	r0, #0
 8008822:	e007      	b.n	8008834 <__sfputs_r+0x22>
 8008824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008828:	463a      	mov	r2, r7
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff ffda 	bl	80087e4 <__sfputc_r>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d1f3      	bne.n	800881c <__sfputs_r+0xa>
 8008834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008838 <_vfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	460d      	mov	r5, r1
 800883e:	b09d      	sub	sp, #116	; 0x74
 8008840:	4614      	mov	r4, r2
 8008842:	4698      	mov	r8, r3
 8008844:	4606      	mov	r6, r0
 8008846:	b118      	cbz	r0, 8008850 <_vfiprintf_r+0x18>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <_vfiprintf_r+0x18>
 800884c:	f7ff fc78 	bl	8008140 <__sinit>
 8008850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d405      	bmi.n	8008862 <_vfiprintf_r+0x2a>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	059a      	lsls	r2, r3, #22
 800885a:	d402      	bmi.n	8008862 <_vfiprintf_r+0x2a>
 800885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885e:	f7ff feb9 	bl	80085d4 <__retarget_lock_acquire_recursive>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	071b      	lsls	r3, r3, #28
 8008866:	d501      	bpl.n	800886c <_vfiprintf_r+0x34>
 8008868:	692b      	ldr	r3, [r5, #16]
 800886a:	b99b      	cbnz	r3, 8008894 <_vfiprintf_r+0x5c>
 800886c:	4629      	mov	r1, r5
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff fd8a 	bl	8008388 <__swsetup_r>
 8008874:	b170      	cbz	r0, 8008894 <_vfiprintf_r+0x5c>
 8008876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008878:	07dc      	lsls	r4, r3, #31
 800887a:	d504      	bpl.n	8008886 <_vfiprintf_r+0x4e>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	b01d      	add	sp, #116	; 0x74
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	0598      	lsls	r0, r3, #22
 800888a:	d4f7      	bmi.n	800887c <_vfiprintf_r+0x44>
 800888c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888e:	f7ff fea2 	bl	80085d6 <__retarget_lock_release_recursive>
 8008892:	e7f3      	b.n	800887c <_vfiprintf_r+0x44>
 8008894:	2300      	movs	r3, #0
 8008896:	9309      	str	r3, [sp, #36]	; 0x24
 8008898:	2320      	movs	r3, #32
 800889a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800889e:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a2:	2330      	movs	r3, #48	; 0x30
 80088a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a58 <_vfiprintf_r+0x220>
 80088a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ac:	f04f 0901 	mov.w	r9, #1
 80088b0:	4623      	mov	r3, r4
 80088b2:	469a      	mov	sl, r3
 80088b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088b8:	b10a      	cbz	r2, 80088be <_vfiprintf_r+0x86>
 80088ba:	2a25      	cmp	r2, #37	; 0x25
 80088bc:	d1f9      	bne.n	80088b2 <_vfiprintf_r+0x7a>
 80088be:	ebba 0b04 	subs.w	fp, sl, r4
 80088c2:	d00b      	beq.n	80088dc <_vfiprintf_r+0xa4>
 80088c4:	465b      	mov	r3, fp
 80088c6:	4622      	mov	r2, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffa1 	bl	8008812 <__sfputs_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	f000 80a9 	beq.w	8008a28 <_vfiprintf_r+0x1f0>
 80088d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d8:	445a      	add	r2, fp
 80088da:	9209      	str	r2, [sp, #36]	; 0x24
 80088dc:	f89a 3000 	ldrb.w	r3, [sl]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80a1 	beq.w	8008a28 <_vfiprintf_r+0x1f0>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f0:	f10a 0a01 	add.w	sl, sl, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fc:	931a      	str	r3, [sp, #104]	; 0x68
 80088fe:	4654      	mov	r4, sl
 8008900:	2205      	movs	r2, #5
 8008902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008906:	4854      	ldr	r0, [pc, #336]	; (8008a58 <_vfiprintf_r+0x220>)
 8008908:	f7f7 fc72 	bl	80001f0 <memchr>
 800890c:	9a04      	ldr	r2, [sp, #16]
 800890e:	b9d8      	cbnz	r0, 8008948 <_vfiprintf_r+0x110>
 8008910:	06d1      	lsls	r1, r2, #27
 8008912:	bf44      	itt	mi
 8008914:	2320      	movmi	r3, #32
 8008916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891a:	0713      	lsls	r3, r2, #28
 800891c:	bf44      	itt	mi
 800891e:	232b      	movmi	r3, #43	; 0x2b
 8008920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008924:	f89a 3000 	ldrb.w	r3, [sl]
 8008928:	2b2a      	cmp	r3, #42	; 0x2a
 800892a:	d015      	beq.n	8008958 <_vfiprintf_r+0x120>
 800892c:	9a07      	ldr	r2, [sp, #28]
 800892e:	4654      	mov	r4, sl
 8008930:	2000      	movs	r0, #0
 8008932:	f04f 0c0a 	mov.w	ip, #10
 8008936:	4621      	mov	r1, r4
 8008938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893c:	3b30      	subs	r3, #48	; 0x30
 800893e:	2b09      	cmp	r3, #9
 8008940:	d94d      	bls.n	80089de <_vfiprintf_r+0x1a6>
 8008942:	b1b0      	cbz	r0, 8008972 <_vfiprintf_r+0x13a>
 8008944:	9207      	str	r2, [sp, #28]
 8008946:	e014      	b.n	8008972 <_vfiprintf_r+0x13a>
 8008948:	eba0 0308 	sub.w	r3, r0, r8
 800894c:	fa09 f303 	lsl.w	r3, r9, r3
 8008950:	4313      	orrs	r3, r2
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	46a2      	mov	sl, r4
 8008956:	e7d2      	b.n	80088fe <_vfiprintf_r+0xc6>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d19      	adds	r1, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9103      	str	r1, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfbb      	ittet	lt
 8008964:	425b      	neglt	r3, r3
 8008966:	f042 0202 	orrlt.w	r2, r2, #2
 800896a:	9307      	strge	r3, [sp, #28]
 800896c:	9307      	strlt	r3, [sp, #28]
 800896e:	bfb8      	it	lt
 8008970:	9204      	strlt	r2, [sp, #16]
 8008972:	7823      	ldrb	r3, [r4, #0]
 8008974:	2b2e      	cmp	r3, #46	; 0x2e
 8008976:	d10c      	bne.n	8008992 <_vfiprintf_r+0x15a>
 8008978:	7863      	ldrb	r3, [r4, #1]
 800897a:	2b2a      	cmp	r3, #42	; 0x2a
 800897c:	d134      	bne.n	80089e8 <_vfiprintf_r+0x1b0>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	1d1a      	adds	r2, r3, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	9203      	str	r2, [sp, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	bfb8      	it	lt
 800898a:	f04f 33ff 	movlt.w	r3, #4294967295
 800898e:	3402      	adds	r4, #2
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a68 <_vfiprintf_r+0x230>
 8008996:	7821      	ldrb	r1, [r4, #0]
 8008998:	2203      	movs	r2, #3
 800899a:	4650      	mov	r0, sl
 800899c:	f7f7 fc28 	bl	80001f0 <memchr>
 80089a0:	b138      	cbz	r0, 80089b2 <_vfiprintf_r+0x17a>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	eba0 000a 	sub.w	r0, r0, sl
 80089a8:	2240      	movs	r2, #64	; 0x40
 80089aa:	4082      	lsls	r2, r0
 80089ac:	4313      	orrs	r3, r2
 80089ae:	3401      	adds	r4, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b6:	4829      	ldr	r0, [pc, #164]	; (8008a5c <_vfiprintf_r+0x224>)
 80089b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089bc:	2206      	movs	r2, #6
 80089be:	f7f7 fc17 	bl	80001f0 <memchr>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d03f      	beq.n	8008a46 <_vfiprintf_r+0x20e>
 80089c6:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <_vfiprintf_r+0x228>)
 80089c8:	bb1b      	cbnz	r3, 8008a12 <_vfiprintf_r+0x1da>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	3307      	adds	r3, #7
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	3308      	adds	r3, #8
 80089d4:	9303      	str	r3, [sp, #12]
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	443b      	add	r3, r7
 80089da:	9309      	str	r3, [sp, #36]	; 0x24
 80089dc:	e768      	b.n	80088b0 <_vfiprintf_r+0x78>
 80089de:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e2:	460c      	mov	r4, r1
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7a6      	b.n	8008936 <_vfiprintf_r+0xfe>
 80089e8:	2300      	movs	r3, #0
 80089ea:	3401      	adds	r4, #1
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	4619      	mov	r1, r3
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fa:	3a30      	subs	r2, #48	; 0x30
 80089fc:	2a09      	cmp	r2, #9
 80089fe:	d903      	bls.n	8008a08 <_vfiprintf_r+0x1d0>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0c6      	beq.n	8008992 <_vfiprintf_r+0x15a>
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	e7c4      	b.n	8008992 <_vfiprintf_r+0x15a>
 8008a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7f0      	b.n	80089f4 <_vfiprintf_r+0x1bc>
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	462a      	mov	r2, r5
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <_vfiprintf_r+0x22c>)
 8008a1a:	a904      	add	r1, sp, #16
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f3af 8000 	nop.w
 8008a22:	4607      	mov	r7, r0
 8008a24:	1c78      	adds	r0, r7, #1
 8008a26:	d1d6      	bne.n	80089d6 <_vfiprintf_r+0x19e>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x202>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x202>
 8008a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a36:	f7ff fdce 	bl	80085d6 <__retarget_lock_release_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af1d 	bmi.w	800887c <_vfiprintf_r+0x44>
 8008a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a44:	e71c      	b.n	8008880 <_vfiprintf_r+0x48>
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <_vfiprintf_r+0x22c>)
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 f879 	bl	8008b48 <_printf_i>
 8008a56:	e7e4      	b.n	8008a22 <_vfiprintf_r+0x1ea>
 8008a58:	080090ec 	.word	0x080090ec
 8008a5c:	080090f6 	.word	0x080090f6
 8008a60:	00000000 	.word	0x00000000
 8008a64:	08008813 	.word	0x08008813
 8008a68:	080090f2 	.word	0x080090f2

08008a6c <_printf_common>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	4616      	mov	r6, r2
 8008a72:	4699      	mov	r9, r3
 8008a74:	688a      	ldr	r2, [r1, #8]
 8008a76:	690b      	ldr	r3, [r1, #16]
 8008a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	bfb8      	it	lt
 8008a80:	4613      	movlt	r3, r2
 8008a82:	6033      	str	r3, [r6, #0]
 8008a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a88:	4607      	mov	r7, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b10a      	cbz	r2, 8008a92 <_printf_common+0x26>
 8008a8e:	3301      	adds	r3, #1
 8008a90:	6033      	str	r3, [r6, #0]
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	0699      	lsls	r1, r3, #26
 8008a96:	bf42      	ittt	mi
 8008a98:	6833      	ldrmi	r3, [r6, #0]
 8008a9a:	3302      	addmi	r3, #2
 8008a9c:	6033      	strmi	r3, [r6, #0]
 8008a9e:	6825      	ldr	r5, [r4, #0]
 8008aa0:	f015 0506 	ands.w	r5, r5, #6
 8008aa4:	d106      	bne.n	8008ab4 <_printf_common+0x48>
 8008aa6:	f104 0a19 	add.w	sl, r4, #25
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	6832      	ldr	r2, [r6, #0]
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dc26      	bgt.n	8008b02 <_printf_common+0x96>
 8008ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ab8:	1e13      	subs	r3, r2, #0
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	bf18      	it	ne
 8008abe:	2301      	movne	r3, #1
 8008ac0:	0692      	lsls	r2, r2, #26
 8008ac2:	d42b      	bmi.n	8008b1c <_printf_common+0xb0>
 8008ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c0      	blx	r8
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d01e      	beq.n	8008b10 <_printf_common+0xa4>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	f003 0306 	and.w	r3, r3, #6
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	bf02      	ittt	eq
 8008ade:	68e5      	ldreq	r5, [r4, #12]
 8008ae0:	6833      	ldreq	r3, [r6, #0]
 8008ae2:	1aed      	subeq	r5, r5, r3
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	bf0c      	ite	eq
 8008ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aec:	2500      	movne	r5, #0
 8008aee:	4293      	cmp	r3, r2
 8008af0:	bfc4      	itt	gt
 8008af2:	1a9b      	subgt	r3, r3, r2
 8008af4:	18ed      	addgt	r5, r5, r3
 8008af6:	2600      	movs	r6, #0
 8008af8:	341a      	adds	r4, #26
 8008afa:	42b5      	cmp	r5, r6
 8008afc:	d11a      	bne.n	8008b34 <_printf_common+0xc8>
 8008afe:	2000      	movs	r0, #0
 8008b00:	e008      	b.n	8008b14 <_printf_common+0xa8>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4652      	mov	r2, sl
 8008b06:	4649      	mov	r1, r9
 8008b08:	4638      	mov	r0, r7
 8008b0a:	47c0      	blx	r8
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d103      	bne.n	8008b18 <_printf_common+0xac>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b18:	3501      	adds	r5, #1
 8008b1a:	e7c6      	b.n	8008aaa <_printf_common+0x3e>
 8008b1c:	18e1      	adds	r1, r4, r3
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	2030      	movs	r0, #48	; 0x30
 8008b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b26:	4422      	add	r2, r4
 8008b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b30:	3302      	adds	r3, #2
 8008b32:	e7c7      	b.n	8008ac4 <_printf_common+0x58>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4622      	mov	r2, r4
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	47c0      	blx	r8
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d0e6      	beq.n	8008b10 <_printf_common+0xa4>
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7d9      	b.n	8008afa <_printf_common+0x8e>
	...

08008b48 <_printf_i>:
 8008b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	7e0f      	ldrb	r7, [r1, #24]
 8008b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b50:	2f78      	cmp	r7, #120	; 0x78
 8008b52:	4691      	mov	r9, r2
 8008b54:	4680      	mov	r8, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	469a      	mov	sl, r3
 8008b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b5e:	d807      	bhi.n	8008b70 <_printf_i+0x28>
 8008b60:	2f62      	cmp	r7, #98	; 0x62
 8008b62:	d80a      	bhi.n	8008b7a <_printf_i+0x32>
 8008b64:	2f00      	cmp	r7, #0
 8008b66:	f000 80d4 	beq.w	8008d12 <_printf_i+0x1ca>
 8008b6a:	2f58      	cmp	r7, #88	; 0x58
 8008b6c:	f000 80c0 	beq.w	8008cf0 <_printf_i+0x1a8>
 8008b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b78:	e03a      	b.n	8008bf0 <_printf_i+0xa8>
 8008b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b7e:	2b15      	cmp	r3, #21
 8008b80:	d8f6      	bhi.n	8008b70 <_printf_i+0x28>
 8008b82:	a101      	add	r1, pc, #4	; (adr r1, 8008b88 <_printf_i+0x40>)
 8008b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008bf5 	.word	0x08008bf5
 8008b90:	08008b71 	.word	0x08008b71
 8008b94:	08008b71 	.word	0x08008b71
 8008b98:	08008b71 	.word	0x08008b71
 8008b9c:	08008b71 	.word	0x08008b71
 8008ba0:	08008bf5 	.word	0x08008bf5
 8008ba4:	08008b71 	.word	0x08008b71
 8008ba8:	08008b71 	.word	0x08008b71
 8008bac:	08008b71 	.word	0x08008b71
 8008bb0:	08008b71 	.word	0x08008b71
 8008bb4:	08008cf9 	.word	0x08008cf9
 8008bb8:	08008c21 	.word	0x08008c21
 8008bbc:	08008cb3 	.word	0x08008cb3
 8008bc0:	08008b71 	.word	0x08008b71
 8008bc4:	08008b71 	.word	0x08008b71
 8008bc8:	08008d1b 	.word	0x08008d1b
 8008bcc:	08008b71 	.word	0x08008b71
 8008bd0:	08008c21 	.word	0x08008c21
 8008bd4:	08008b71 	.word	0x08008b71
 8008bd8:	08008b71 	.word	0x08008b71
 8008bdc:	08008cbb 	.word	0x08008cbb
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	1d1a      	adds	r2, r3, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	602a      	str	r2, [r5, #0]
 8008be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e09f      	b.n	8008d34 <_printf_i+0x1ec>
 8008bf4:	6820      	ldr	r0, [r4, #0]
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	0607      	lsls	r7, r0, #24
 8008bfa:	f103 0104 	add.w	r1, r3, #4
 8008bfe:	6029      	str	r1, [r5, #0]
 8008c00:	d501      	bpl.n	8008c06 <_printf_i+0xbe>
 8008c02:	681e      	ldr	r6, [r3, #0]
 8008c04:	e003      	b.n	8008c0e <_printf_i+0xc6>
 8008c06:	0646      	lsls	r6, r0, #25
 8008c08:	d5fb      	bpl.n	8008c02 <_printf_i+0xba>
 8008c0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	da03      	bge.n	8008c1a <_printf_i+0xd2>
 8008c12:	232d      	movs	r3, #45	; 0x2d
 8008c14:	4276      	negs	r6, r6
 8008c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1a:	485a      	ldr	r0, [pc, #360]	; (8008d84 <_printf_i+0x23c>)
 8008c1c:	230a      	movs	r3, #10
 8008c1e:	e012      	b.n	8008c46 <_printf_i+0xfe>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	1d19      	adds	r1, r3, #4
 8008c26:	6029      	str	r1, [r5, #0]
 8008c28:	0605      	lsls	r5, r0, #24
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0xe8>
 8008c2c:	681e      	ldr	r6, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <_printf_i+0xee>
 8008c30:	0641      	lsls	r1, r0, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0xe4>
 8008c34:	881e      	ldrh	r6, [r3, #0]
 8008c36:	4853      	ldr	r0, [pc, #332]	; (8008d84 <_printf_i+0x23c>)
 8008c38:	2f6f      	cmp	r7, #111	; 0x6f
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2308      	moveq	r3, #8
 8008c3e:	230a      	movne	r3, #10
 8008c40:	2100      	movs	r1, #0
 8008c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c46:	6865      	ldr	r5, [r4, #4]
 8008c48:	60a5      	str	r5, [r4, #8]
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	bfa2      	ittt	ge
 8008c4e:	6821      	ldrge	r1, [r4, #0]
 8008c50:	f021 0104 	bicge.w	r1, r1, #4
 8008c54:	6021      	strge	r1, [r4, #0]
 8008c56:	b90e      	cbnz	r6, 8008c5c <_printf_i+0x114>
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	d04b      	beq.n	8008cf4 <_printf_i+0x1ac>
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c62:	fb03 6711 	mls	r7, r3, r1, r6
 8008c66:	5dc7      	ldrb	r7, [r0, r7]
 8008c68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c6c:	4637      	mov	r7, r6
 8008c6e:	42bb      	cmp	r3, r7
 8008c70:	460e      	mov	r6, r1
 8008c72:	d9f4      	bls.n	8008c5e <_printf_i+0x116>
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d10b      	bne.n	8008c90 <_printf_i+0x148>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	07de      	lsls	r6, r3, #31
 8008c7c:	d508      	bpl.n	8008c90 <_printf_i+0x148>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4299      	cmp	r1, r3
 8008c84:	bfde      	ittt	le
 8008c86:	2330      	movle	r3, #48	; 0x30
 8008c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c90:	1b52      	subs	r2, r2, r5
 8008c92:	6122      	str	r2, [r4, #16]
 8008c94:	f8cd a000 	str.w	sl, [sp]
 8008c98:	464b      	mov	r3, r9
 8008c9a:	aa03      	add	r2, sp, #12
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4640      	mov	r0, r8
 8008ca0:	f7ff fee4 	bl	8008a6c <_printf_common>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d14a      	bne.n	8008d3e <_printf_i+0x1f6>
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	b004      	add	sp, #16
 8008cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	f043 0320 	orr.w	r3, r3, #32
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	4833      	ldr	r0, [pc, #204]	; (8008d88 <_printf_i+0x240>)
 8008cbc:	2778      	movs	r7, #120	; 0x78
 8008cbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	6829      	ldr	r1, [r5, #0]
 8008cc6:	061f      	lsls	r7, r3, #24
 8008cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ccc:	d402      	bmi.n	8008cd4 <_printf_i+0x18c>
 8008cce:	065f      	lsls	r7, r3, #25
 8008cd0:	bf48      	it	mi
 8008cd2:	b2b6      	uxthmi	r6, r6
 8008cd4:	07df      	lsls	r7, r3, #31
 8008cd6:	bf48      	it	mi
 8008cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cdc:	6029      	str	r1, [r5, #0]
 8008cde:	bf48      	it	mi
 8008ce0:	6023      	strmi	r3, [r4, #0]
 8008ce2:	b91e      	cbnz	r6, 8008cec <_printf_i+0x1a4>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	f023 0320 	bic.w	r3, r3, #32
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	2310      	movs	r3, #16
 8008cee:	e7a7      	b.n	8008c40 <_printf_i+0xf8>
 8008cf0:	4824      	ldr	r0, [pc, #144]	; (8008d84 <_printf_i+0x23c>)
 8008cf2:	e7e4      	b.n	8008cbe <_printf_i+0x176>
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	e7bd      	b.n	8008c74 <_printf_i+0x12c>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	6826      	ldr	r6, [r4, #0]
 8008cfc:	6961      	ldr	r1, [r4, #20]
 8008cfe:	1d18      	adds	r0, r3, #4
 8008d00:	6028      	str	r0, [r5, #0]
 8008d02:	0635      	lsls	r5, r6, #24
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0x1c4>
 8008d08:	6019      	str	r1, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <_printf_i+0x1ca>
 8008d0c:	0670      	lsls	r0, r6, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0x1c0>
 8008d10:	8019      	strh	r1, [r3, #0]
 8008d12:	2300      	movs	r3, #0
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	4615      	mov	r5, r2
 8008d18:	e7bc      	b.n	8008c94 <_printf_i+0x14c>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	681d      	ldr	r5, [r3, #0]
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7f7 fa62 	bl	80001f0 <memchr>
 8008d2c:	b108      	cbz	r0, 8008d32 <_printf_i+0x1ea>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	6060      	str	r0, [r4, #4]
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	2300      	movs	r3, #0
 8008d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3c:	e7aa      	b.n	8008c94 <_printf_i+0x14c>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4649      	mov	r1, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	47d0      	blx	sl
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d0ad      	beq.n	8008ca8 <_printf_i+0x160>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	079b      	lsls	r3, r3, #30
 8008d50:	d413      	bmi.n	8008d7a <_printf_i+0x232>
 8008d52:	68e0      	ldr	r0, [r4, #12]
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	4298      	cmp	r0, r3
 8008d58:	bfb8      	it	lt
 8008d5a:	4618      	movlt	r0, r3
 8008d5c:	e7a6      	b.n	8008cac <_printf_i+0x164>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4632      	mov	r2, r6
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d09d      	beq.n	8008ca8 <_printf_i+0x160>
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	68e3      	ldr	r3, [r4, #12]
 8008d70:	9903      	ldr	r1, [sp, #12]
 8008d72:	1a5b      	subs	r3, r3, r1
 8008d74:	42ab      	cmp	r3, r5
 8008d76:	dcf2      	bgt.n	8008d5e <_printf_i+0x216>
 8008d78:	e7eb      	b.n	8008d52 <_printf_i+0x20a>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f104 0619 	add.w	r6, r4, #25
 8008d80:	e7f5      	b.n	8008d6e <_printf_i+0x226>
 8008d82:	bf00      	nop
 8008d84:	080090fd 	.word	0x080090fd
 8008d88:	0800910e 	.word	0x0800910e

08008d8c <__sflush_r>:
 8008d8c:	898a      	ldrh	r2, [r1, #12]
 8008d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	4605      	mov	r5, r0
 8008d94:	0710      	lsls	r0, r2, #28
 8008d96:	460c      	mov	r4, r1
 8008d98:	d458      	bmi.n	8008e4c <__sflush_r+0xc0>
 8008d9a:	684b      	ldr	r3, [r1, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	dc05      	bgt.n	8008dac <__sflush_r+0x20>
 8008da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dc02      	bgt.n	8008dac <__sflush_r+0x20>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d0f9      	beq.n	8008da6 <__sflush_r+0x1a>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008db8:	682f      	ldr	r7, [r5, #0]
 8008dba:	6a21      	ldr	r1, [r4, #32]
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	d032      	beq.n	8008e26 <__sflush_r+0x9a>
 8008dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	075a      	lsls	r2, r3, #29
 8008dc6:	d505      	bpl.n	8008dd4 <__sflush_r+0x48>
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	1ac0      	subs	r0, r0, r3
 8008dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dce:	b10b      	cbz	r3, 8008dd4 <__sflush_r+0x48>
 8008dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dd2:	1ac0      	subs	r0, r0, r3
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dda:	6a21      	ldr	r1, [r4, #32]
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b0      	blx	r6
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	d106      	bne.n	8008df4 <__sflush_r+0x68>
 8008de6:	6829      	ldr	r1, [r5, #0]
 8008de8:	291d      	cmp	r1, #29
 8008dea:	d82b      	bhi.n	8008e44 <__sflush_r+0xb8>
 8008dec:	4a29      	ldr	r2, [pc, #164]	; (8008e94 <__sflush_r+0x108>)
 8008dee:	410a      	asrs	r2, r1
 8008df0:	07d6      	lsls	r6, r2, #31
 8008df2:	d427      	bmi.n	8008e44 <__sflush_r+0xb8>
 8008df4:	2200      	movs	r2, #0
 8008df6:	6062      	str	r2, [r4, #4]
 8008df8:	04d9      	lsls	r1, r3, #19
 8008dfa:	6922      	ldr	r2, [r4, #16]
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	d504      	bpl.n	8008e0a <__sflush_r+0x7e>
 8008e00:	1c42      	adds	r2, r0, #1
 8008e02:	d101      	bne.n	8008e08 <__sflush_r+0x7c>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b903      	cbnz	r3, 8008e0a <__sflush_r+0x7e>
 8008e08:	6560      	str	r0, [r4, #84]	; 0x54
 8008e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0c:	602f      	str	r7, [r5, #0]
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d0c9      	beq.n	8008da6 <__sflush_r+0x1a>
 8008e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d002      	beq.n	8008e20 <__sflush_r+0x94>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f7ff fbea 	bl	80085f4 <_free_r>
 8008e20:	2000      	movs	r0, #0
 8008e22:	6360      	str	r0, [r4, #52]	; 0x34
 8008e24:	e7c0      	b.n	8008da8 <__sflush_r+0x1c>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b0      	blx	r6
 8008e2c:	1c41      	adds	r1, r0, #1
 8008e2e:	d1c8      	bne.n	8008dc2 <__sflush_r+0x36>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c5      	beq.n	8008dc2 <__sflush_r+0x36>
 8008e36:	2b1d      	cmp	r3, #29
 8008e38:	d001      	beq.n	8008e3e <__sflush_r+0xb2>
 8008e3a:	2b16      	cmp	r3, #22
 8008e3c:	d101      	bne.n	8008e42 <__sflush_r+0xb6>
 8008e3e:	602f      	str	r7, [r5, #0]
 8008e40:	e7b1      	b.n	8008da6 <__sflush_r+0x1a>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	e7ad      	b.n	8008da8 <__sflush_r+0x1c>
 8008e4c:	690f      	ldr	r7, [r1, #16]
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	d0a9      	beq.n	8008da6 <__sflush_r+0x1a>
 8008e52:	0793      	lsls	r3, r2, #30
 8008e54:	680e      	ldr	r6, [r1, #0]
 8008e56:	bf08      	it	eq
 8008e58:	694b      	ldreq	r3, [r1, #20]
 8008e5a:	600f      	str	r7, [r1, #0]
 8008e5c:	bf18      	it	ne
 8008e5e:	2300      	movne	r3, #0
 8008e60:	eba6 0807 	sub.w	r8, r6, r7
 8008e64:	608b      	str	r3, [r1, #8]
 8008e66:	f1b8 0f00 	cmp.w	r8, #0
 8008e6a:	dd9c      	ble.n	8008da6 <__sflush_r+0x1a>
 8008e6c:	6a21      	ldr	r1, [r4, #32]
 8008e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e70:	4643      	mov	r3, r8
 8008e72:	463a      	mov	r2, r7
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b0      	blx	r6
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	dc06      	bgt.n	8008e8a <__sflush_r+0xfe>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e82:	81a3      	strh	r3, [r4, #12]
 8008e84:	f04f 30ff 	mov.w	r0, #4294967295
 8008e88:	e78e      	b.n	8008da8 <__sflush_r+0x1c>
 8008e8a:	4407      	add	r7, r0
 8008e8c:	eba8 0800 	sub.w	r8, r8, r0
 8008e90:	e7e9      	b.n	8008e66 <__sflush_r+0xda>
 8008e92:	bf00      	nop
 8008e94:	dfbffffe 	.word	0xdfbffffe

08008e98 <_fflush_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	b913      	cbnz	r3, 8008ea8 <_fflush_r+0x10>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	b118      	cbz	r0, 8008eb2 <_fflush_r+0x1a>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <_fflush_r+0x1a>
 8008eae:	f7ff f947 	bl	8008140 <__sinit>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0f3      	beq.n	8008ea2 <_fflush_r+0xa>
 8008eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d404      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec0:	0599      	lsls	r1, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec6:	f7ff fb85 	bl	80085d4 <__retarget_lock_acquire_recursive>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7ff ff5d 	bl	8008d8c <__sflush_r>
 8008ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed4:	07da      	lsls	r2, r3, #31
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	d4e4      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d4e1      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f7ff fb78 	bl	80085d6 <__retarget_lock_release_recursive>
 8008ee6:	e7dd      	b.n	8008ea4 <_fflush_r+0xc>

08008ee8 <__swhatbuf_r>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	b096      	sub	sp, #88	; 0x58
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	461e      	mov	r6, r3
 8008ef8:	da0d      	bge.n	8008f16 <__swhatbuf_r+0x2e>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f00:	f04f 0100 	mov.w	r1, #0
 8008f04:	bf0c      	ite	eq
 8008f06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f0a:	2340      	movne	r3, #64	; 0x40
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	6031      	str	r1, [r6, #0]
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	b016      	add	sp, #88	; 0x58
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
 8008f16:	466a      	mov	r2, sp
 8008f18:	f000 f848 	bl	8008fac <_fstat_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	dbec      	blt.n	8008efa <__swhatbuf_r+0x12>
 8008f20:	9901      	ldr	r1, [sp, #4]
 8008f22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f2a:	4259      	negs	r1, r3
 8008f2c:	4159      	adcs	r1, r3
 8008f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f32:	e7eb      	b.n	8008f0c <__swhatbuf_r+0x24>

08008f34 <__smakebuf_r>:
 8008f34:	898b      	ldrh	r3, [r1, #12]
 8008f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f38:	079d      	lsls	r5, r3, #30
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	d507      	bpl.n	8008f50 <__smakebuf_r+0x1c>
 8008f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	6123      	str	r3, [r4, #16]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6163      	str	r3, [r4, #20]
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	ab01      	add	r3, sp, #4
 8008f52:	466a      	mov	r2, sp
 8008f54:	f7ff ffc8 	bl	8008ee8 <__swhatbuf_r>
 8008f58:	9900      	ldr	r1, [sp, #0]
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff fbb5 	bl	80086cc <_malloc_r>
 8008f62:	b948      	cbnz	r0, 8008f78 <__smakebuf_r+0x44>
 8008f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f68:	059a      	lsls	r2, r3, #22
 8008f6a:	d4ef      	bmi.n	8008f4c <__smakebuf_r+0x18>
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	f043 0302 	orr.w	r3, r3, #2
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	e7e3      	b.n	8008f40 <__smakebuf_r+0xc>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f80:	81a3      	strh	r3, [r4, #12]
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	6163      	str	r3, [r4, #20]
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	6120      	str	r0, [r4, #16]
 8008f8a:	b15b      	cbz	r3, 8008fa4 <__smakebuf_r+0x70>
 8008f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f90:	4630      	mov	r0, r6
 8008f92:	f000 f81d 	bl	8008fd0 <_isatty_r>
 8008f96:	b128      	cbz	r0, 8008fa4 <__smakebuf_r+0x70>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	431d      	orrs	r5, r3
 8008fa8:	81a5      	strh	r5, [r4, #12]
 8008faa:	e7cf      	b.n	8008f4c <__smakebuf_r+0x18>

08008fac <_fstat_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_fstat_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7f8 f874 	bl	80010a6 <_fstat>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_fstat_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_fstat_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	2000598c 	.word	0x2000598c

08008fd0 <_isatty_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	; (8008fec <_isatty_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7f8 f873 	bl	80010c6 <_isatty>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_isatty_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_isatty_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	2000598c 	.word	0x2000598c

08008ff0 <_sbrk_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d06      	ldr	r5, [pc, #24]	; (800900c <_sbrk_r+0x1c>)
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	f7f8 f87c 	bl	80010f8 <_sbrk>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_sbrk_r+0x1a>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_sbrk_r+0x1a>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	2000598c 	.word	0x2000598c

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
